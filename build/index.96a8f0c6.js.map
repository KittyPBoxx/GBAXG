{"mappings":"AAMA,IAAIA,WAAY,EACZC,mBAAqB,EAGrBC,oBAAqB,EA2BzB,MAAMC,mBAAqB,SAErBC,sBAAwB,SACxBC,qBAAwB,SACxBC,sBAAwB,SAExBC,kBAAoB,SAEpBC,qBAAuB,SACvBC,oBAAuB,SACvBC,qBAAuB,SAEvBC,iBAAmB,SACnBC,kBAAoB,SAG1B,IAAIC,YACAC,YAAa,EACjBC,kBAAkBC,UAAUC,wBAA0BF,kBAAkBC,UAAUE,QAClFH,kBAAkBC,UAAUE,QAAU,SAAUC,EAASC,GAErD,GAA0B,GAAtBnB,mBAAyB,CAEzB,GAA0B,GAAtBA,qBAvBe,UAyBXkB,GAAmF,OAA9CE,UAAUC,OAAOC,OAAOC,UAAUC,SAnB7D,UAoBRN,IAA+E,MAA9CE,UAAUC,OAAOC,OAAOC,UAAUC,SAAiE,MAA9CJ,UAAUC,OAAOC,OAAOC,UAAUC,UAAqB,CAE3IJ,UAAUC,OAAOI,QACjB,IAAIC,EAAgBN,UAAUC,OAAOC,OAAOC,UAAUC,QAClDG,EAAaC,cAA+B,KAAjBF,GAAyC,KAAjBA,EAAuBG,qBAAuBC,sBAAuBC,qBACxHC,EAAqBC,mBAAoC,KAAjBP,GAAyC,KAAjBA,EAAuBQ,mBAAqBC,oBAAqBC,kBAAmBC,mBACpJC,EAAgBL,mBAAoC,KAAjBP,GAAyC,KAAjBA,EAAuBQ,mBAAqBC,oBAAqBI,eAAgBC,gBAE5IC,EAAc,IAAIC,YACtBD,EAAYE,SAASjB,IAErBd,YAAc,IAAIgC,YAAYH,EAAYI,YAC9BC,UAAUpB,GAEtBN,UAAUC,OAAO0B,iBAAiBC,UAAUC,kBAAkBC,WAE3B,KAA/BD,kBAAkBC,WAAmD,KAA/BD,kBAAkBC,WACxDC,KAAKC,OAnCA,SAmC6BH,kBAAkBI,QACpDF,KAAKC,OAnCA,SAmC4BH,kBAAkBK,OACnDH,KAAKC,OAnCA,SAmC6BH,kBAAkBM,YAEpDJ,KAAKC,OA7CC,SA6C6BH,kBAAkBI,QACrDF,KAAKC,OA7CC,SA6C4BH,kBAAkBK,OACpDH,KAAKC,OA7CC,SA6C6BH,kBAAkBM,WAEzD,IAAIC,EAAiBpC,UAAUC,OAAOC,OAAOC,UAAUC,QAavD,OAZAiC,WAA6B,KAAlBD,GAA2C,KAAlBA,EAAwB3B,qBAAuBC,sBAAuBC,oBAAqBJ,GAC/H+B,oBAAsC,KAAlBF,GAA2C,KAAlBA,EAAwBtB,mBAAqBC,oBAAqBC,kBAAmBC,kBAAmBL,GACrJ0B,oBAAsC,KAAlBF,GAA2C,KAAlBA,EAAwBtB,mBAAqBC,oBAAqBI,eAAgBC,eAAgBF,GAE/IG,EAAYkB,UAAUH,EAAgB9B,GAAe,GACrDd,YAAYgD,WAAWJ,EAAgB9B,GAAe,GAEtDN,UAAUyC,WAAWC,OAAS,EAC9B9D,mBAAqB,EACT+D,SAASC,eAAe,mBAC9BC,UAAUC,IAAI,cACpB9C,UAAUC,OAAO8C,MAGzB,CAKJ,GAA0B,GAAtBnE,qBAvEe,UAwEXkB,GAAmF,OAA9CE,UAAUC,OAAOC,OAAOC,UAAUC,SAlE7D,UAmEZN,IAA+E,MAA9CE,UAAUC,OAAOC,OAAOC,UAAUC,SAAiE,MAA9CJ,UAAUC,OAAOC,OAAOC,UAAUC,UAAqB,CAE3IJ,UAAUyC,WAAWC,OAAS,GAClBC,SAASC,eAAe,mBAC9BC,UAAUG,OAAO,SACvBpE,mBAAqB,EACrBD,WAAY,EACZkD,kBAAoB,IAExB,CAGR,CArFuB,UAuFnB/B,GAAgF,OAA9CE,UAAUC,OAAOC,OAAOC,UAAUC,QAEpEX,YAAa,IAAI+B,aAAcyB,QAAQjD,UAAUC,OAAOC,OAAOgD,IAAIC,OAAOC,qBAAsBC,0BAA2B,GAnFzG,UAqFXvD,GAA+E,MAA9CE,UAAUC,OAAOC,OAAOC,UAAUC,UAE1EX,YAAa,IAAI+B,aAAcyB,QAAQjD,UAAUC,OAAOC,OAAOgD,IAAIC,OAAOG,oBAAqBC,yBAA0B,KAK7HxB,KAAKnC,wBAAwBE,EAASC,EAC1C,EAYCL,kBAAkBC,UAAU6D,uBAAyB9D,kBAAkBC,UAAUqC,OACjFtC,kBAAkBC,UAAUqC,OAAS,SAAUlC,EAASC,GA5G3B,UA8GtBD,GAAoF,OAA9CE,UAAUC,OAAOC,OAAOC,UAAUC,QAExEzB,UAAYE,oBAAsB4E,cA1Gb,UA4GhB3D,GAAoF,MAA9CE,UAAUC,OAAOC,OAAOC,UAAUC,SAAiE,MAA9CJ,UAAUC,OAAOC,OAAOC,UAAUC,UAElIzB,UAAYE,oBAAsB4E,eAGtC1B,KAAKyB,uBAAuB1D,EAASC,EAExC,EAGD,MAAM2D,6BAA+B,SAC/BC,8BAAgC,SAChCC,mBAAqB,EACrBC,mBAAqB,EACrBC,mBAAqB,EAC3B,IAAIC,UAAW,EACXC,kBAAmB,EACvBtE,kBAAkBC,UAAUsE,sBAAwBvE,kBAAkBC,UAAUuE,MAChFxE,kBAAkBC,UAAUuE,MAAQ,SAAUpE,GAE1C,GAAIiE,SAAU,CACV,GAV8B,UAU1BjE,GAA0F,OAA9CE,UAAUC,OAAOC,OAAOC,UAAUC,QAAiB,CAC/F,IAAI+D,EAAUpC,KAAKkC,sBAAsBnE,GACzC,OAAOqE,GAXQ,EACA,EAU6CA,CAChE,CAAO,GAdsB,UAclBrE,EAAwC,CAC/C,IAAIsE,EAAUrC,KAAKkC,sBAAsBnE,GACzC,OAAOsE,GAdQ,EACA,EAa6CA,CAChE,CACJ,CAEA,GAAIJ,iBAAkB,CAClB,GAxIkB,UAwIdlE,GAA8E,OAA9CE,UAAUC,OAAOC,OAAOC,UAAUC,QAClE,OAAO,EACJ,GA3IU,UA2INN,EACP,OAAO,CAEf,CAEA,OAAKnB,WA1JqB,UA4JtBmB,GAAkF,OAA9CE,UAAUC,OAAOC,OAAOC,UAAUC,QAGtEN,EAAUiC,KAAKsC,sBAAsBvE,EAASE,UAAUC,OAAOC,OAAOC,UAAUC,SAzJ3D,UA2JhBN,GAAkF,MAA9CE,UAAUC,OAAOC,OAAOC,UAAUC,SAAiE,MAA9CJ,UAAUC,OAAOC,OAAOC,UAAUC,UAGhIN,EAAUiC,KAAKsC,sBAAsBvE,EAASE,UAAUC,OAAOC,OAAOC,UAAUC,UAG7E2B,KAAKkC,sBAAsBnE,IAbXiC,KAAKkC,sBAAsBnE,EActD,EAEA,IAAI+B,kBAAoB,KACpByC,iBAAkB,EAClBb,cAAgB,KA4GpB,SAASc,oBAAoBC,GAEzB,IAAIC,EAAcD,EAAO1C,UAAY,IAAM0C,EAAOvC,OAAS,IAAMuC,EAAOtC,MAAQ,IAAMsC,EAAOrC,SAU7F,OARmB,YAAfsC,GAEsB,YAAfA,GAEe,aAAfA,KAHPD,EAAOrC,SAAW,GAOfqC,CACX,CAEAE,eAAeC,aAAaC,GACxB,IAAIC,EAAe7E,UAAUC,OAAO6E,WACpC9E,UAAUC,OAAO8E,SAAS,GAC1B/E,UAAUyC,WAAWC,OAAS,QACxBsC,MAAMJ,GACZ5E,UAAUC,OAAO8E,SAASF,GAC1B7E,UAAUyC,WAAWC,OAAS,EAClC,CAEA,SAASuC,kBACL,IAAIC,EAAQvC,SAASC,eAAe,mBACpCsC,EAAMrC,UAAUG,OAAO,cACvBkC,EAAMC,YACND,EAAMrC,UAAUC,IAAI,aACxB,CAEA,SAAStC,cAAcV,EAASsF,GAC5B,IAAIC,EAAgBvF,EAAU,SAC1BwF,EAAaD,EAAeD,EAChC,OAAOpF,UAAUC,OAAOC,OAAOqF,OAAOC,YAAYC,MAAMJ,EAAcC,EAC1E,CACA,SAASjD,WAAWvC,EAASsF,EAAQrF,GACjC,IAAIsF,EAAgBvF,EAAU,SAC9B,IAAK,IAAI4F,EAAI,EAAGA,EAAEN,EAAQM,IACtB1F,UAAUC,OAAOC,OAAOqF,OAAOC,YAAYH,EAAeK,GAAK3F,EAAK2F,EAE5E,CApJAhG,kBAAkBC,UAAU0E,sBAAwB,SAAUvE,EAASM,GAEnE,IAAIuF,EAAO5D,KAAKkC,sBAAsBnE,GAClC8F,EAAM7D,KAAKkC,sBAAsBnE,EAAU,GAC3C+F,EAAS9D,KAAKkC,sBAAsBnE,EAAU,GAG9CgG,EAAgB/D,KAAKgE,eAAe3F,EAASuF,EAAMC,EAAKC,GAE5D,GAAc,KAAVA,IAAkBC,EAElB,OAAOhG,EAGX,GAA0B,GAAtBlB,oBAA+C,GAApBA,mBAAyB,OAAOkB,EAG/D,IAAIkG,EAAS,KACTC,EAAU7F,EAAU,IAAMuF,EAAO,IAAMC,EAAM,IAAMC,EAEvD,GAAIpC,cAAe,CACf,IAAIyC,EAAUzC,cAAc0C,MAAM,KAClCH,EAAS,IAAII,OAAOH,EAASC,EAAQ,GAAIA,EAAQ,GAAIA,EAAQ,GAAIA,EAAQ,GAAIzC,eAC7Ea,iBAAkB,EAClBb,cAAgB,IACpB,MAAO,GAAGa,iBAAmB+B,SAASC,IAAIL,GAAU,CAChD,IAAIM,EAASF,SAASC,IAAIL,GAASM,OAC/BC,EAAUD,EAAOJ,MAAM,KAC3BH,EAAS,IAAII,OAAOH,EAASO,EAAQ,GAAIA,EAAQ,GAAIA,EAAQ,GAAIA,EAAQ,GAAID,GAC7EjC,iBAAkB,CACtB,MACI0B,EAASK,SAASC,IAAIL,GACtBQ,QAAQC,IAAI,yBAA2BT,GAwC3C,OArCID,GAEAA,EAASzB,oBAAoByB,GAE7BhG,UAAUC,OAAOI,QAEjBL,UAAUC,OAAO0B,iBAAiBgF,UAAUvG,GAAS,GACjD4F,EAAOlE,UAAU,IAAMkE,EAAOC,QAAQ,IAEtCrH,mBAAqB,EACrBiD,kBAAoBmE,EACpBlG,EAA8B,KAApBkG,EAAOlE,WAAwC,KAApBkE,EAAOlE,UArN3B,SANC,UA8NM,KAApBkE,EAAOlE,WAAwC,KAApBkE,EAAOlE,WAClCC,KAAKC,OAzNQ,SAyNqBgE,EAAO/D,QACzCF,KAAKC,OAzNQ,SAyNoBgE,EAAO9D,OACxCH,KAAKC,OAzNQ,SAyNqBgE,EAAO7D,UACzCrC,EA5Na,WA8NbiC,KAAKC,OApOS,SAoOqBgE,EAAO/D,QAC1CF,KAAKC,OApOS,SAoOoBgE,EAAO9D,OACzCH,KAAKC,OApOS,SAoOqBgE,EAAO7D,UAC1CrC,EAvOc,UA4OtBE,UAAUC,OAAO8C,OAEjB0D,QAAQC,IAAI,sBAAwBV,EAAOlE,UAAY,IAAMkE,EAAO/D,OAAS,IAAM+D,EAAO9D,MAAQ,IAAM8D,EAAO7D,WAE/GsE,QAAQC,IAAI,8BAGhB/H,WAAY,EAELmB,CACX,EAIAJ,kBAAkBC,UAAUoG,eAAiB,SAAS3F,EAASuF,EAAMC,EAAKC,GAEtE,GAAe,MAAXzF,GAA2B,IAARuF,GAAqB,GAAPC,GAAsB,KAAVC,GAE7C,IAAKpG,WAGD,OAFAgE,cAAgBA,eAAiB,WACjCmD,aAAa,KAAM,MAAQ,IACpB,OAGR,GAAe,KAAXxG,GAA0B,IAARuF,GAAqB,GAAPC,GAAsB,KAAVC,GAEnD,IAAKpG,WAGD,OAFAgE,cAAgBA,eAAiB,UACjCmD,aAAa,IAAK,MAAQ,IACnB,OAGR,GAAe,KAAXxG,GAA0B,IAARuF,GAAqB,GAAPC,GAAsB,KAAVC,EAInD,OADApC,cAAgBA,eAAiB,WAC1B,EAIX,OAAO,CACX,EAqDA,IAAIoD,kBAAmB,EACnBC,YAAa,EACbC,cAAgB,OAChBC,mBAAqB,OAEzBC,6BAA6BtH,UAAUuH,2BAA6BD,6BAA6BtH,UAAUwH,WAC3GF,6BAA6BtH,UAAUwH,WAAa,SAAUC,GAC1DrF,KAAKmF,2BAA2BE,GAG5BrF,KAAKsF,UAAUf,IAAI,OAASvE,KAAKsF,UAAUf,IAAI,MAAMgB,IAAI,OACzDP,cAAgB,OAChBC,mBAAqB,OAE7B,EAEAC,6BAA6BtH,UAAU4H,0BAA4BN,6BAA6BtH,UAAU6H,UAC1GP,6BAA6BtH,UAAU6H,UAAY,SAAU1H,GAEzD,IAAK+G,mBAAqBC,WAAc,OAAO/E,KAAKwF,0BAA0BzH,GAE9E,GAAI+G,iBAAkB,CAClB,GAAI/G,GAAWiH,eAAiC,MAAhBhF,KAAK3B,QACjC,OAAO,KACJ,GAAe,QAAXN,GAAqC,KAAhBiC,KAAK3B,QACjC,OAAO,KACJ,GAAe,QAAXN,GAAqC,KAAhBiC,KAAK3B,QACjC,OAAO,IAEf,CAEA,GAAI0G,WAAY,CACZ,GAAIhH,GAAWkH,oBAAsC,MAAhBjF,KAAK3B,QACtC,OAAO,EACJ,GAAe,SAAXN,GAAuC,KAAhBiC,KAAK3B,QACnC,OAAO,EACJ,GAAe,SAAXN,GAAuC,KAAhBiC,KAAK3B,QACnC,OAAO,CAEf,CAEA,OAAO2B,KAAKwF,0BAA0BzH,EAC1C,EAEA,IAAI2H,iBAAkB,EACtBR,6BAA6BtH,UAAU+H,yBAA2BT,6BAA6BtH,UAAUgI,SACzGV,6BAA6BtH,UAAUgI,SAAW,SAAU7H,GAaxD,OAXI2H,kBAEI1F,KAAKsF,UAAUf,IAAI,OAASvE,KAAKsF,UAAUf,IAAI,MAAMgB,IAAI,OAAuB,SAAXxH,GAAiC,SAAXA,GAAiC,SAAXA,GACjH8H,uBACO7F,KAAKsF,UAAUf,IAAI,OAAqB,SAAXxG,GAAiC,SAAXA,GAAiC,SAAXA,IAE7D,SAAXA,GAAiC,SAAXA,GAAiC,SAAXA,GADpD8H,sBAMD7F,KAAK2F,yBAAyB5H,EACzC,EAIA,MAAM+H,+BAAiC,SACjCC,8BAAgC,SAChCC,oBAAsB,GACtBC,qBAAuB,GACvBC,sBAAwB,GACxBC,wBAA0B,GAE1BC,qBAAuB,SACvBC,sBAAwB,SAC9B,SAASC,iBAAiBC,GAElBtI,UAAUC,OAAOC,SAE6B,OAA9CF,UAAUC,OAAOC,OAAOC,UAAUC,SAElCJ,UAAUC,OAAOC,OAAOgD,IAAIlB,OAPN,SAOoCsG,GAvRvC,GAwRfA,EACAtI,UAAUC,OAAOC,OAAOgD,IAAIlB,OAjBD,SAGV,IAgBjBhC,UAAUC,OAAOC,OAAOgD,IAAIlB,OAnBD,SAEX,KAmBiC,MAA9ChC,UAAUC,OAAOC,OAAOC,UAAUC,SACzCJ,UAAUC,OAAOC,OAAOgD,IAAIlB,OAlSC,SAkSoCsG,GACjEtI,UAAUC,OAAOC,OAAOgD,IAAIlB,OAhBP,SAgBoCsG,GA/RtC,GAgSfA,EACAtI,UAAUC,OAAOC,OAAOgD,IAAIlB,OAxBF,SAET,IAwBjBhC,UAAUC,OAAOC,OAAOgD,IAAIlB,OA1BF,SACV,KA2BiC,MAA9ChC,UAAUC,OAAOC,OAAOC,UAAUC,UACzCJ,UAAUC,OAAOC,OAAOgD,IAAIlB,OA1SC,SA0SoCsG,GACjEtI,UAAUC,OAAOC,OAAOgD,IAAIlB,OAxBP,SAwBoCsG,GAvStC,GAwSfA,EACAtI,UAAUC,OAAOC,OAAOgD,IAAIlB,OAhCF,SAET,IAEG,IA6BbhC,UAAUC,OAAOC,OAAOgD,IAAIgB,MAjCT,UAkC1BlE,UAAUC,OAAOC,OAAOgD,IAAIlB,OAlCF,SAIN,IAgCpBhC,UAAUC,OAAOC,OAAOgD,IAAIlB,OApCF,SAGR,KAoC9B,CAEA,SAASuG,eAC6C,OAA9CvI,UAAUC,OAAOC,OAAOC,UAAUC,SAElCJ,UAAUC,OAAOC,OAAOgD,IAAIlB,OAAOtB,sBAAwB,GAAI,GAE/DV,UAAUC,OAAOC,OAAOgD,IAAIsF,QAAQ9H,sBAAwB,GAAI,GAEhEV,UAAUC,OAAOC,OAAOgD,IAAIsF,QAAQ9H,sBAAwB,GAAK,IAAK,GACtEV,UAAUC,OAAOC,OAAOgD,IAAIsF,QAAQ9H,sBAAwB,GAAK,IAAK,GACtEV,UAAUC,OAAOC,OAAOgD,IAAIsF,QAAQ9H,sBAAwB,GAAK,IAAK,GACtEV,UAAUC,OAAOC,OAAOgD,IAAIsF,QAAQ9H,sBAAwB,GAAK,IAAK,GACtEV,UAAUC,OAAOC,OAAOgD,IAAIsF,QAAQ9H,sBAAwB,GAAK,IAAK,IACjB,MAA9CV,UAAUC,OAAOC,OAAOC,UAAUC,SAAiE,MAA9CJ,UAAUC,OAAOC,OAAOC,UAAUC,UAE/FJ,UAAUC,OAAOC,OAAOgD,IAAIlB,OAAOvB,qBAAuB,GAAI,GAE9DT,UAAUC,OAAOC,OAAOgD,IAAIsF,QAAQ/H,qBAAuB,GAAI,GAE/DT,UAAUC,OAAOC,OAAOgD,IAAIsF,QAAQ/H,qBAAuB,GAAK,IAAK,GACrET,UAAUC,OAAOC,OAAOgD,IAAIsF,QAAQ/H,qBAAuB,GAAK,IAAK,GACrET,UAAUC,OAAOC,OAAOgD,IAAIsF,QAAQ/H,qBAAuB,GAAK,IAAK,GACrET,UAAUC,OAAOC,OAAOgD,IAAIsF,QAAQ/H,qBAAuB,GAAK,IAAK,GACrET,UAAUC,OAAOC,OAAOgD,IAAIsF,QAAQ/H,qBAAuB,GAAK,IAAK,GAE5E,CAEA,SAASI,mBAAmB4H,EAAgBC,EAAiBtD,GACzD,IACIC,EADerF,UAAUC,OAAOC,OAAOgD,IAAIC,OAAOsF,GACnBC,EAAkB,SACjDpD,EAAaD,EAAeD,EAChC,OAAOpF,UAAUC,OAAOC,OAAOqF,OAAOC,YAAYC,MAAMJ,EAAcC,EAC1E,CAEA,SAAShD,oBAAoBmG,EAAgBC,EAAiBtD,EAAQrF,GAClE,IACIsF,EADerF,UAAUC,OAAOC,OAAOgD,IAAIC,OAAOsF,GACnBC,EAAkB,SACrD,IAAK,IAAIhD,EAAI,EAAGA,EAAEN,EAAQM,IACtB1F,UAAUC,OAAOC,OAAOqF,OAAOC,YAAYH,EAAeK,GAAK3F,EAAK2F,EAE5E,CAmBA,MAAMjF,qBAAuB,SACvBC,sBAAwB,SACxBC,oBAAsB,IAGtByC,oBAAsB,SACtBE,mBAAqB,SAErBqF,2BAA6B,IAC7BC,2BAA6B,EAC7BC,0BAA4B,KAC5BC,0BAA4B,EAG5B/H,oBAAsB,SACtBD,mBAAqB,SAErBE,kBAAoB,EACpBC,kBAAoB,EAEpBE,eAAiB,GACjBC,eAAiB,GAEjB2H,wBAA0B,KAC1BC,wBAA0B,EAC1BC,uBAAyB,IACzBC,uBAAyB,EAGzBC,qBAAuB,IACvBC,qBAAuB,IACvBC,oBAAsB,KACtBC,oBAAsB,IAGtBC,yBAA2B,IAC3BC,yBAA2B,IAC3BC,wBAA0B,KAC1BC,wBAA0B,IAG1BC,qBAAuB,KACvBC,qBAAuB,GACvBC,oBAAsB,KACtBC,oBAAsB,GAGtBC,mBAAqB,KACrBC,mBAAqB,IACrBC,kBAAoB,KACpBC,kBAAoB,IAGpBC,wBAA0B,KAC1BC,wBAA0B,IAC1BC,uBAAyB,KACzBC,uBAAyB,IAkB/B,SAAShJ,cACLS,KAAKwI,MAAQ,KAIbxI,KAAKyI,WAAa,IAAIC,IACtB1I,KAAK2I,eAAiB,IAAID,IAC1B1I,KAAK4I,eAAiB,IAAIF,IAC1B1I,KAAK6I,OAAS,IAAIH,IAClB1I,KAAK8I,YAAc,IAAIJ,GAC3B,CAEAnJ,YAAY3B,UAAU4B,SAAW,SAAUuJ,GAC3B,KAARA,GAAuB,KAARA,EACf/I,KAAKgJ,kBAELhJ,KAAKiJ,iBAEb,EAEA1J,YAAY3B,UAAUqL,gBAAkB,WACpCjJ,KAAKyI,WAAWS,QAChBlJ,KAAK2I,eAAeO,QACpBlJ,KAAK4I,eAAeM,QACpBlJ,KAAK6I,OAAOK,QACZlJ,KAAK8I,YAAYI,QAEjB,IAAIC,EAAalL,UAAUC,OAAOC,OAAOgD,IAAIC,OAAOpC,qBAChDoK,EAAWnL,UAAUC,OAAOC,OAAOgD,IAAIC,OAAO+H,EA/EtB,MAgFxBE,EAAWpL,UAAUC,OAAOC,OAAOgD,IAAImI,OAAOH,EAhFtB,MAkFxBI,EAAatL,UAAUC,OAAOC,OAAOgD,IAAIC,OAAOC,qBACpDrB,KAAKwI,MAAQvK,UAAUC,OAAOC,OAAOgD,IAAIC,OAAOmI,EAlGjB,KAkG4DH,EAG3FpJ,KAAKwJ,gBAAgBD,EAhFI,IACA,IA+EoDvJ,KAAKyI,WAAYY,GAG9FrJ,KAAKwJ,gBAAgBD,EA7EQ,IACA,IA4EwDvJ,KAAK2I,eAAgBU,GAG1GrJ,KAAKwJ,gBAAgBD,EA1EI,KACA,GAyEoDvJ,KAAK4I,eAAgBS,GAGlGrJ,KAAKwJ,gBAAgBD,EAvEE,KACA,IAsEkDvJ,KAAK6I,OAAQQ,GAGtFrJ,KAAKwJ,gBAAgBD,EApEO,KACA,IAmEuDvJ,KAAK8I,YAAaO,EACzG,EAEA9J,YAAY3B,UAAUoL,gBAAkB,WACpChJ,KAAKyI,WAAWS,QAChBlJ,KAAK2I,eAAeO,QACpBlJ,KAAK4I,eAAeM,QACpBlJ,KAAK6I,OAAOK,QACZlJ,KAAK8I,YAAYI,QAEjB,IAAIC,EAAalL,UAAUC,OAAOC,OAAOgD,IAAIC,OAAOrC,oBAChDqK,EAAWnL,UAAUC,OAAOC,OAAOgD,IAAIC,OAAO+H,EA3GvB,KA4GvBE,EAAWpL,UAAUC,OAAOC,OAAOgD,IAAImI,OAAOH,EA5GvB,KA8GvBI,EAAatL,UAAUC,OAAOC,OAAOgD,IAAIC,OAAOG,oBACpDvB,KAAKwI,MAAQvK,UAAUC,OAAOC,OAAOgD,IAAIC,OAAOmI,EA9HlB,MA8H4DH,EAG1FpJ,KAAKwJ,gBAAgBD,EA5GG,KACA,IA2GmDvJ,KAAKyI,WAAYY,GAG5FrJ,KAAKwJ,gBAAgBD,EAzGO,KACA,IAwGuDvJ,KAAK2I,eAAgBU,GAGxGrJ,KAAKwJ,gBAAgBD,EAtGG,KACA,GAqGmDvJ,KAAK4I,eAAgBS,GAGhGrJ,KAAKwJ,gBAAgBD,EAnGC,KACA,IAkGiDvJ,KAAK6I,OAAQQ,GAGpFrJ,KAAKwJ,gBAAgBD,EAhGM,KACA,IA+FsDvJ,KAAK8I,YAAaO,EACvG,EAEA9J,YAAY3B,UAAU4C,UAAY,SAAUuI,EAAMU,EAAUC,GAC5C,KAARX,GAAuB,KAARA,EACf/I,KAAK2J,mBAAmBZ,EAAMU,EAAUC,GAExC1J,KAAK4J,mBAAmBb,EAAMU,EAAUC,EAEhD,EAGAnK,YAAY3B,UAAUgM,mBAAqB,SAAUb,EAAMU,EAAUC,GACjE,IAAIP,EAAalL,UAAUC,OAAOC,OAAOgD,IAAIC,OAAOpC,qBAChDoK,EAAWnL,UAAUC,OAAOC,OAAOgD,IAAIC,OAAO+H,EA9ItB,MA+IxBE,EAAWpL,UAAUC,OAAOC,OAAOgD,IAAImI,OAAOH,EA/ItB,MAiJxBI,EAAatL,UAAUC,OAAOC,OAAOgD,IAAIC,OAAOC,qBAYpD,GAVApD,UAAUC,OAAOC,OAAOgD,IAAIrD,QAAQyL,EAlKL,IAkK8CvJ,KAAKwI,MAAQY,GAGtFpJ,KAAK8I,YAAYe,MAAQ,GACzB7J,KAAK2I,eAAemB,IAAI,IAAK,GAE7B9J,KAAK6I,OAAOgB,MAAQ,GACpB7J,KAAK2I,eAAemB,IAAI,IAAK,GAGjB,KAAZL,EAAiB,CAEjB,IAAIM,EAAe/J,KAAK6I,OAAOtE,IAAI,KAC/ByF,EAAgBhK,KAAK6I,OAAOtE,IAAI,KAChC0F,EAAcjK,KAAK2I,eAAepE,IAAI,KAE1CvE,KAAK6I,OAAOqB,OAAO,KACnBlK,KAAK6I,OAAOqB,OAAO,KACnBlK,KAAK2I,eAAeuB,OAAO,KAExBH,GAAc/J,KAAK6I,OAAOiB,IAAI,IAAK,GACnCE,GAAehK,KAAK2I,eAAemB,IAAI,IAAK,GAC5CG,GAAajK,KAAK6I,OAAOiB,IAAI,IAAK,EACzC,CAGA9J,KAAKmK,iBAAiBZ,EAvKG,IACA,IAsKqDvJ,KAAKyI,WAAYY,EAAUK,GAGzG1J,KAAKmK,iBAAiBZ,EApKO,IACA,IAmKyDvJ,KAAK2I,eAAgBU,GAAU,GAGrHrJ,KAAKmK,iBAAiBZ,EAjKG,KACA,GAgKqDvJ,KAAK4I,eAAgBS,EAAUK,GAG7G1J,KAAKmK,iBAAiBZ,EA9JC,KACA,IA6JmDvJ,KAAK6I,OAAQQ,EAAUK,GAGjG1J,KAAKmK,iBAAiBZ,EA3JM,KACA,IA0JwDvJ,KAAK8I,YAAaO,EAAUK,EACpH,EAEAnK,YAAY3B,UAAU+L,mBAAqB,SAAUZ,EAAMU,EAAUC,GACjE,IAAIP,EAAalL,UAAUC,OAAOC,OAAOgD,IAAIC,OAAOrC,oBAChDqK,EAAWnL,UAAUC,OAAOC,OAAOgD,IAAIC,OAAO+H,EA5LvB,KA6LvBE,EAAWpL,UAAUC,OAAOC,OAAOgD,IAAImI,OAAOH,EA7LvB,KA+LvBI,EAAatL,UAAUC,OAAOC,OAAOgD,IAAIC,OAAOG,oBAapD,GAXAtD,UAAUC,OAAOC,OAAOgD,IAAIrD,QAAQyL,EAhNN,KAgN8CvJ,KAAKwI,MAAQY,IAGrFpJ,KAAK2I,eAAepE,IAAI,MAASvE,KAAK2I,eAAepE,IAAI,MAASvE,KAAK2I,eAAepE,IAAI,OAC1FvE,KAAK2I,eAAemB,IAAI,IAAK,GAC7B9J,KAAK2I,eAAepE,IAAI,IAAK,IAMrB,KAARwE,GAA2B,KAAZU,EAAiB,CAGhC,IAAIM,EAAe/J,KAAK6I,OAAOtE,IAAI,KAC/ByF,EAAgBhK,KAAK6I,OAAOtE,IAAI,KAChC0F,EAAcjK,KAAK2I,eAAepE,IAAI,KAE1CvE,KAAK6I,OAAOqB,OAAO,KACnBlK,KAAK6I,OAAOqB,OAAO,KACnBlK,KAAK2I,eAAeuB,OAAO,KAExBH,GAAc/J,KAAK6I,OAAOiB,IAAI,IAAK,GACnCE,GAAehK,KAAK2I,eAAemB,IAAI,IAAK,GAC5CG,GAAajK,KAAK6I,OAAOiB,IAAI,IAAK,EAEzC,MAAO,GAAY,KAARf,GAAeU,GAAwB,KAAZA,EAAiB,CAGnD,IAAIW,EAAepK,KAAK6I,OAAOtE,IAAI,KAC/B8F,EAAgBrK,KAAK2I,eAAepE,IAAI,KACxC+F,EAActK,KAAK6I,OAAOtE,IAAI,KAElCvE,KAAK6I,OAAOqB,OAAO,KACnBlK,KAAK6I,OAAOqB,OAAO,KACnBlK,KAAK2I,eAAeuB,OAAO,KAExBE,GAAcpK,KAAK6I,OAAOiB,IAAI,IAAK,GACnCO,GAAerK,KAAK6I,OAAOiB,IAAI,IAAK,GACpCQ,GAAatK,KAAK2I,eAAemB,IAAI,IAAK,EAEjD,CAGA9J,KAAKmK,iBAAiBZ,EAvOE,KACA,IAsOoDvJ,KAAKyI,WAAYY,EAAUK,GAGvG1J,KAAKmK,iBAAiBZ,EApOM,KACA,IAmOwDvJ,KAAK2I,eAAgBU,GAAU,GAGnHrJ,KAAKmK,iBAAiBZ,EAjOE,KACA,GAgOoDvJ,KAAK4I,eAAgBS,EAAUK,GAG3G1J,KAAKmK,iBAAiBZ,EA9NA,KACA,IA6NkDvJ,KAAK6I,OAAQQ,EAAUK,GAG/F1J,KAAKmK,iBAAiBZ,EA3NK,KACA,IA0NuDvJ,KAAK8I,YAAaO,EAAUK,EAClH,EAEAnK,YAAY3B,UAAU4L,gBAAkB,SAASD,EAAYgB,EAAQlH,EAAQmH,EAASnB,GAClF,IAAK,IAAI1F,EAAI,EAAIA,EAAI4G,EAASlH,EAAQM,GAAG,EAAG,CACxC,IAAI8G,EAAOxM,UAAUC,OAAOC,OAAOgD,IAAImI,OAAOC,EAAagB,EAAS5G,GAEpE,GAAY,GAAR8G,EAAa,MAEjB,IAAIC,EAAezM,UAAUC,OAAOC,OAAOgD,IAAImI,OAAOC,EAAagB,EAAS5G,EAAI,GAAK0F,EACrFmB,EAAQV,IAAIW,EAAMC,EACtB,CACJ,EAEAnL,YAAY3B,UAAUuM,iBAAmB,SAASZ,EAAYgB,EAAQlH,EAAQsH,EAAOtB,EAAUH,GAE3F,IAAI0B,EAAW,IAAID,GAEnB,IAAK,IAAIhH,EAAI,EAAIA,EAAI4G,EAASlH,EAAQM,GAAG,EAAG,CAGxC,GAAIiH,EAASvH,OADDM,EAAI,EACa,CAEzB,IAAI8G,EAAOG,EAAUjH,EAAI,GAAI,GACzBkH,EAAWD,EAAUjH,EAAI,GAAI,GAAK0F,EAEtCpL,UAAUC,OAAOC,OAAOgD,IAAIsF,QAAQ8C,EAAagB,EAAS5G,EAAG8G,GAC7DxM,UAAUC,OAAOC,OAAOgD,IAAIsF,QAAQ8C,EAAagB,EAAS5G,EAAI,EAAGkH,EAErE,KAAO,CAGH,IAAG3B,EAOC,MAPM,CACN,IAAI4B,EAAOC,UAAUC,QAAQC,OACzBC,EAAW,EAAI7B,EAEnBpL,UAAUC,OAAOC,OAAOgD,IAAIsF,QAAQ8C,EAAagB,EAAS5G,EAAGmH,GAC7D7M,UAAUC,OAAOC,OAAOgD,IAAIsF,QAAQ8C,EAAagB,EAAS5G,EAAI,EAAGuH,EACrE,CAGJ,CACJ,CACJ,EAEA3L,YAAY3B,UAAU8B,QAAU,WAE5B,OAASM,KAAK2I,eAAepE,IAAI,MAAQ,IAAMvE,KAAK2I,eAAepE,IAAI,MAAQ,IAAMvE,KAAK2I,eAAepE,IAAI,MAAQ,GAAM,CAC/H,EAKA,IAAI4G,WAAY,EAUhB,MAAMC,0BAA+B,KAC/B9J,0BAA+B,KAC/B+J,uBAA+B,GAC/BC,uBAA+B,GAC/BC,uBAA+B,GAC/BC,uBAA+B,GAC/BC,uBAA+B,GAC/BC,uBAA+B,GAC/BC,uBAA+B,GAC/BC,uBAA+B,GAC/BC,6BAA+B,GAC/BC,wBAA+B,GAC/BC,6BAA+B,GAC/BC,uBAAyB,CAXM,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IAY/BC,8BAAgC,IAEhCzK,yBAA8B,KAC9B0K,sBAA8B,EAC9BC,sBAA8B,EAC9BC,sBAA8B,EAC9BC,sBAA8B,GAC9BC,sBAA8B,GAC9BC,sBAA8B,GAC9BC,sBAA8B,GAC9BC,sBAA8B,GAC9BC,4BAA8B,GAC9BC,uBAA8B,EAC9BC,4BAA8B,GAC9BC,sBAAwB,CAXM,EACA,EACA,EACA,GACA,GACA,GACA,GACA,IAa9BC,wBAA0B,KAC1BC,yBAA2B,KAE3BC,2BAA6B,MAC7BC,4BAA8B,MAE9BC,8BAAgC,MAChCC,+BAAiC,MAEvC,SAAS1N,YAAYC,GACjBM,KAAKoN,OAAS,KACdpN,KAAKqN,OAAS,KACdrN,KAAKsN,OAAS,KACdtN,KAAKuN,OAAS,KACdvN,KAAKwN,OAAS,KACdxN,KAAKyN,OAAS,KACdzN,KAAK0N,OAAS,KACd1N,KAAK2N,OAAS,KACd3N,KAAK4N,gBAAkB,KACvB5N,KAAK6N,QAAU,KACf7N,KAAKN,QAAUA,EACfM,KAAK8N,WAAa,KAClB9N,KAAK+N,cAAgB,IACzB,CA8NA,SAASC,YAAYjF,EAAMkF,EAAaC,GAGpCC,iBAAiBpF,GADU,MAARA,EAAeiD,uBAAyBa,uBACvBoB,EAAc,GAAIC,EAE1D,CAEA,SAASE,mBAAmBrF,EAAMmF,GAG9BC,iBAAiBpF,EADI,MAARA,EAhSoB,GAsBD,GA2QDmF,EAEnC,CAEA,SAASC,iBAAiBpF,EAAMwB,EAAQ2D,GAEpC,IAAIG,EAAU,IAAI5O,YAClB4O,EAAQ1O,UAAUoJ,GAElB,IAAIuF,EAAkB,MAARvF,EAAe1H,oBAAsBE,mBAC/CgI,EAAatL,UAAUC,OAAOC,OAAOgD,IAAIC,OAAOkN,GAEhDC,EAAwB,MAARxF,EAAezH,0BAA4BE,yBAE/D6M,EAAQG,QAAQjF,EAAYgF,EAAehE,EAAQ2D,EAEvD,CAEA,SAASO,eAAe1F,EAAMwB,GAE1B,IAAI8D,EAAU,IAAI5O,YAClB4O,EAAQ1O,UAAUoJ,GAElB,IAAIuF,EAAkB,MAARvF,EAAe1H,oBAAsBE,mBAC/CgI,EAAatL,UAAUC,OAAOC,OAAOgD,IAAIC,OAAOkN,GAEhDC,EAAwB,MAARxF,EAAezH,0BAA4BE,yBAE/D,OAAO6M,EAAQnN,QAAQqI,EAAYgF,EAAehE,EAEtD,CACA,SAAS1F,aAAakE,EAAMwB,EAAQvM,GAEhC,IAAIsQ,EAAkB,MAARvF,EAAe1H,oBAAsBE,mBAC/CgI,EAAatL,UAAUC,OAAOC,OAAOgD,IAAIC,OAAOkN,GAEhDI,EAAwB,MAAR3F,EAlSS,KADD,KAqS5B9K,UAAUC,OAAOC,OAAOgD,IAAIsF,QAAQ8C,EAAamF,EAAqC,GAAnBnE,EAAS,OAAcvM,EAC9F,CAEA,SAAS2Q,YAAY5F,EAAMwB,GAEvB,IAAI+D,EAAkB,MAARvF,EAAe1H,oBAAsBE,mBAC/CgI,EAAatL,UAAUC,OAAOC,OAAOgD,IAAIC,OAAOkN,GAEhDI,EAAwB,MAAR3F,EA5SS,KADD,KA+S5B,OAAO9K,UAAUC,OAAOC,OAAOgD,IAAImI,OAAOC,EAAamF,EAAqC,GAAnBnE,EAAS,OACtF,CAcA,SAASsD,UACL7N,KAAK4O,UAAe,EACpB5O,KAAK6O,QAAe,EACpB7O,KAAK8O,QAAe,EACpB9O,KAAK+O,aAAe,EACpB/O,KAAKgP,SAAe,EACpBhP,KAAKiP,UAAe,EACpBjP,KAAKkP,cAAe,EACpBlP,KAAKmP,SAAe,EACpBnP,KAAKoP,cAAe,CACxB,CA/SA3P,YAAY7B,UAAUsD,QAAU,SAAUmO,EAAYC,EAAeC,GAEjE,IACIC,EAAUD,EAAa,EAE3B,SAHetR,UAAUC,OAAOC,OAAOgD,IAAIgB,MAAMkN,EAAaC,EAAgBG,KAAKC,MAAMH,EAAa,GAAK,GAAK,GAG7FI,SAAS,GAAGC,SAAS,EAAG,GAAGxL,MAAM,IAAIyL,UAAUL,EACtE,EAEA/P,YAAY7B,UAAU4Q,QAAU,SAAUa,EAAYC,EAAeC,EAAYO,GAE7E,IACIN,EAAUD,EAAa,EAEvBQ,EAHW9R,UAAUC,OAAOC,OAAOgD,IAAIgB,MAAMkN,EAAaC,EAAgBG,KAAKC,MAAMH,EAAa,GAAK,GAAK,GAGzFI,SAAS,GAAGC,SAAS,EAAG,GAAGxL,MAAM,IAAIyL,UAC5DE,EAAQP,GAAWM,EAEnB7R,UAAUC,OAAOC,OAAOgD,IAAIlB,OAAOoP,EAAaC,EAAgBG,KAAKC,MAAMH,EAAa,GAAK,GAAK,EAAGS,SAASD,EAAQF,UAAUI,KAAK,IAAK,GAE9I,EAEAxQ,YAAY7B,UAAU+B,UAAY,SAAUoJ,GAC5B,KAARA,EACA/I,KAAKkQ,mBAEQ,KAARnH,EACL/I,KAAKmQ,mBAELnQ,KAAKoQ,kBAEb,EAEA3Q,YAAY7B,UAAUsS,iBAAmB,WACrC,IAAI3G,EAAatL,UAAUC,OAAOC,OAAOgD,IAAIC,OAAOG,oBAEpDvB,KAAKoN,OAAkBpN,KAAKkB,QAAQqI,EAAY/H,yBA/EhB,GAgFhCxB,KAAKqN,OAAkBrN,KAAKkB,QAAQqI,EAAY/H,yBA/EhB,GAgFhCxB,KAAKsN,OAAkBtN,KAAKkB,QAAQqI,EAAY/H,yBA/EhB,GAgFhCxB,KAAKuN,OAAkBvN,KAAKkB,QAAQqI,EAAY/H,yBA/EhB,IAgFhCxB,KAAKwN,OAAkBxN,KAAKkB,QAAQqI,EAAY/H,yBA/EhB,IAgFhCxB,KAAKyN,OAAkBzN,KAAKkB,QAAQqI,EAAY/H,yBA/EhB,IAgFhCxB,KAAK0N,OAAkB1N,KAAKkB,QAAQqI,EAAY/H,yBA/EhB,IAgFhCxB,KAAK2N,OAAkB3N,KAAKkB,QAAQqI,EAAY/H,yBA/EhB,IAgFhCxB,KAAK4N,gBAAkB5N,KAAKkB,QAAQqI,EAAY/H,yBA/EhB,IAiFhCxB,KAAK6N,QAAU,IAAIA,QACnB7N,KAAK6N,QAAQwC,SAAS,IAAKrQ,KAAKoN,OAAQpN,KAAKqN,OAAQrN,KAAKsN,OAAQtN,KAAKuN,OAAQvN,KAAKwN,OAAQxN,KAAKyN,OAAQzN,KAAK0N,OAAQ1N,KAAK2N,QAE3H3N,KAAK8N,WAAaa,YAAY,IArEC,OAsE/B3O,KAAK+N,cAAgBY,YAAY,IAnEC,MAoEtC,EAEAlP,YAAY7B,UAAUuS,iBAAmB,WACrC,IAAI5G,EAAatL,UAAUC,OAAOC,OAAOgD,IAAIC,OAAOG,oBAEpDvB,KAAKoN,OAAkBpN,KAAKkB,QAAQqI,EAAY/H,yBAnGhB,GAoGhCxB,KAAKqN,OAAkBrN,KAAKkB,QAAQqI,EAAY/H,yBAnGhB,GAoGhCxB,KAAKsN,OAAkBtN,KAAKkB,QAAQqI,EAAY/H,yBAnGhB,GAoGhCxB,KAAKuN,OAAkBvN,KAAKkB,QAAQqI,EAAY/H,yBAnGhB,IAoGhCxB,KAAKwN,OAAkBxN,KAAKkB,QAAQqI,EAAY/H,yBAnGhB,IAoGhCxB,KAAKyN,OAAkBzN,KAAKkB,QAAQqI,EAAY/H,yBAnGhB,IAoGhCxB,KAAK0N,OAAkB1N,KAAKkB,QAAQqI,EAAY/H,yBAnGhB,IAoGhCxB,KAAK2N,OAAkB3N,KAAKkB,QAAQqI,EAAY/H,yBAnGhB,IAoGhCxB,KAAK4N,gBAAkB5N,KAAKkB,QAAQqI,EAAY/H,yBAnGhB,IAqGhCxB,KAAK6N,QAAU,IAAIA,QACnB7N,KAAK6N,QAAQwC,SAAS,IAAKrQ,KAAKoN,OAAQpN,KAAKqN,OAAQrN,KAAKsN,OAAQtN,KAAKuN,OAAQvN,KAAKwN,OAAQxN,KAAKyN,OAAQzN,KAAK0N,OAAQ1N,KAAK2N,QAE3H3N,KAAK8N,WAAaa,YAAY,IAzFC,OA0F/B3O,KAAK+N,cAAgBY,YAAY,IAvFC,MAwFtC,EAEAlP,YAAY7B,UAAUwS,iBAAmB,WACrC,IAAI7G,EAAatL,UAAUC,OAAOC,OAAOgD,IAAIC,OAAOC,qBAEpDrB,KAAKoN,OAAkBpN,KAAKkB,QAAQqI,EAAYjI,0BA7If,IA8IjCtB,KAAKqN,OAAkBrN,KAAKkB,QAAQqI,EAAYjI,0BA7If,IA8IjCtB,KAAKsN,OAAkBtN,KAAKkB,QAAQqI,EAAYjI,0BA7If,IA8IjCtB,KAAKuN,OAAkBvN,KAAKkB,QAAQqI,EAAYjI,0BA7If,IA8IjCtB,KAAKwN,OAAkBxN,KAAKkB,QAAQqI,EAAYjI,0BA7If,IA8IjCtB,KAAKyN,OAAkBzN,KAAKkB,QAAQqI,EAAYjI,0BA7If,IA8IjCtB,KAAK0N,OAAkB1N,KAAKkB,QAAQqI,EAAYjI,0BA7If,IA8IjCtB,KAAK2N,OAAkB3N,KAAKkB,QAAQqI,EAAYjI,0BA7If,IA8IjCtB,KAAK4N,gBAAkB5N,KAAKkB,QAAQqI,EAAYjI,0BA7If,IA+IjCtB,KAAK6N,QAAU,IAAIA,QACnB7N,KAAK6N,QAAQwC,SAAS,KAAMrQ,KAAKoN,OAAQpN,KAAKqN,OAAQrN,KAAKsN,OAAQtN,KAAKuN,OAAQvN,KAAKwN,OAAQxN,KAAKyN,OAAQzN,KAAK0N,OAAQ1N,KAAK2N,QAE5H3N,KAAK8N,WAAaa,YAAY,KA5GE,OA6GhC3O,KAAK+N,cAAgBY,YAAY,KA1GE,MA2GvC,EAEAlP,YAAY7B,UAAU6C,WAAa,SAAUsI,EAAMU,GACnC,KAARV,EACA/I,KAAKsQ,oBAEQ,KAARvH,EACL/I,KAAKuQ,oBAELvQ,KAAKwQ,mBAEb,EAEA/Q,YAAY7B,UAAU0S,kBAAoB,WAEtC,IAAI/G,EAAatL,UAAUC,OAAOC,OAAOgD,IAAIC,OAAOG,oBAIpD,GAFAvB,KAAKwO,QAAQjF,EAAY/H,yBA/IO,IA+IiDxB,KAAK4N,iBAElFzC,UAAW,CAEX,IAAIiC,EAASpN,KAAKkB,QAAQqI,EAAY/H,yBA3JV,GA4JxB6L,EAASrN,KAAKkB,QAAQqI,EAAY/H,yBA3JV,GA4JxB8L,EAAStN,KAAKkB,QAAQqI,EAAY/H,yBA3JV,GA4JxB+L,EAASvN,KAAKkB,QAAQqI,EAAY/H,yBA3JV,IA4JxBgM,EAASxN,KAAKkB,QAAQqI,EAAY/H,yBA3JV,IA4JxBiM,EAASzN,KAAKkB,QAAQqI,EAAY/H,yBA3JV,IA4JxBkM,EAAS1N,KAAKkB,QAAQqI,EAAY/H,yBA3JV,IA4JxBmM,EAAS3N,KAAKkB,QAAQqI,EAAY/H,yBA3JV,IA6JxBiP,EAAgBzQ,KAAK6N,QAAQ6C,aAAa,IAAKtD,EAAQC,EAAQC,EAAQC,EAAQC,EAAQC,EAAQC,EAAQC,GAE3G3N,KAAKwO,QAAQjF,EAAY/H,yBAtKG,IAsKgDiP,EAAc,IAAMrD,IAChGpN,KAAKwO,QAAQjF,EAAY/H,yBAtKG,IAsKgDiP,EAAc,IAAMpD,IAChGrN,KAAKwO,QAAQjF,EAAY/H,yBAtKG,IAsKgDiP,EAAc,IAAMnD,IAChGtN,KAAKwO,QAAQjF,EAAY/H,yBAtKG,KAsKgDiP,EAAc,IAAMlD,IAChGvN,KAAKwO,QAAQjF,EAAY/H,yBAtKG,KAsKgDiP,EAAc,IAAMjD,IAChGxN,KAAKwO,QAAQjF,EAAY/H,yBAtKG,KAsKgDiP,EAAc,IAAMhD,IAChGzN,KAAKwO,QAAQjF,EAAY/H,yBAtKG,KAsKgDiP,EAAc,IAAM/C,IAChG1N,KAAKwO,QAAQjF,EAAY/H,yBAtKG,KAsKgDiP,EAAc,IAAM9C,GAEpG,CAEA9I,aAAa,IA1JkB,MA0Je7E,KAAK8N,YACnDjJ,aAAa,IAxJqB,MAwJe7E,KAAK+N,cAC1D,EAEAtO,YAAY7B,UAAU2S,kBAAoB,WAEtC,IAAIhH,EAAatL,UAAUC,OAAOC,OAAOgD,IAAIC,OAAOG,oBAEpDvB,KAAKwO,QAAQjF,EAAY/H,yBAjLO,IAiLiDxB,KAAK4N,iBAGtF5N,KAAKwO,QAAQjF,EAAY/H,yBAlLO,GAkLgD,GAChFqD,aAAa,IAAK,MAAQ,KAC1B,IAAIsE,EAAalL,UAAUC,OAAOC,OAAOgD,IAAIC,OAAOrC,oBAGpD,GAFAd,UAAUC,OAAOC,OAAOgD,IAAIlB,OAAOkJ,EAAa,GAAI,KAEhDgC,UAAW,CAEX,IAAIiC,EAASpN,KAAKkB,QAAQqI,EAAY/H,yBAnMV,GAoMxB6L,EAASrN,KAAKkB,QAAQqI,EAAY/H,yBAnMV,GAoMxB8L,EAAStN,KAAKkB,QAAQqI,EAAY/H,yBAnMV,GAoMxB+L,EAASvN,KAAKkB,QAAQqI,EAAY/H,yBAnMV,IAoMxBgM,EAASxN,KAAKkB,QAAQqI,EAAY/H,yBAnMV,IAoMxBiM,EAASzN,KAAKkB,QAAQqI,EAAY/H,yBAnMV,IAoMxBkM,EAAS1N,KAAKkB,QAAQqI,EAAY/H,yBAnMV,IAoMxBmM,EAAS3N,KAAKkB,QAAQqI,EAAY/H,yBAnMV,IAqMxBiP,EAAgBzQ,KAAK6N,QAAQ6C,aAAa,IAAKtD,EAAQC,EAAQC,EAAQC,EAAQC,EAAQC,EAAQC,EAAQC,GAE3G3N,KAAKwO,QAAQjF,EAAY/H,yBA9MG,IA8MgDiP,EAAc,IAAMrD,IAChGpN,KAAKwO,QAAQjF,EAAY/H,yBA9MG,IA8MgDiP,EAAc,IAAMpD,IAChGrN,KAAKwO,QAAQjF,EAAY/H,yBA9MG,IA8MgDiP,EAAc,IAAMnD,IAChGtN,KAAKwO,QAAQjF,EAAY/H,yBA9MG,KA8MgDiP,EAAc,IAAMlD,IAChGvN,KAAKwO,QAAQjF,EAAY/H,yBA9MG,KA8MgDiP,EAAc,IAAMjD,IAChGxN,KAAKwO,QAAQjF,EAAY/H,yBA9MG,KA8MgDiP,EAAc,IAAMhD,IAChGzN,KAAKwO,QAAQjF,EAAY/H,yBA9MG,KA8MgDiP,EAAc,IAAM/C,IAChG1N,KAAKwO,QAAQjF,EAAY/H,yBA9MG,KA8MgDiP,EAAc,IAAM9C,GAEpG,CAEA9I,aAAa,IAlMkB,MAkMe7E,KAAK8N,YACnDjJ,aAAa,IAhMqB,MAgMe7E,KAAK+N,cAC1D,EAEAtO,YAAY7B,UAAU4S,kBAAoB,WAEtC,IAAIjH,EAAatL,UAAUC,OAAOC,OAAOgD,IAAIC,OAAOC,qBAEpDrB,KAAKwO,QAAQjF,EAAYjI,0BA/OQ,IA+OkDtB,KAAK4N,iBAGxF5N,KAAKwO,QAAQjF,EAAYjI,0BAhPQ,GAgPiD,GAClFuD,aAAa,KAAM,MAAQ,OAC3B,IAAIsE,EAAalL,UAAUC,OAAOC,OAAOgD,IAAIC,OAAOpC,qBAOpD,GANAf,UAAUC,OAAOC,OAAOgD,IAAIlB,OAAOkJ,EAAa,GAAI,KAEhDnJ,KAAKN,SACLM,KAAKwO,QAAQjF,EAlQgB,KAqBC,IA6OqD,GAGnF4B,UAAW,CAEX,IAAIiC,EAASpN,KAAKkB,QAAQqI,EAAYjI,0BArQT,IAsQzB+L,EAASrN,KAAKkB,QAAQqI,EAAYjI,0BArQT,IAsQzBgM,EAAStN,KAAKkB,QAAQqI,EAAYjI,0BArQT,IAsQzBiM,EAASvN,KAAKkB,QAAQqI,EAAYjI,0BArQT,IAsQzBkM,EAASxN,KAAKkB,QAAQqI,EAAYjI,0BArQT,IAsQzBmM,EAASzN,KAAKkB,QAAQqI,EAAYjI,0BArQT,IAsQzBoM,EAAS1N,KAAKkB,QAAQqI,EAAYjI,0BArQT,IAsQzBqM,EAAS3N,KAAKkB,QAAQqI,EAAYjI,0BArQT,IAuQzBmP,EAAgBzQ,KAAK6N,QAAQ6C,aAAa,KAAMtD,EAAQC,EAAQC,EAAQC,EAAQC,EAAQC,EAAQC,EAAQC,GAE5G3N,KAAKwO,QAAQjF,EAAYjI,0BAhRI,KAgRiDmP,EAAc,IAAMrD,IAClGpN,KAAKwO,QAAQjF,EAAYjI,0BAhRI,KAgRiDmP,EAAc,IAAMpD,IAClGrN,KAAKwO,QAAQjF,EAAYjI,0BAhRI,KAgRiDmP,EAAc,IAAMnD,IAClGtN,KAAKwO,QAAQjF,EAAYjI,0BAhRI,KAgRiDmP,EAAc,IAAMlD,IAClGvN,KAAKwO,QAAQjF,EAAYjI,0BAhRI,KAgRiDmP,EAAc,IAAMjD,IAClGxN,KAAKwO,QAAQjF,EAAYjI,0BAhRI,KAgRiDmP,EAAc,IAAMhD,IAClGzN,KAAKwO,QAAQjF,EAAYjI,0BAhRI,KAgRiDmP,EAAc,IAAM/C,IAClG1N,KAAKwO,QAAQjF,EAAYjI,0BAhRI,KAgRiDmP,EAAc,IAAM9C,GAEtG,CAEA9I,aAAa,KA7OmB,MA6OgB7E,KAAK8N,YACrDjJ,aAAa,KA3OsB,MA2OgB7E,KAAK+N,cAC5D,EAuFAF,QAAQjQ,UAAUyS,SAAW,SAAUtH,EAAMqE,EAAQC,EAAQC,EAAQC,EAAQC,EAAQC,EAAQC,EAAQC,GACrF,KAAR5E,GACA/I,KAAK4O,SAAevB,EACpBrN,KAAK6O,OAAezB,EACpBpN,KAAK8O,OAAerB,EACpBzN,KAAK+O,YAAexB,EACpBvN,KAAKgP,QAAexB,EACpBxN,KAAKiP,SAAe3B,EACpBtN,KAAKkP,aAAevB,EACpB3N,KAAKmP,QAAezB,EACpB1N,KAAKoP,cAAe,GAEP,KAARrG,GACL/I,KAAK4O,SAAexB,EACpBpN,KAAK6O,OAAexB,EACpBrN,KAAK8O,OAAetB,EACpBxN,KAAK+O,YAAezB,EACpBtN,KAAKgP,QAAezB,EACpBvN,KAAKiP,UAAe,EACpBjP,KAAKkP,aAAevB,EACpB3N,KAAKmP,SAAe,EACpBnP,KAAKoP,aAAe1B,IAEpB1N,KAAK4O,SAAexB,EACpBpN,KAAK6O,OAAexB,EACpBrN,KAAK8O,OAAexB,EACpBtN,KAAK+O,YAAexB,EACpBvN,KAAKgP,QAAexB,EACpBxN,KAAKiP,SAAexB,EACpBzN,KAAKkP,aAAexB,EACpB1N,KAAKmP,SAAe,EACpBnP,KAAKoP,cAAe,EAE5B,EAEAvB,QAAQjQ,UAAU8S,aAAe,SAAU3H,EAAMqE,EAAQC,EAAQC,EAAQC,EAAQC,EAAQC,EAAQC,EAAQC,GAErG,IAAIgD,EAAS,GA6Bb,MA3BY,KAAR5H,GACA4H,EAAO,KAAWvD,GAAWpN,KAAK6O,QAClC8B,EAAO,KAAWtD,GAAWrN,KAAK4O,UAClC+B,EAAO,KAAWrD,GAAWtN,KAAKiP,UAClC0B,EAAO,KAAWpD,GAAWvN,KAAK+O,aAClC4B,EAAO,KAAWnD,GAAWxN,KAAKgP,SAClC2B,EAAO,KAAWlD,GAAWzN,KAAK8O,QAClC6B,EAAO,KAAWjD,GAAW1N,KAAKmP,SAClCwB,EAAO,KAAWhD,GAAW3N,KAAKkP,eAErB,KAARnG,GACL4H,EAAO,KAAWvD,GAAUpN,KAAK4O,UACjC+B,EAAO,KAAWtD,GAAUrN,KAAK6O,QACjC8B,EAAO,KAAWrD,GAAUtN,KAAK+O,aACjC4B,EAAO,KAAWpD,GAAUvN,KAAKgP,SACjC2B,EAAO,KAAWnD,GAAUxN,KAAK8O,QACjC6B,EAAO,KAAWhD,GAAU3N,KAAKkP,gBAEjCyB,EAAO,KAAWvD,GAAWpN,KAAK4O,UAClC+B,EAAO,KAAWtD,GAAWrN,KAAK6O,QAClC8B,EAAO,KAAWrD,GAAWtN,KAAK8O,QAClC6B,EAAO,KAAWpD,GAAWvN,KAAK+O,aAClC4B,EAAO,KAAWnD,GAAWxN,KAAKgP,SAClC2B,EAAO,KAAWlD,GAAWzN,KAAKiP,UAClC0B,EAAO,KAAWjD,GAAW1N,KAAKkP,eAG/ByB,CACX","sources":["dist/CoreHacks/EmulationCoreHacks.js"],"sourcesContent":["/**\n * Random Warp Script\n */\n\n// Ruby/Saphire (0x020297f0) where to find current warp\n\nvar isWarping = false;\nvar switchingGameState = 0; // 0 - Not Switching Game, \n                            // 1 - Playing exit transition before switch\n                            // 2 - Playing enterance after switch \nvar randomWarpsEnabled = true;\n\n/******************/\n/* Warp Addresses */\n/******************/\n/**\n *  Order of events for a warp script\n * \n *  1) A player steps on a warp tile\n *  2) A write8 is perforemed to bank, then map, then warp for current game\n *  3) Several read8s are performed to bank, then map, then warp \n *  4) Exit animation is played (i.e walking through a door) and screen fades to black\n *  5) A write32 is done to the last bank address\n *  6) New map is loaded and fades in then enterance animation is played \n * \n * \n *  Warp flow:\n * \n *  Within game:\n *  Wait for write to warp address -> switch to warping state -> wait for next read from warp address -> make save state -> before reading overwrite it -> continue  \n * \n *  To another game:\n *  Wait for write to warp address -> switch to warping state -> wait for next read from warp address -> take a save state -> increment game state -> resume playing ->\n *  wait for write to previous warp address (player exit map in first game) -> load state from different game (copying data accross) that was take just before warp ->\n *  make screen black -> overwrite next warp location -> increment warp state ->  wait for write to previous warp address (player exit map in load state from second game) -> \n *  make screen visible -> continue\n */\nconst FIRE_RED_LAST_BANK = 0x2031DB4;\n\nconst FIRE_RED_CURRENT_BANK = 0x2031dbc;\nconst FIRE_RED_CURRENT_MAP  = 0x2031dbd;\nconst FIRE_RED_CURRENT_WARP = 0x2031dbe;\n\nconst EMERALD_LAST_BANK = 0x020322DC;\n\nconst EMERALD_CURRENT_BANK = 0x20322e4;\nconst EMERALD_CURRENT_MAP  = 0x20322e5;\nconst EMERALD_CURRENT_WARP = 0x20322e6;\n\nconst EMERALD_MAP_TYPE = 0x203732F; // Used for enabling teleports/fly anywhere (0x2 for city, 0x4 for underground) \nconst FIRE_RED_MAP_TYPE = 0x2036E13; \n\n\nvar flagManager; // only global to help debugging\nvar isInSafari = false;\nGameBoyAdvanceCPU.prototype.write32WithoutIntercept = GameBoyAdvanceCPU.prototype.write32;\nGameBoyAdvanceCPU.prototype.write32 = function (address, data) { \n\n    if (switchingGameState != 0) {\n\n        if (switchingGameState == 1) {\n\n            if (((address == FIRE_RED_LAST_BANK) &&  IodineGUI.Iodine.IOCore.cartridge.romCode === \"FR\") || \n                ((address == EMERALD_LAST_BANK && (IodineGUI.Iodine.IOCore.cartridge.romCode === \"E\" || IodineGUI.Iodine.IOCore.cartridge.romCode === \"C\"))))  {\n\n                    IodineGUI.Iodine.pause();\n                    let beforeRomCode = IodineGUI.Iodine.IOCore.cartridge.romCode;\n                    let partySlice = readWRAMSlice(beforeRomCode == \"E\" || beforeRomCode == \"C\" ? EMERALD_PARTY_OFFSET : FIRE_RED_PARTY_OFFSET, PLAYER_PARTY_LENGTH);\n                    let playerNameAndState = dynamicMemorySlice(beforeRomCode == \"E\" || beforeRomCode == \"C\" ? EMERALD_SAVE_2_PTR : FIRE_RED_SAVE_2_PTR, NAME_STATE_OFFSET, NAME_STATE_LENGTH);\n                    let idAndPlayTime = dynamicMemorySlice(beforeRomCode == \"E\" || beforeRomCode == \"C\" ? EMERALD_SAVE_2_PTR : FIRE_RED_SAVE_2_PTR, ID_TIME_OFFSET, ID_TIME_LENGTH);\n\n                    let bagStoreage = new BagStoreage();\n                    bagStoreage.readData(beforeRomCode);\n\n                    flagManager = new FlagManager(bagStoreage.hasBike());\n                    flagManager.readFlags(beforeRomCode);\n        \n                    IodineGUI.Iodine.saveStateManager.loadState(gameSwitchingWarp.toRomCode);\n        \n                    if (gameSwitchingWarp.toRomCode == \"E\" || gameSwitchingWarp.toRomCode == \"C\") {\n                        this.write8(EMERALD_CURRENT_BANK, gameSwitchingWarp.toBank);\n                        this.write8(EMERALD_CURRENT_MAP, gameSwitchingWarp.toMap);\n                        this.write8(EMERALD_CURRENT_WARP, gameSwitchingWarp.toWarpNo);\n                    } else {\n                        this.write8(FIRE_RED_CURRENT_BANK, gameSwitchingWarp.toBank);\n                        this.write8(FIRE_RED_CURRENT_MAP, gameSwitchingWarp.toMap);\n                        this.write8(FIRE_RED_CURRENT_WARP, gameSwitchingWarp.toWarpNo);\n                    }\n                    let currentRomCode = IodineGUI.Iodine.IOCore.cartridge.romCode; // Changed becuase of load state\n                    spliceWRAM(currentRomCode == \"E\" || currentRomCode == \"C\" ? EMERALD_PARTY_OFFSET : FIRE_RED_PARTY_OFFSET, PLAYER_PARTY_LENGTH, partySlice);\n                    dynamicMemorySplice(currentRomCode == \"E\" || currentRomCode == \"C\" ? EMERALD_SAVE_2_PTR : FIRE_RED_SAVE_2_PTR, NAME_STATE_OFFSET, NAME_STATE_LENGTH, playerNameAndState);\n                    dynamicMemorySplice(currentRomCode == \"E\" || currentRomCode == \"C\" ? EMERALD_SAVE_2_PTR : FIRE_RED_SAVE_2_PTR, ID_TIME_OFFSET, ID_TIME_LENGTH, idAndPlayTime);\n\n                    bagStoreage.writeData(currentRomCode, beforeRomCode, true);\n                    flagManager.writeFlags(currentRomCode, beforeRomCode, true)\n        \n                    IodineGUI.mixerInput.volume = 0.0\n                    switchingGameState = 2;\n                    let elmnt = document.getElementById(\"emulator_target\");\n                    elmnt.classList.add(\"faded\")\n                    IodineGUI.Iodine.play();\n                    return;\n\n            }\n\n        }\n\n\n        if (switchingGameState == 2) {\n            if (((address == FIRE_RED_LAST_BANK) &&  IodineGUI.Iodine.IOCore.cartridge.romCode === \"FR\") || \n            ((address == EMERALD_LAST_BANK && (IodineGUI.Iodine.IOCore.cartridge.romCode === \"E\" || IodineGUI.Iodine.IOCore.cartridge.romCode === \"C\"))))  {\n\n                IodineGUI.mixerInput.volume = 0.1;\n                let elmnt = document.getElementById(\"emulator_target\");\n                elmnt.classList.remove(\"faded\");\n                switchingGameState = 0;\n                isWarping = false;\n                gameSwitchingWarp = null;\n\n            }\n        }\n\n    }\n\n    if (address == FIRE_RED_LAST_BANK &&  IodineGUI.Iodine.IOCore.cartridge.romCode === \"FR\") {\n\n        isInSafari = new FlagManager().getFlag(IodineGUI.Iodine.IOCore.cpu.read32(FIRE_RED_SAVE_1_PTR), FIRE_RED_SYS_FLAGS_OFFSET, 0);\n\n    } else if (address == EMERALD_LAST_BANK && (IodineGUI.Iodine.IOCore.cartridge.romCode === \"E\"))  {\n\n        isInSafari = new FlagManager().getFlag(IodineGUI.Iodine.IOCore.cpu.read32(EMERALD_SAVE_1_PTR), EMERALD_SYS_FLAGS_OFFSET, 0x2C)\n\n    }\n\n\n    this.write32WithoutIntercept(address, data);\n}\n\n// GameBoyAdvanceCPU.prototype.write16WithoutIntercept = GameBoyAdvanceCPU.prototype.write16;\n// GameBoyAdvanceCPU.prototype.write16 = function (address, data) { \n\n//     if (address == EMERALD_LAST_BANK) {\n//         console.log(\"writing 16\");\n//     }\n\n//     this.write16WithoutIntercept(address, data);\n// }\n\n GameBoyAdvanceCPU.prototype.write8WithoutIntercept = GameBoyAdvanceCPU.prototype.write8;\n GameBoyAdvanceCPU.prototype.write8 = function (address, data) { \n\n    if ((address == FIRE_RED_CURRENT_WARP) && IodineGUI.Iodine.IOCore.cartridge.romCode === \"FR\" )\n    {\n        isWarping = randomWarpsEnabled || forceNextWarp;\n    } \n    else if ((address == EMERALD_CURRENT_WARP) && (IodineGUI.Iodine.IOCore.cartridge.romCode === \"E\" || IodineGUI.Iodine.IOCore.cartridge.romCode === \"C\")) \n    {\n        isWarping = randomWarpsEnabled || forceNextWarp;\n    } \n    \n    this.write8WithoutIntercept(address, data);\n\n }\n\n\nconst EMERALD_MOVEMENT_MODE_OFFSET = 0x02037590;\nconst FIRE_RED_MOVEMENT_MODE_OFFSET = 0x02037078;\nconst MOVEMENT_MODE_WALK = 0x01;\nconst MOVEMENT_MODE_BIKE = 0x02;\nconst MOVEMENT_MODE_SURF = 0x08;\nvar autoBike = false; \nvar teleportAnywhere = false;\nGameBoyAdvanceCPU.prototype.read8WithoutIntercept = GameBoyAdvanceCPU.prototype.read8;\nGameBoyAdvanceCPU.prototype.read8 = function (address) {\n\n    if (autoBike) {\n        if (address == FIRE_RED_MOVEMENT_MODE_OFFSET && IodineGUI.Iodine.IOCore.cartridge.romCode === \"FR\"){\n            let current = this.read8WithoutIntercept(address);\n            return current <= MOVEMENT_MODE_WALK ? MOVEMENT_MODE_BIKE : current;\n        } else if (address == EMERALD_MOVEMENT_MODE_OFFSET){\n            let current = this.read8WithoutIntercept(address);\n            return current <= MOVEMENT_MODE_WALK ? MOVEMENT_MODE_BIKE : current;\n        }\n    }\n\n    if (teleportAnywhere) {\n        if (address == FIRE_RED_MAP_TYPE && IodineGUI.Iodine.IOCore.cartridge.romCode === \"FR\") {\n            return 2;\n        } else if (address == EMERALD_MAP_TYPE){\n            return 2;\n        }\n    }\n\n    if (!isWarping) return this.read8WithoutIntercept(address);\n\n    if (address == FIRE_RED_CURRENT_BANK && IodineGUI.Iodine.IOCore.cartridge.romCode === \"FR\")\n    {\n        // Base game FR/LG\n        address = this.handleWarpRedirection(address, IodineGUI.Iodine.IOCore.cartridge.romCode);\n    } \n    else if (address == EMERALD_CURRENT_BANK && (IodineGUI.Iodine.IOCore.cartridge.romCode === \"E\" || IodineGUI.Iodine.IOCore.cartridge.romCode === \"C\")) \n    {\n        // Base game Emerald\n        address = this.handleWarpRedirection(address, IodineGUI.Iodine.IOCore.cartridge.romCode);\n    }\n\n    return this.read8WithoutIntercept(address);\n}\n\nvar gameSwitchingWarp = null;\nvar reverseNextWarp = false; // Set true when loading a save state that was going through a warp\nvar forceNextWarp = null;\nGameBoyAdvanceCPU.prototype.handleWarpRedirection = function (address, romCode) {\n\n    let bank = this.read8WithoutIntercept(address);\n    let map = this.read8WithoutIntercept(address + 1);\n    let warpNo = this.read8WithoutIntercept(address + 2);\n    \n\n    let usingHomeWarp = this.handelHomeWarp(romCode, bank, map, warpNo);\n    \n    if (warpNo == 255 && !usingHomeWarp) { \n        // Avoid scripted warps, route connections without zone e.t.c\n        return address; \n    }\n\n    if (switchingGameState == 2 || switchingGameState==1) { return address }\n\n\n    let pkWarp = null;\n    let trigger = romCode + \",\" + bank + \",\" + map + \",\" + warpNo;\n\n    if (forceNextWarp) {\n        let toParts = forceNextWarp.split(\",\");\n        pkWarp = new PKWarp(trigger, toParts[0], toParts[1], toParts[2], toParts[3], forceNextWarp)\n        reverseNextWarp = false;\n        forceNextWarp = null;\n    } else if(reverseNextWarp && warpList.get(trigger)) {\n        let source = warpList.get(trigger).source;\n        let toParts = source.split(\",\");\n        pkWarp = new PKWarp(trigger, toParts[0], toParts[1], toParts[2], toParts[3], source)\n        reverseNextWarp = false;\n    } else {\n        pkWarp = warpList.get(trigger);\n        console.log(\"Warping triggered for \" + trigger); \n    }\n\n    if (pkWarp) {\n\n        pkWarp = specialWarpHandling(pkWarp);\n\n        IodineGUI.Iodine.pause();\n\n        IodineGUI.Iodine.saveStateManager.saveState(romCode, true);\n        if (pkWarp.toRomCode[0] != pkWarp.trigger[0]) {\n            // Switching Games\n            switchingGameState = 1;\n            gameSwitchingWarp = pkWarp;\n            address = pkWarp.toRomCode == \"E\" || pkWarp.toRomCode == \"C\" ? EMERALD_CURRENT_BANK : FIRE_RED_CURRENT_BANK;\n        } else {\n\n            if (pkWarp.toRomCode == \"E\" || pkWarp.toRomCode == \"C\") {\n                this.write8(EMERALD_CURRENT_BANK, pkWarp.toBank);\n                this.write8(EMERALD_CURRENT_MAP, pkWarp.toMap);\n                this.write8(EMERALD_CURRENT_WARP, pkWarp.toWarpNo);\n                address = EMERALD_CURRENT_BANK;\n            } else {\n                this.write8(FIRE_RED_CURRENT_BANK, pkWarp.toBank);\n                this.write8(FIRE_RED_CURRENT_MAP, pkWarp.toMap);\n                this.write8(FIRE_RED_CURRENT_WARP, pkWarp.toWarpNo);\n                address = FIRE_RED_CURRENT_BANK;\n            }\n\n        }\n\n        IodineGUI.Iodine.play();\n\n        console.log(\"Warping sending to \" + pkWarp.toRomCode + \",\" + pkWarp.toBank + \",\" + pkWarp.toMap + \",\" + pkWarp.toWarpNo); \n    } else {\n        console.log(\"Warping sending to vanilla\"); \n    }\n    \n    isWarping = false;\n\n    return address;\n}\n\n// Home Warp function use the same script as the safari zone \n// If we are currently in the safari zone we run the script normally otherwise we modify the location to send us home\nGameBoyAdvanceCPU.prototype.handelHomeWarp = function(romCode, bank, map, warpNo) {\n\n    if (romCode == \"FR\" && bank == 11 && map == 0 && warpNo == 255) {\n\n        if (!isInSafari) {\n            forceNextWarp = forceNextWarp || \"FR,4,1,0\";\n            writeGameVar(\"FR\", 0x406E, 0);\n            return true;\n        }\n\n    } else if (romCode == \"E\" && bank == 23 && map == 0 && warpNo == 255) {\n\n        if (!isInSafari) {\n            forceNextWarp = forceNextWarp || \"E,1,3,0\";\n            writeGameVar(\"E\", 0x40A4, 0);\n            return true;\n        }\n        \n    } else if (romCode == \"C\" && bank == 23 && map == 0 && warpNo == 255) {\n\n        // No Safari, I don't think the bug catching contest retirement works the same\n        forceNextWarp = forceNextWarp || \"C,1,1,0\";\n        return true;\n\n    }\n\n    return false;\n}\n\n// Some warps may need special handling to avoid bugs\nfunction specialWarpHandling(pkwarp) {\n\n    let destination = pkwarp.toRomCode + \",\" + pkwarp.toBank + \",\" + pkwarp.toMap + \",\" + pkwarp.toWarpNo;\n\n    if (destination == \"E,16,0,1\") {\n        pkwarp.toWarpNo = 2;\n    } else if (destination == \"C,16,0,1\") {\n        pkwarp.toWarpNo = 2;\n    } else if (destination == \"FR,1,75,1\") {\n        pkwarp.toWarpNo = 2;\n    }\n\n    return pkwarp;\n}\n\nasync function quickSpeedUp(duration) {\n    let currentSpeed = IodineGUI.Iodine.getSpeed();\n    IodineGUI.Iodine.setSpeed(4);\n    IodineGUI.mixerInput.volume = 0.0\n    await delay(duration);\n    IodineGUI.Iodine.setSpeed(currentSpeed);\n    IodineGUI.mixerInput.volume = 0.1\n}\n\nfunction quickHideScreen() {\n    let elmnt = document.getElementById(\"emulator_target\");\n    elmnt.classList.remove(\"quick-hide\");\n    elmnt.offsetWidth\n    elmnt.classList.add(\"quick-hide\")\n}\n\nfunction readWRAMSlice(address, length) {\n    let startAddress = (address - 0x02000000);\n    let endAddress = startAddress + length;\n    return IodineGUI.Iodine.IOCore.memory.externalRAM.slice(startAddress, endAddress);\n}\nfunction spliceWRAM(address, length, data) {\n    let startAddress = (address - 0x02000000);\n    for (let i = 0; i<length; i++) {\n        IodineGUI.Iodine.IOCore.memory.externalRAM[startAddress + i] = data[i];\n    }\n}\n\n\n/***********************/\n/* Dynamic rom patches */  \n/***********************/\n/**\n * Patches out an area in the ROM \n */\nvar walkThroughWalls = false;\nvar runIndoors = false;\nvar frWallsOffset = 364078; // set to 364098 for 1.1 version\nvar frRunIndoorsOffset = 0xBD494; //  set to 0xBD4A8 for 1.1 version\n\nGameBoyAdvanceMultiCartridge.prototype.initializeWithoutIntercept = GameBoyAdvanceMultiCartridge.prototype.initialize;\nGameBoyAdvanceMultiCartridge.prototype.initialize = function (startingRom) {\n    this.initializeWithoutIntercept(startingRom);\n\n    // if 0x(80000)BC == 1 then we have US 1.1 instead of US 1.0\n    if (this.cartriges.get(\"FR\") && this.cartriges.get(\"FR\").ROM[0xBC]) {\n        frWallsOffset = 364098\n        frRunIndoorsOffset = 0xBD4A8;\n    }\n} \n\nGameBoyAdvanceMultiCartridge.prototype.readROM16WithoutIntercept = GameBoyAdvanceMultiCartridge.prototype.readROM16;\nGameBoyAdvanceMultiCartridge.prototype.readROM16 = function (address) {\n\n    if (!walkThroughWalls && !runIndoors) { return this.readROM16WithoutIntercept(address); }\n\n    if (walkThroughWalls) {\n        if (address == frWallsOffset && this.romCode == \"FR\") { \n            return 0x2100; \n        } else if (address == 601094 && this.romCode == \"C\") {\n            return 0x2000; \n        } else if (address == 601094 && this.romCode == \"E\") {\n            return 0x2000;\n        }\n    }\n\n    if (runIndoors) {\n        if (address == frRunIndoorsOffset && this.romCode == \"FR\") { \n            return 0x00; \n        } else if (address == 0x11A1E8 && this.romCode == \"C\") {\n            return 0x00; \n        } else if (address == 0x11A1E8 && this.romCode == \"E\") {\n            return 0x00;\n        }\n    }\n\n    return this.readROM16WithoutIntercept(address);\n}\n\nvar currentlySaving = false;\nGameBoyAdvanceMultiCartridge.prototype.readROM8WithoutIntercept = GameBoyAdvanceMultiCartridge.prototype.readROM8;\nGameBoyAdvanceMultiCartridge.prototype.readROM8 = function (address) {\n\n    if (currentlySaving) {\n\n        if (this.cartriges.get(\"FR\") && this.cartriges.get(\"FR\").ROM[0xBC] &&  ((address == 1857210 || address == 4305130 || address == 4306233))) {\n            syncSaveStateSaves();\n        } else if (this.cartriges.get(\"FR\") && (address == 1857098 || address == 4305018 || address == 4306121)) {\n            syncSaveStateSaves();\n        } else if ((address == 2681225 || address == 2918453 || address == 6214600)) {\n            syncSaveStateSaves();\n        }\n    }\n\n    return this.readROM8WithoutIntercept(address);\n}\n\n// FIRE RED - isSurfing 0x02036e40 (0x33 = on land, 0x11 on water)\n// EMERALD -            0x0203735B\nconst FIRE_RED_CURRENT_GROUND_OFFSET = 0x02036e43;\nconst EMERALD_CURRENT_GROUND_OFFSET = 0x0203735B;\nconst CURRENT_GROUND_LAND = 0x33;\nconst CURRENT_GROUND_WATER = 0x11;\nconst CURRENT_GROUND_LADDER = 0x30;\nconst CURRENT_GROUND_ELEVATED = 0x44;\n\nconst EMERALD_STATE_OFFSET = 0x02037591;\nconst FIRE_RED_STATE_OFFSET = 0x02037079;\nfunction forcePlayerState(state) {\n\n    if(!IodineGUI.Iodine.IOCore) return;\n\n    if (IodineGUI.Iodine.IOCore.cartridge.romCode === \"FR\") { \n        //IodineGUI.Iodine.IOCore.cpu.write8(FIRE_RED_MOVEMENT_MODE_OFFSET, state);\n        IodineGUI.Iodine.IOCore.cpu.write8(FIRE_RED_STATE_OFFSET, state); \n        if (state == MOVEMENT_MODE_SURF) {\n            IodineGUI.Iodine.IOCore.cpu.write8(FIRE_RED_CURRENT_GROUND_OFFSET, CURRENT_GROUND_WATER); \n        } else {\n            IodineGUI.Iodine.IOCore.cpu.write8(FIRE_RED_CURRENT_GROUND_OFFSET, CURRENT_GROUND_LAND); \n        }\n    } else if (IodineGUI.Iodine.IOCore.cartridge.romCode === \"C\") {\n        IodineGUI.Iodine.IOCore.cpu.write8(EMERALD_MOVEMENT_MODE_OFFSET, state);\n        IodineGUI.Iodine.IOCore.cpu.write8(EMERALD_STATE_OFFSET, state); \n        if (state == MOVEMENT_MODE_SURF) {\n            IodineGUI.Iodine.IOCore.cpu.write8(EMERALD_CURRENT_GROUND_OFFSET, CURRENT_GROUND_WATER); \n        } else {\n            IodineGUI.Iodine.IOCore.cpu.write8(EMERALD_CURRENT_GROUND_OFFSET, CURRENT_GROUND_LAND); \n        }\n    } else if (IodineGUI.Iodine.IOCore.cartridge.romCode === \"E\") {\n        IodineGUI.Iodine.IOCore.cpu.write8(EMERALD_MOVEMENT_MODE_OFFSET, state);\n        IodineGUI.Iodine.IOCore.cpu.write8(EMERALD_STATE_OFFSET, state); \n        if (state == MOVEMENT_MODE_SURF) {\n            IodineGUI.Iodine.IOCore.cpu.write8(EMERALD_CURRENT_GROUND_OFFSET, CURRENT_GROUND_WATER); \n        } else if (IodineGUI.Iodine.IOCore.cpu.read8(EMERALD_CURRENT_GROUND_OFFSET) == CURRENT_GROUND_ELEVATED) {\n            IodineGUI.Iodine.IOCore.cpu.write8(EMERALD_CURRENT_GROUND_OFFSET, CURRENT_GROUND_ELEVATED); \n        } else {\n            IodineGUI.Iodine.IOCore.cpu.write8(EMERALD_CURRENT_GROUND_OFFSET, CURRENT_GROUND_LADDER); \n        }\n    }\n}\n\nfunction whiteoutTeam() {\n    if (IodineGUI.Iodine.IOCore.cartridge.romCode === \"FR\") { \n        // Poison First Mon\n        IodineGUI.Iodine.IOCore.cpu.write8(FIRE_RED_PARTY_OFFSET + 80, 0x08);\n        // Set First Mon HP to 1 \n        IodineGUI.Iodine.IOCore.cpu.write16(FIRE_RED_PARTY_OFFSET + 86, 0x01);\n        // Set other mons fainted\n        IodineGUI.Iodine.IOCore.cpu.write16(FIRE_RED_PARTY_OFFSET + 86 + 100, 0x00);\n        IodineGUI.Iodine.IOCore.cpu.write16(FIRE_RED_PARTY_OFFSET + 86 + 200, 0x00);\n        IodineGUI.Iodine.IOCore.cpu.write16(FIRE_RED_PARTY_OFFSET + 86 + 300, 0x00);\n        IodineGUI.Iodine.IOCore.cpu.write16(FIRE_RED_PARTY_OFFSET + 86 + 400, 0x00);\n        IodineGUI.Iodine.IOCore.cpu.write16(FIRE_RED_PARTY_OFFSET + 86 + 500, 0x00);\n    } else if (IodineGUI.Iodine.IOCore.cartridge.romCode === \"C\" || IodineGUI.Iodine.IOCore.cartridge.romCode === \"E\") {\n       // Poison First Mon\n       IodineGUI.Iodine.IOCore.cpu.write8(EMERALD_PARTY_OFFSET + 80, 0x08);\n       // Set First Mon HP to 1 \n       IodineGUI.Iodine.IOCore.cpu.write16(EMERALD_PARTY_OFFSET + 86, 0x01);\n       // Set other mons fainted\n       IodineGUI.Iodine.IOCore.cpu.write16(EMERALD_PARTY_OFFSET + 86 + 100, 0x00);\n       IodineGUI.Iodine.IOCore.cpu.write16(EMERALD_PARTY_OFFSET + 86 + 200, 0x00);\n       IodineGUI.Iodine.IOCore.cpu.write16(EMERALD_PARTY_OFFSET + 86 + 300, 0x00);\n       IodineGUI.Iodine.IOCore.cpu.write16(EMERALD_PARTY_OFFSET + 86 + 400, 0x00);\n       IodineGUI.Iodine.IOCore.cpu.write16(EMERALD_PARTY_OFFSET + 86 + 500, 0x00);\n    }\n}\n\nfunction dynamicMemorySlice(dynamicPointer, offsetInDynamic, length) {\n    let dynamicBlock = IodineGUI.Iodine.IOCore.cpu.read32(dynamicPointer);\n    let startAddress = (dynamicBlock + offsetInDynamic - 0x02000000);\n    let endAddress = startAddress + length;\n    return IodineGUI.Iodine.IOCore.memory.externalRAM.slice(startAddress, endAddress);    \n}\n\nfunction dynamicMemorySplice(dynamicPointer, offsetInDynamic, length, data) {\n    let dynamicBlock = IodineGUI.Iodine.IOCore.cpu.read32(dynamicPointer);\n    let startAddress = (dynamicBlock + offsetInDynamic - 0x02000000);\n    for (let i = 0; i<length; i++) {\n        IodineGUI.Iodine.IOCore.memory.externalRAM[startAddress + i] = data[i];\n    }\n}\n\n\n/******************/\n/* Data Addresses */\n/******************/\n/**\n *  Addresses for save data, Team is not copied here because we use where it is statically stored in memory\n *  Addresses are offsets from the 32bit addresses that can be found using the pointers (ptr locations are static)\n *  Money is xor'd against 32bit xor key, item quantity is xor'd against the first 2 bytes of that key.\n *  \n *  Dynamicly Addressed memory means the three sections of data move in memory (hence we need to look the up with ptrs)\n *  These change each time the bag is accessed or a warp is triggered (and at various other times)\n * \n *  There are 3 dynamic sections. SAV1 (mostly relating to team and items)\n *  SAV2 (storing the xor key, and trainer data, play time, settings, seen mons e.t.c)\n *  We don't deal with SAV3 but it's mostly boxed pokemon / box config   \n */\n\nconst EMERALD_PARTY_OFFSET = 0x020244EC;\nconst FIRE_RED_PARTY_OFFSET = 0x02024284;\nconst PLAYER_PARTY_LENGTH = 0x258;\n\n// DYNAMIC SAV1 PTRs\nconst FIRE_RED_SAVE_1_PTR = 0x03005008;\nconst EMERALD_SAVE_1_PTR = 0x03005D8C;\n// MONEY \nconst FIRE_RED_OBSF_MONEY_OFFSET = 0x0290; //(0x0218)???\nconst FIRE_RED_OBSF_MONEY_LENGTH = 4;\nconst EMERALD_OBSF_MONEY_OFFSET = 0x0490; //(0x0494)???\nconst EMERALD_OBSF_MONEY_LENGTH = 4;\n\n// DYNAMIC SAV2 PTRs\nconst FIRE_RED_SAVE_2_PTR = 0x0300500C;\nconst EMERALD_SAVE_2_PTR = 0x03005d90;\n// Name + Gender / If on bike or surfing\nconst NAME_STATE_OFFSET = 0;\nconst NAME_STATE_LENGTH = 9;\n// Trainer id and time (last 3 bytes button mode + text speed + sound/battle scene)\nconst ID_TIME_OFFSET = 10;\nconst ID_TIME_LENGTH = 12;\n// XOR Key\nconst FIRE_RED_XOR_KEY_OFFSET = 0x0F20;\nconst FIRE_RED_XOR_KEY_LENGTH = 4;\nconst EMERALD_XOR_KEY_OFFSET = 0xAC;\nconst EMERALD_XOR_KEY_LENGTH = 4;\n\n// ITEM POCKET\nconst FIRE_RED_ITEM_OFFSET = 0x0310;\nconst FIRE_RED_ITEM_LENGTH = 168;\nconst EMERALD_ITEM_OFFSET = 0x0560;\nconst EMERALD_ITEM_LENGTH = 120;\n\n// KEY ITEM POCKET\nconst FIRE_RED_KEY_ITEM_OFFSET = 0x03B8;\nconst FIRE_RED_KEY_ITEM_LENGTH = 120;\nconst EMERALD_KEY_ITEM_OFFSET = 0x05D8;\nconst EMERALD_KEY_ITEM_LENGTH = 120;\n\n// BALLS\nconst FIRE_RED_BALL_OFFSET = 0x0430;\nconst FIRE_RED_BALL_LENGTH = 52;\nconst EMERALD_BALL_OFFSET = 0x0650;\nconst EMERALD_BALL_LENGTH = 64;\n\n// TM Case\nconst FIRE_RED_TM_OFFSET = 0x0464;\nconst FIRE_RED_TM_LENGTH = 232;\nconst EMERALD_TM_OFFSET = 0x0690;\nconst EMERALD_TM_LENGTH = 256;\n\n// Berry Pocket\nconst FIRE_RED_BERRIES_OFFSET = 0x054C;\nconst FIRE_RED_BERRIES_LENGTH = 172;\nconst EMERALD_BERRIES_OFFSET = 0x0790;\nconst EMERALD_BERRIES_LENGTH = 184;\n\n/**************************/\n/* Bag Storage Management */\n/**************************/\n/**\n * \n *  Bag storeage requires special handling as quantities are xor'd with a special key \n *  that changes and will be different for each game\n * \n *  Additionally, storage size differs between games for now excess items will just be \n *  lost so we don't have to worry about storing additional item data outside the games\n * \n *  Additionally, additionally we do some special handling like, give the berry pouch if \n *  berries are already collected, or give a bike if they have one in the other game\n *\n */\n\nfunction BagStoreage() {\n    this.money = null;\n    //this.coins = null;\n\n    //this.pcItems = new Map();\n    this.itemPocket = new Map();\n    this.keyItemsPocket = new Map();\n    this.ballItemPocket = new Map();\n    this.tmCase = new Map();\n    this.berryPocket = new Map();\n}\n\nBagStoreage.prototype.readData = function (game) {\n    if (game == \"E\" || game == \"C\") {\n        this.readEmeraldData();\n    } else {\n        this.readFireRedData();\n    }\n}\n\nBagStoreage.prototype.readFireRedData = function () {\n    this.itemPocket.clear();\n    this.keyItemsPocket.clear();\n    this.ballItemPocket.clear();\n    this.tmCase.clear();\n    this.berryPocket.clear();\n\n    let save2Start = IodineGUI.Iodine.IOCore.cpu.read32(FIRE_RED_SAVE_2_PTR);\n    let xorKey32 = IodineGUI.Iodine.IOCore.cpu.read32(save2Start + FIRE_RED_XOR_KEY_OFFSET);\n    let xorKey16 = IodineGUI.Iodine.IOCore.cpu.read16(save2Start + FIRE_RED_XOR_KEY_OFFSET);\n\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(FIRE_RED_SAVE_1_PTR);\n    this.money = IodineGUI.Iodine.IOCore.cpu.read32(save1Start + FIRE_RED_OBSF_MONEY_OFFSET) ^ xorKey32;\n\n    // read items\n    this.readItemSection(save1Start, FIRE_RED_ITEM_OFFSET, FIRE_RED_ITEM_LENGTH, this.itemPocket, xorKey16);\n\n    // read key items\n    this.readItemSection(save1Start, FIRE_RED_KEY_ITEM_OFFSET, FIRE_RED_KEY_ITEM_LENGTH, this.keyItemsPocket, xorKey16);\n\n    // read balls\n    this.readItemSection(save1Start, FIRE_RED_BALL_OFFSET, FIRE_RED_BALL_LENGTH, this.ballItemPocket, xorKey16);\n\n    // read tms\n    this.readItemSection(save1Start, FIRE_RED_TM_OFFSET, FIRE_RED_TM_LENGTH, this.tmCase, xorKey16);\n\n    // read berries\n    this.readItemSection(save1Start, FIRE_RED_BERRIES_OFFSET, FIRE_RED_BERRIES_LENGTH, this.berryPocket, xorKey16);\n}\n\nBagStoreage.prototype.readEmeraldData = function () {\n    this.itemPocket.clear();\n    this.keyItemsPocket.clear();\n    this.ballItemPocket.clear();\n    this.tmCase.clear();\n    this.berryPocket.clear();\n\n    let save2Start = IodineGUI.Iodine.IOCore.cpu.read32(EMERALD_SAVE_2_PTR);\n    let xorKey32 = IodineGUI.Iodine.IOCore.cpu.read32(save2Start + EMERALD_XOR_KEY_OFFSET);\n    let xorKey16 = IodineGUI.Iodine.IOCore.cpu.read16(save2Start + EMERALD_XOR_KEY_OFFSET);\n\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(EMERALD_SAVE_1_PTR);\n    this.money = IodineGUI.Iodine.IOCore.cpu.read32(save1Start + EMERALD_OBSF_MONEY_OFFSET) ^ xorKey32;\n\n    // read items\n    this.readItemSection(save1Start, EMERALD_ITEM_OFFSET, EMERALD_ITEM_LENGTH, this.itemPocket, xorKey16);\n\n    // read key items\n    this.readItemSection(save1Start, EMERALD_KEY_ITEM_OFFSET, EMERALD_KEY_ITEM_LENGTH, this.keyItemsPocket, xorKey16);\n\n    // read balls\n    this.readItemSection(save1Start, EMERALD_BALL_OFFSET, EMERALD_BALL_LENGTH, this.ballItemPocket, xorKey16);\n\n    // read tms\n    this.readItemSection(save1Start, EMERALD_TM_OFFSET, EMERALD_TM_LENGTH, this.tmCase, xorKey16);\n\n    // read berries\n    this.readItemSection(save1Start, EMERALD_BERRIES_OFFSET, EMERALD_BERRIES_LENGTH, this.berryPocket, xorKey16);\n}\n\nBagStoreage.prototype.writeData = function (game, lastGame, isLoadingScreen) {\n    if (game == \"E\" || game == \"C\") {\n        this.writeDataToEmerald(game, lastGame, isLoadingScreen);\n    } else {\n        this.writeDataToFireRed(game, lastGame, isLoadingScreen);\n    }\n}\n\n\nBagStoreage.prototype.writeDataToFireRed = function (game, lastGame, isLoadingScreen) {\n    let save2Start = IodineGUI.Iodine.IOCore.cpu.read32(FIRE_RED_SAVE_2_PTR);\n    let xorKey32 = IodineGUI.Iodine.IOCore.cpu.read32(save2Start + FIRE_RED_XOR_KEY_OFFSET);\n    let xorKey16 = IodineGUI.Iodine.IOCore.cpu.read16(save2Start + FIRE_RED_XOR_KEY_OFFSET);\n\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(FIRE_RED_SAVE_1_PTR);\n\n    IodineGUI.Iodine.IOCore.cpu.write32(save1Start + FIRE_RED_OBSF_MONEY_OFFSET, this.money ^ xorKey32);\n\n    // We need to give the player the berry pocket or tm case if they have some \n    if (this.berryPocket.size >= 1) {\n        this.keyItemsPocket.set(365, 1); // one berry pouch\n    }\n    if (this.tmCase.size >= 1) {\n        this.keyItemsPocket.set(364, 1); // one tm case\n    }\n\n    if (lastGame == \"C\") {\n        // Going from crystal to firered\n        let hasRocksmash = this.tmCase.get(296);\n        let hasWhirldpool = this.tmCase.get(344);\n        let hasBodyslam = this.keyItemsPocket.get(347);\n\n        this.tmCase.delete(296);\n        this.tmCase.delete(344);\n        this.keyItemsPocket.delete(347);\n\n        if(hasRocksmash) this.tmCase.set(344, 1);\n        if(hasWhirldpool) this.keyItemsPocket.set(347, 1); // Unused TM to represent whirldpool\n        if(hasBodyslam) this.tmCase.set(296, 1); \n    } \n\n    // write items\n    this.writeItemSection(save1Start, FIRE_RED_ITEM_OFFSET, FIRE_RED_ITEM_LENGTH, this.itemPocket, xorKey16, isLoadingScreen);\n\n    // write key items\n    this.writeItemSection(save1Start, FIRE_RED_KEY_ITEM_OFFSET, FIRE_RED_KEY_ITEM_LENGTH, this.keyItemsPocket, xorKey16, false);\n\n    // write balls\n    this.writeItemSection(save1Start, FIRE_RED_BALL_OFFSET, FIRE_RED_BALL_LENGTH, this.ballItemPocket, xorKey16, isLoadingScreen);\n\n    // write tms\n    this.writeItemSection(save1Start, FIRE_RED_TM_OFFSET, FIRE_RED_TM_LENGTH, this.tmCase, xorKey16, isLoadingScreen);\n\n    // write berries\n    this.writeItemSection(save1Start, FIRE_RED_BERRIES_OFFSET, FIRE_RED_BERRIES_LENGTH, this.berryPocket, xorKey16, isLoadingScreen);\n}\n\nBagStoreage.prototype.writeDataToEmerald = function (game, lastGame, isLoadingScreen) {\n    let save2Start = IodineGUI.Iodine.IOCore.cpu.read32(EMERALD_SAVE_2_PTR);\n    let xorKey32 = IodineGUI.Iodine.IOCore.cpu.read32(save2Start + EMERALD_XOR_KEY_OFFSET);\n    let xorKey16 = IodineGUI.Iodine.IOCore.cpu.read16(save2Start + EMERALD_XOR_KEY_OFFSET);\n\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(EMERALD_SAVE_1_PTR);\n\n    IodineGUI.Iodine.IOCore.cpu.write32(save1Start + EMERALD_OBSF_MONEY_OFFSET, this.money ^ xorKey32);\n\n    // If we have a bike from fire red but not a mach/acro bike from emerald we should get a mach bike \n    if (this.keyItemsPocket.get(360) && !this.keyItemsPocket.get(259) && !this.keyItemsPocket.get(272)) {\n        this.keyItemsPocket.set(259, 1);\n        this.keyItemsPocket.get(272, 1);\n    }\n\n    // If we have HM06/TM08 we need to make sure it's the right hm\n    // In Crystal HM06 is whirlpool and TM08 is Rocksmash\n    // In Emerald and FireRed HM06 is  Rocksmash and TM08 is 'Bulk Up'\n    if (game == \"E\" && lastGame == \"C\") {\n        // Going from crystal to emerald\n\n        let hasRocksmash = this.tmCase.get(296);\n        let hasWhirldpool = this.tmCase.get(344);\n        let hasBodyslam = this.keyItemsPocket.get(347);\n\n        this.tmCase.delete(296);\n        this.tmCase.delete(344);\n        this.keyItemsPocket.delete(347);\n\n        if(hasRocksmash) this.tmCase.set(344, 1);\n        if(hasWhirldpool) this.keyItemsPocket.set(347, 1); // Unused TM to represent whirldpool\n        if(hasBodyslam) this.tmCase.set(296, 1); \n\n    } else if (game == \"C\" && lastGame && lastGame != \"C\") {\n\n        // Going from firered or emerald into crystal\n        let hasRocksmash = this.tmCase.get(344);\n        let hasWhirldpool = this.keyItemsPocket.get(347);\n        let hasBodyslam = this.tmCase.get(296);\n\n        this.tmCase.delete(296);\n        this.tmCase.delete(344);\n        this.keyItemsPocket.delete(347);\n\n        if(hasRocksmash) this.tmCase.set(296, 1);\n        if(hasWhirldpool) this.tmCase.set(344, 1); // Unused TM to represent bodyslam\n        if(hasBodyslam) this.keyItemsPocket.set(347, 1); \n\n    }\n\n    // write items\n    this.writeItemSection(save1Start, EMERALD_ITEM_OFFSET, EMERALD_ITEM_LENGTH, this.itemPocket, xorKey16, isLoadingScreen);\n\n    // write key items\n    this.writeItemSection(save1Start, EMERALD_KEY_ITEM_OFFSET, EMERALD_KEY_ITEM_LENGTH, this.keyItemsPocket, xorKey16, false);\n\n    // write balls\n    this.writeItemSection(save1Start, EMERALD_BALL_OFFSET, EMERALD_BALL_LENGTH, this.ballItemPocket, xorKey16, isLoadingScreen);\n\n    // write tms\n    this.writeItemSection(save1Start, EMERALD_TM_OFFSET, EMERALD_TM_LENGTH, this.tmCase, xorKey16, isLoadingScreen);\n\n    // write berries\n    this.writeItemSection(save1Start, EMERALD_BERRIES_OFFSET, EMERALD_BERRIES_LENGTH, this.berryPocket, xorKey16, isLoadingScreen);\n}\n\nBagStoreage.prototype.readItemSection = function(save1Start, offset, length, storeTo, xorKey16) {\n    for (let i = 0;  i < offset + length; i+=4) {\n        let item = IodineGUI.Iodine.IOCore.cpu.read16(save1Start + offset + i);\n\n        if (item == 0) { break; }\n\n        let ballQuantity = IodineGUI.Iodine.IOCore.cpu.read16(save1Start + offset + i + 2) ^ xorKey16;\n        storeTo.set(item, ballQuantity);\n    }\n}\n\nBagStoreage.prototype.writeItemSection = function(save1Start, offset, length, store, xorKey16, clear) {\n\n    var storeArr = [...store];\n\n    for (let i = 0;  i < offset + length; i+=4) {\n\n        let index = i / 4;\n        if (storeArr.length > index) {\n\n            let item = (storeArr[i / 4])[0];\n            let quantity = (storeArr[i / 4])[1] ^ xorKey16;\n\n            IodineGUI.Iodine.IOCore.cpu.write16(save1Start + offset + i, item);\n            IodineGUI.Iodine.IOCore.cpu.write16(save1Start + offset + i + 2, quantity);\n\n        } else {\n\n            // No more items to copy\n            if(clear) {\n                let item = ITEM_DATA.Nothing.number;\n                let quantity = 0 ^ xorKey16;\n                \n                IodineGUI.Iodine.IOCore.cpu.write16(save1Start + offset + i, item);\n                IodineGUI.Iodine.IOCore.cpu.write16(save1Start + offset + i + 2, quantity);\n            } else {\n                break;\n            }\n        }\n    }\n}\n\nBagStoreage.prototype.hasBike = function () {\n    // Add up quantities of any bikes\n    return ((this.keyItemsPocket.get(259) || 0) + (this.keyItemsPocket.get(272) || 0) + (this.keyItemsPocket.get(360) || 0)) > 0\n}\n\n/*******************/\n/* Flag Management */\n/*******************/\nvar badgeSync = true;\n\n// This handles any general vars/flags that need to be transfered when switching games\n\n// IN DYNAMIC SAV1\n// The equations are so the offsets line up the the flags defined in the decomp projects\n// https://github.com/pret/pokefirered/blob/master/include/constants/flags.h\n// https://github.com/pret/pokeemerald/blob/master/include/constants/flags.h\n// https://github.com/pret/pokefirered/blob/master/include/constants/vars.h\n// https://github.com/pret/pokeemerald/blob/master/include/constants/vars.h\nconst FIRE_RED_BASE_FLAG_OFFSET    = 0xEE0;\nconst FIRE_RED_SYS_FLAGS_OFFSET    = 0xFE0;\nconst FIRE_RED_BADGE1_OFFSET       = 0x20;\nconst FIRE_RED_BADGE2_OFFSET       = 0x21;\nconst FIRE_RED_BADGE3_OFFSET       = 0x22;\nconst FIRE_RED_BADGE4_OFFSET       = 0x23;\nconst FIRE_RED_BADGE5_OFFSET       = 0x24;\nconst FIRE_RED_BADGE6_OFFSET       = 0x25;\nconst FIRE_RED_BADGE7_OFFSET       = 0x26;\nconst FIRE_RED_BADGE8_OFFSET       = 0x27;\nconst FIRE_RED_RUNNING_SHOE_OFFSET = 0x2F;\nconst FIRE_RED_POKEDEX_OFFSET      = 0x29; \nconst FIRE_RED_NATIONAL_DEX_OFFSET = 0x40;\nconst FIRE_RED_BADGE_OFFSETS = [FIRE_RED_BADGE1_OFFSET, \n                                FIRE_RED_BADGE2_OFFSET, \n                                FIRE_RED_BADGE3_OFFSET, \n                                FIRE_RED_BADGE4_OFFSET, \n                                FIRE_RED_BADGE5_OFFSET, \n                                FIRE_RED_BADGE6_OFFSET, \n                                FIRE_RED_BADGE7_OFFSET, \n                                FIRE_RED_BADGE8_OFFSET];\nconst FIRE_RED_BIKE_OBTAINED_OFFSET = 0x271;\n\nconst EMERALD_SYS_FLAGS_OFFSET    = 0x137C;\nconst EMERALD_BADGE1_OFFSET       = 0x7;\nconst EMERALD_BADGE2_OFFSET       = 0x8;\nconst EMERALD_BADGE3_OFFSET       = 0x9;\nconst EMERALD_BADGE4_OFFSET       = 0xA;\nconst EMERALD_BADGE5_OFFSET       = 0xB;\nconst EMERALD_BADGE6_OFFSET       = 0xC;\nconst EMERALD_BADGE7_OFFSET       = 0xD;\nconst EMERALD_BADGE8_OFFSET       = 0xE;\nconst EMERALD_RUNNING_SHOE_OFFSET = 0x60;\nconst EMERALD_POKEDEX_OFFSET      = 0x1; \nconst EMERALD_NATIONAL_DEX_OFFSET = 0x36;\nconst EMERALD_BADGE_OFFSETS = [EMERALD_BADGE1_OFFSET, \n                               EMERALD_BADGE2_OFFSET, \n                               EMERALD_BADGE3_OFFSET, \n                               EMERALD_BADGE4_OFFSET, \n                               EMERALD_BADGE5_OFFSET, \n                               EMERALD_BADGE6_OFFSET, \n                               EMERALD_BADGE7_OFFSET, \n                               EMERALD_BADGE8_OFFSET];\n\nconst EMERALD_BASE_VAR_OFFSET = 0x139c;\nconst FIRE_RED_BASE_VAR_OFFSET = 0x1000;\n\nconst EMERALD_REPEL_STEPS_OFFSET = 0x4021;\nconst FIRE_RED_REPEL_STEPS_OFFSET = 0x4020;\n\nconst EMERALD_STARTER_CHOICE_OFFSET = 0x4023;\nconst FIRE_RED_STARTER_CHOICE_OFFSET = 0x4031;\n\nfunction FlagManager(hasBike) {\n    this.badge1 = null;\n    this.badge2 = null;\n    this.badge3 = null;\n    this.badge4 = null;\n    this.badge5 = null;\n    this.badge6 = null;\n    this.badge7 = null;\n    this.badge8 = null;\n    this.hasRunningShoes = null;\n    this.HMState = null;\n    this.hasBike = hasBike;\n    this.repelSteps = null;\n    this.starterChoice = null;\n}\n\nFlagManager.prototype.getFlag = function (saveOffset, sectionOffset, flagOffset) {\n\n    let flagByte = IodineGUI.Iodine.IOCore.cpu.read8(saveOffset + sectionOffset + Math.ceil((flagOffset + 1) / 8) - 1);\n    let flagBit = flagOffset % 8;\n\n    return !!+flagByte.toString(2).padStart(8, 0).split(\"\").reverse()[flagBit];\n}\n\nFlagManager.prototype.setFlag = function (saveOffset, sectionOffset, flagOffset, value) {\n\n    let flagByte = IodineGUI.Iodine.IOCore.cpu.read8(saveOffset + sectionOffset + Math.ceil((flagOffset + 1) / 8) - 1);\n    let flagBit = flagOffset % 8;\n\n    let byteArr = flagByte.toString(2).padStart(8, 0).split(\"\").reverse();\n    byteArr[flagBit] = value;\n\n    IodineGUI.Iodine.IOCore.cpu.write8(saveOffset + sectionOffset + Math.ceil((flagOffset + 1) / 8) - 1, parseInt(byteArr.reverse().join(\"\"), 2));\n\n}\n\nFlagManager.prototype.readFlags = function (game) {\n    if (game == \"E\") {\n        this.readEmeraldFlags();\n    } \n    else if (game == \"C\") {\n        this.readCrystalFlags();\n    } else {\n        this.readFireRedFlags();\n    }\n}\n\nFlagManager.prototype.readEmeraldFlags = function () {\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(EMERALD_SAVE_1_PTR);\n\n    this.badge1          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE1_OFFSET);\n    this.badge2          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE2_OFFSET);\n    this.badge3          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE3_OFFSET);\n    this.badge4          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE4_OFFSET);\n    this.badge5          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE5_OFFSET);\n    this.badge6          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE6_OFFSET);\n    this.badge7          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE7_OFFSET);\n    this.badge8          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE8_OFFSET);\n    this.hasRunningShoes = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_RUNNING_SHOE_OFFSET);\n    \n    this.HMState = new HMState();\n    this.HMState.evaluate(\"E\", this.badge1, this.badge2, this.badge3, this.badge4, this.badge5, this.badge6, this.badge7, this.badge8);\n\n    this.repelSteps = readGameVar(\"E\", EMERALD_REPEL_STEPS_OFFSET);\n    this.starterChoice = readGameVar(\"E\", EMERALD_STARTER_CHOICE_OFFSET);\n}\n\nFlagManager.prototype.readCrystalFlags = function () {\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(EMERALD_SAVE_1_PTR);\n\n    this.badge1          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE1_OFFSET);\n    this.badge2          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE2_OFFSET);\n    this.badge3          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE3_OFFSET);\n    this.badge4          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE4_OFFSET);\n    this.badge5          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE5_OFFSET);\n    this.badge6          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE6_OFFSET);\n    this.badge7          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE7_OFFSET);\n    this.badge8          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE8_OFFSET);\n    this.hasRunningShoes = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_RUNNING_SHOE_OFFSET);\n\n    this.HMState = new HMState();\n    this.HMState.evaluate(\"C\", this.badge1, this.badge2, this.badge3, this.badge4, this.badge5, this.badge6, this.badge7, this.badge8);\n\n    this.repelSteps = readGameVar(\"C\", EMERALD_REPEL_STEPS_OFFSET);\n    this.starterChoice = readGameVar(\"C\", EMERALD_STARTER_CHOICE_OFFSET);\n}\n\nFlagManager.prototype.readFireRedFlags = function () {\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(FIRE_RED_SAVE_1_PTR);\n    \n    this.badge1          = this.getFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE1_OFFSET);\n    this.badge2          = this.getFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE2_OFFSET);\n    this.badge3          = this.getFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE3_OFFSET);\n    this.badge4          = this.getFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE4_OFFSET);\n    this.badge5          = this.getFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE5_OFFSET);\n    this.badge6          = this.getFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE6_OFFSET);\n    this.badge7          = this.getFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE7_OFFSET);\n    this.badge8          = this.getFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE8_OFFSET);\n    this.hasRunningShoes = this.getFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_RUNNING_SHOE_OFFSET);\n\n    this.HMState = new HMState();\n    this.HMState.evaluate(\"FR\", this.badge1, this.badge2, this.badge3, this.badge4, this.badge5, this.badge6, this.badge7, this.badge8);\n\n    this.repelSteps = readGameVar(\"FR\", FIRE_RED_REPEL_STEPS_OFFSET);\n    this.starterChoice = readGameVar(\"FR\", FIRE_RED_STARTER_CHOICE_OFFSET);\n}\n\nFlagManager.prototype.writeFlags = function (game, lastGame) {\n    if (game == \"E\") {\n        this.writeEmeraldFlags();\n    } \n    else if (game == \"C\") {\n        this.writeCrystalFlags();\n    } else {\n        this.writeFireRedFlags();\n    }\n}\n\nFlagManager.prototype.writeEmeraldFlags = function () {\n\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(EMERALD_SAVE_1_PTR);\n\n    this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_RUNNING_SHOE_OFFSET, +this.hasRunningShoes);\n\n    if (badgeSync) {\n        \n        let badge1 = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE1_OFFSET);\n        let badge2 = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE2_OFFSET);\n        let badge3 = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE3_OFFSET);\n        let badge4 = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE4_OFFSET);\n        let badge5 = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE5_OFFSET);\n        let badge6 = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE6_OFFSET);\n        let badge7 = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE7_OFFSET);\n        let badge8 = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE8_OFFSET);\n\n        let updatedBadges = this.HMState.updateBadges(\"E\", badge1, badge2, badge3, badge4, badge5, badge6, badge7, badge8);\n\n        this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE1_OFFSET, +(updatedBadges[0] || badge1));\n        this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE2_OFFSET, +(updatedBadges[1] || badge2));\n        this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE3_OFFSET, +(updatedBadges[2] || badge3));\n        this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE4_OFFSET, +(updatedBadges[3] || badge4));\n        this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE5_OFFSET, +(updatedBadges[4] || badge5));\n        this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE6_OFFSET, +(updatedBadges[5] || badge6));\n        this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE7_OFFSET, +(updatedBadges[6] || badge7));\n        this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE8_OFFSET, +(updatedBadges[7] || badge8));\n\n    }\n\n    writeGameVar(\"E\", EMERALD_REPEL_STEPS_OFFSET, this.repelSteps);\n    writeGameVar(\"E\", EMERALD_STARTER_CHOICE_OFFSET, this.starterChoice);\n}\n\nFlagManager.prototype.writeCrystalFlags = function () {\n\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(EMERALD_SAVE_1_PTR);\n\n    this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_RUNNING_SHOE_OFFSET, +this.hasRunningShoes);\n\n    // Enable national dex\n    this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_NATIONAL_DEX_OFFSET, 1);\n    writeGameVar(\"E\", 0x404E, 0x0302);\n    let save2Start = IodineGUI.Iodine.IOCore.cpu.read32(EMERALD_SAVE_2_PTR);\n    IodineGUI.Iodine.IOCore.cpu.write8(save2Start + 26, 0xDA);\n\n    if (badgeSync) {\n        \n        let badge1 = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE1_OFFSET);\n        let badge2 = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE2_OFFSET);\n        let badge3 = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE3_OFFSET);\n        let badge4 = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE4_OFFSET);\n        let badge5 = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE5_OFFSET);\n        let badge6 = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE6_OFFSET);\n        let badge7 = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE7_OFFSET);\n        let badge8 = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE8_OFFSET);\n\n        let updatedBadges = this.HMState.updateBadges(\"C\", badge1, badge2, badge3, badge4, badge5, badge6, badge7, badge8);\n\n        this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE1_OFFSET, +(updatedBadges[0] || badge1));\n        this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE2_OFFSET, +(updatedBadges[1] || badge2));\n        this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE3_OFFSET, +(updatedBadges[2] || badge3));\n        this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE4_OFFSET, +(updatedBadges[3] || badge4));\n        this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE5_OFFSET, +(updatedBadges[4] || badge5));\n        this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE6_OFFSET, +(updatedBadges[5] || badge6));\n        this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE7_OFFSET, +(updatedBadges[6] || badge7));\n        this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE8_OFFSET, +(updatedBadges[7] || badge8));\n        \n    }\n\n    writeGameVar(\"C\", EMERALD_REPEL_STEPS_OFFSET, this.repelSteps);\n    writeGameVar(\"C\", EMERALD_STARTER_CHOICE_OFFSET, this.starterChoice);\n}\n\nFlagManager.prototype.writeFireRedFlags = function () {\n\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(FIRE_RED_SAVE_1_PTR);\n\n    this.setFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_RUNNING_SHOE_OFFSET, +this.hasRunningShoes);\n\n    // Enable national dex\n    this.setFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_NATIONAL_DEX_OFFSET, 1);\n    writeGameVar(\"FR\", 0x404E, 0x6258);\n    let save2Start = IodineGUI.Iodine.IOCore.cpu.read32(FIRE_RED_SAVE_2_PTR);\n    IodineGUI.Iodine.IOCore.cpu.write8(save2Start + 27, 0xB9);\n\n    if (this.hasBike) {\n        this.setFlag(save1Start, FIRE_RED_BASE_FLAG_OFFSET, FIRE_RED_BIKE_OBTAINED_OFFSET, 1);\n    }\n\n    if (badgeSync) {\n        \n        let badge1 = this.getFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE1_OFFSET);\n        let badge2 = this.getFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE2_OFFSET);\n        let badge3 = this.getFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE3_OFFSET);\n        let badge4 = this.getFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE4_OFFSET);\n        let badge5 = this.getFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE5_OFFSET);\n        let badge6 = this.getFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE6_OFFSET);\n        let badge7 = this.getFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE7_OFFSET);\n        let badge8 = this.getFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE8_OFFSET);\n\n        let updatedBadges = this.HMState.updateBadges(\"FR\", badge1, badge2, badge3, badge4, badge5, badge6, badge7, badge8);\n\n        this.setFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE1_OFFSET, +(updatedBadges[0] || badge1));\n        this.setFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE2_OFFSET, +(updatedBadges[1] || badge2));\n        this.setFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE3_OFFSET, +(updatedBadges[2] || badge3));\n        this.setFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE4_OFFSET, +(updatedBadges[3] || badge4));\n        this.setFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE5_OFFSET, +(updatedBadges[4] || badge5));\n        this.setFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE6_OFFSET, +(updatedBadges[5] || badge6));\n        this.setFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE7_OFFSET, +(updatedBadges[6] || badge7));\n        this.setFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE8_OFFSET, +(updatedBadges[7] || badge8));\n        \n    }\n    \n    writeGameVar(\"FR\", FIRE_RED_REPEL_STEPS_OFFSET, this.repelSteps);\n    writeGameVar(\"FR\", FIRE_RED_STARTER_CHOICE_OFFSET, this.starterChoice);\n}\n\nfunction modifyBadge(game, badgeNumber, shouldGiveOrRemoveBit) {\n\n    let badgeOffsets = game == \"FR\" ? FIRE_RED_BADGE_OFFSETS : EMERALD_BADGE_OFFSETS\n    modifySystemFlag(game, badgeOffsets[badgeNumber - 1], shouldGiveOrRemoveBit);\n\n}\n\nfunction modifyRunningShoes(game, shouldGiveOrRemoveBit) {\n\n    let offset = game == \"FR\" ? FIRE_RED_RUNNING_SHOE_OFFSET : EMERALD_RUNNING_SHOE_OFFSET\n    modifySystemFlag(game, offset, shouldGiveOrRemoveBit);\n\n}\n\nfunction modifySystemFlag(game, offset, shouldGiveOrRemoveBit) {\n\n    let manager = new FlagManager();\n    manager.readFlags(game);\n\n    let savePtr = game == \"FR\" ? FIRE_RED_SAVE_1_PTR : EMERALD_SAVE_1_PTR;\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(savePtr);\n\n    let sysFlagOffset = game == \"FR\" ? FIRE_RED_SYS_FLAGS_OFFSET : EMERALD_SYS_FLAGS_OFFSET;\n\n    manager.setFlag(save1Start, sysFlagOffset, offset, shouldGiveOrRemoveBit);\n\n}\n\nfunction readSystemFlag(game, offset) {\n\n    let manager = new FlagManager();\n    manager.readFlags(game);\n\n    let savePtr = game == \"FR\" ? FIRE_RED_SAVE_1_PTR : EMERALD_SAVE_1_PTR;\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(savePtr);\n\n    let sysFlagOffset = game == \"FR\" ? FIRE_RED_SYS_FLAGS_OFFSET : EMERALD_SYS_FLAGS_OFFSET;\n\n    return manager.getFlag(save1Start, sysFlagOffset, offset);\n\n}\nfunction writeGameVar(game, offset, data) {\n\n    let savePtr = game == \"FR\" ? FIRE_RED_SAVE_1_PTR : EMERALD_SAVE_1_PTR;\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(savePtr);\n\n    let baseVarOffset = game == \"FR\" ? FIRE_RED_BASE_VAR_OFFSET : EMERALD_BASE_VAR_OFFSET;\n\n    IodineGUI.Iodine.IOCore.cpu.write16(save1Start + baseVarOffset + ((offset - 0x4000) * 2), data);\n}\n\nfunction readGameVar(game, offset) {\n\n    let savePtr = game == \"FR\" ? FIRE_RED_SAVE_1_PTR : EMERALD_SAVE_1_PTR;\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(savePtr);\n\n    let baseVarOffset = game == \"FR\" ? FIRE_RED_BASE_VAR_OFFSET : EMERALD_BASE_VAR_OFFSET;\n\n    return IodineGUI.Iodine.IOCore.cpu.read16(save1Start + baseVarOffset + ((offset - 0x4000) * 2));\n}\n\n// EQUIVILENT BADGE UNLOCKS\n/*           | FR    | C     | E     |\n| Flash      | GYM 1 | GYM 1 | GYM 2 |   \n| Cut        | GYM 2 | GYM 2 | GYM 1 |\n| Fly        | GYM 3 | GYM 5 | GYM 6 |\n| Strength   | GYM 4 | GYM 3 | GYM 4 |\n| Surf       | GYM 5 | GYM 4 | GYM 5 |\n| Rock Smash | GYM 6 |       | GYM 3 |\n| Waterfall  | GYM 7 | GYM 8 | GYM 8 |\n| Dive       |       |       | GYM 7 | \n| Whirlpool  |       | GYM 7 |       |\n*/\nfunction HMState() {\n    this.canFlash     = false;\n    this.canCut       = false;\n    this.canFly       = false;\n    this.canStrength  = false;\n    this.canSurf      = false;\n    this.canSmash     = false;\n    this.canWaterfall = false;\n    this.canDive      = false;\n    this.canWhirlpool = false;\n}\n\nHMState.prototype.evaluate = function (game, badge1, badge2, badge3, badge4, badge5, badge6, badge7, badge8) {\n    if (game == \"E\") {\n        this.canFlash     = badge2;\n        this.canCut       = badge1;\n        this.canFly       = badge6;\n        this.canStrength  = badge4;\n        this.canSurf      = badge5;\n        this.canSmash     = badge3;\n        this.canWaterfall = badge8;\n        this.canDive      = badge7;\n        this.canWhirlpool = false;\n    } \n    else if (game == \"C\") {\n        this.canFlash     = badge1;\n        this.canCut       = badge2;\n        this.canFly       = badge5;\n        this.canStrength  = badge3;\n        this.canSurf      = badge4;\n        this.canSmash     = false; // because there is no badge requirement\n        this.canWaterfall = badge8;\n        this.canDive      = false;\n        this.canWhirlpool = badge7;\n    } else {\n        this.canFlash     = badge1;\n        this.canCut       = badge2;\n        this.canFly       = badge3;\n        this.canStrength  = badge4;\n        this.canSurf      = badge5;\n        this.canSmash     = badge6;\n        this.canWaterfall = badge7;\n        this.canDive      = false;\n        this.canWhirlpool = false;\n    }\n}\n\nHMState.prototype.updateBadges = function (game, badge1, badge2, badge3, badge4, badge5, badge6, badge7, badge8) {\n\n    let badges = [];\n\n    if (game == \"E\") {\n        badges[1 - 1] = +(badge1  || this.canCut);\n        badges[2 - 1] = +(badge2  || this.canFlash);\n        badges[3 - 1] = +(badge3  || this.canSmash);\n        badges[4 - 1] = +(badge4  || this.canStrength);\n        badges[5 - 1] = +(badge5  || this.canSurf);\n        badges[6 - 1] = +(badge6  || this.canFly);\n        badges[7 - 1] = +(badge7  || this.canDive);\n        badges[8 - 1] = +(badge8  || this.canWaterfall);\n    } \n    else if (game == \"C\") {\n        badges[1 - 1] = +(badge1 || this.canFlash);\n        badges[2 - 1] = +(badge2 || this.canCut);\n        badges[3 - 1] = +(badge3 || this.canStrength);\n        badges[4 - 1] = +(badge4 || this.canSurf);\n        badges[5 - 1] = +(badge5 || this.canFly);\n        badges[8 - 1] = +(badge8 || this.canWaterfall);\n    } else {\n        badges[1 - 1] = +(badge1  || this.canFlash);\n        badges[2 - 1] = +(badge2  || this.canCut);\n        badges[3 - 1] = +(badge3  || this.canFly);\n        badges[4 - 1] = +(badge4  || this.canStrength);\n        badges[5 - 1] = +(badge5  || this.canSurf);\n        badges[6 - 1] = +(badge6  || this.canSmash);\n        badges[7 - 1] = +(badge7  || this.canWaterfall);\n    }\n\n    return badges;\n}"],"names":["isWarping","switchingGameState","randomWarpsEnabled","FIRE_RED_LAST_BANK","FIRE_RED_CURRENT_BANK","FIRE_RED_CURRENT_MAP","FIRE_RED_CURRENT_WARP","EMERALD_LAST_BANK","EMERALD_CURRENT_BANK","EMERALD_CURRENT_MAP","EMERALD_CURRENT_WARP","EMERALD_MAP_TYPE","FIRE_RED_MAP_TYPE","flagManager","isInSafari","GameBoyAdvanceCPU","prototype","write32WithoutIntercept","write32","address","data","IodineGUI","Iodine","IOCore","cartridge","romCode","pause","beforeRomCode","partySlice","readWRAMSlice","EMERALD_PARTY_OFFSET","FIRE_RED_PARTY_OFFSET","PLAYER_PARTY_LENGTH","playerNameAndState","dynamicMemorySlice","EMERALD_SAVE_2_PTR","FIRE_RED_SAVE_2_PTR","NAME_STATE_OFFSET","NAME_STATE_LENGTH","idAndPlayTime","ID_TIME_OFFSET","ID_TIME_LENGTH","bagStoreage","BagStoreage","readData","FlagManager","hasBike","readFlags","saveStateManager","loadState","gameSwitchingWarp","toRomCode","this","write8","toBank","toMap","toWarpNo","currentRomCode","spliceWRAM","dynamicMemorySplice","writeData","writeFlags","mixerInput","volume","document","getElementById","classList","add","play","remove","getFlag","cpu","read32","FIRE_RED_SAVE_1_PTR","FIRE_RED_SYS_FLAGS_OFFSET","EMERALD_SAVE_1_PTR","EMERALD_SYS_FLAGS_OFFSET","write8WithoutIntercept","forceNextWarp","EMERALD_MOVEMENT_MODE_OFFSET","FIRE_RED_MOVEMENT_MODE_OFFSET","MOVEMENT_MODE_WALK","MOVEMENT_MODE_BIKE","MOVEMENT_MODE_SURF","autoBike","teleportAnywhere","read8WithoutIntercept","read8","current","current1","handleWarpRedirection","reverseNextWarp","specialWarpHandling","pkwarp","destination","async","quickSpeedUp","duration","currentSpeed","getSpeed","setSpeed","delay","quickHideScreen","elmnt","offsetWidth","length","startAddress","endAddress","memory","externalRAM","slice","i","bank","map","warpNo","usingHomeWarp","handelHomeWarp","pkWarp","trigger","toParts","split","PKWarp","warpList","get","source","toParts1","console","log","saveState","writeGameVar","walkThroughWalls","runIndoors","frWallsOffset","frRunIndoorsOffset","GameBoyAdvanceMultiCartridge","initializeWithoutIntercept","initialize","startingRom","cartriges","ROM","readROM16WithoutIntercept","readROM16","currentlySaving","readROM8WithoutIntercept","readROM8","syncSaveStateSaves","FIRE_RED_CURRENT_GROUND_OFFSET","EMERALD_CURRENT_GROUND_OFFSET","CURRENT_GROUND_LAND","CURRENT_GROUND_WATER","CURRENT_GROUND_LADDER","CURRENT_GROUND_ELEVATED","EMERALD_STATE_OFFSET","FIRE_RED_STATE_OFFSET","forcePlayerState","state","whiteoutTeam","write16","dynamicPointer","offsetInDynamic","FIRE_RED_OBSF_MONEY_OFFSET","FIRE_RED_OBSF_MONEY_LENGTH","EMERALD_OBSF_MONEY_OFFSET","EMERALD_OBSF_MONEY_LENGTH","FIRE_RED_XOR_KEY_OFFSET","FIRE_RED_XOR_KEY_LENGTH","EMERALD_XOR_KEY_OFFSET","EMERALD_XOR_KEY_LENGTH","FIRE_RED_ITEM_OFFSET","FIRE_RED_ITEM_LENGTH","EMERALD_ITEM_OFFSET","EMERALD_ITEM_LENGTH","FIRE_RED_KEY_ITEM_OFFSET","FIRE_RED_KEY_ITEM_LENGTH","EMERALD_KEY_ITEM_OFFSET","EMERALD_KEY_ITEM_LENGTH","FIRE_RED_BALL_OFFSET","FIRE_RED_BALL_LENGTH","EMERALD_BALL_OFFSET","EMERALD_BALL_LENGTH","FIRE_RED_TM_OFFSET","FIRE_RED_TM_LENGTH","EMERALD_TM_OFFSET","EMERALD_TM_LENGTH","FIRE_RED_BERRIES_OFFSET","FIRE_RED_BERRIES_LENGTH","EMERALD_BERRIES_OFFSET","EMERALD_BERRIES_LENGTH","money","itemPocket","Map","keyItemsPocket","ballItemPocket","tmCase","berryPocket","game","readEmeraldData","readFireRedData","clear","save2Start","xorKey32","xorKey16","read16","save1Start","readItemSection","lastGame","isLoadingScreen","writeDataToEmerald","writeDataToFireRed","size","set","hasRocksmash","hasWhirldpool","hasBodyslam","delete","writeItemSection","hasRocksmash1","hasWhirldpool1","hasBodyslam1","offset","storeTo","item","ballQuantity","store","storeArr","quantity","item1","ITEM_DATA","Nothing","number","quantity1","badgeSync","FIRE_RED_BASE_FLAG_OFFSET","FIRE_RED_BADGE1_OFFSET","FIRE_RED_BADGE2_OFFSET","FIRE_RED_BADGE3_OFFSET","FIRE_RED_BADGE4_OFFSET","FIRE_RED_BADGE5_OFFSET","FIRE_RED_BADGE6_OFFSET","FIRE_RED_BADGE7_OFFSET","FIRE_RED_BADGE8_OFFSET","FIRE_RED_RUNNING_SHOE_OFFSET","FIRE_RED_POKEDEX_OFFSET","FIRE_RED_NATIONAL_DEX_OFFSET","FIRE_RED_BADGE_OFFSETS","FIRE_RED_BIKE_OBTAINED_OFFSET","EMERALD_BADGE1_OFFSET","EMERALD_BADGE2_OFFSET","EMERALD_BADGE3_OFFSET","EMERALD_BADGE4_OFFSET","EMERALD_BADGE5_OFFSET","EMERALD_BADGE6_OFFSET","EMERALD_BADGE7_OFFSET","EMERALD_BADGE8_OFFSET","EMERALD_RUNNING_SHOE_OFFSET","EMERALD_POKEDEX_OFFSET","EMERALD_NATIONAL_DEX_OFFSET","EMERALD_BADGE_OFFSETS","EMERALD_BASE_VAR_OFFSET","FIRE_RED_BASE_VAR_OFFSET","EMERALD_REPEL_STEPS_OFFSET","FIRE_RED_REPEL_STEPS_OFFSET","EMERALD_STARTER_CHOICE_OFFSET","FIRE_RED_STARTER_CHOICE_OFFSET","badge1","badge2","badge3","badge4","badge5","badge6","badge7","badge8","hasRunningShoes","HMState","repelSteps","starterChoice","modifyBadge","badgeNumber","shouldGiveOrRemoveBit","modifySystemFlag","modifyRunningShoes","manager","savePtr","sysFlagOffset","setFlag","readSystemFlag","baseVarOffset","readGameVar","canFlash","canCut","canFly","canStrength","canSurf","canSmash","canWaterfall","canDive","canWhirlpool","saveOffset","sectionOffset","flagOffset","flagBit","Math","ceil","toString","padStart","reverse","value","byteArr","parseInt","join","readEmeraldFlags","readCrystalFlags","readFireRedFlags","evaluate","writeEmeraldFlags","writeCrystalFlags","writeFireRedFlags","updatedBadges","updateBadges","badges"],"version":3,"file":"index.96a8f0c6.js.map"}