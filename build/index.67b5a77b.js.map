{"mappings":"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","sources":["dist/CoreHacks/EmulationCoreHacks.js"],"sourcesContent":["/**\n * Random Warp Script\n */\n\n// Ruby/Saphire (0x020297f0) where to find current warp\n\nvar isWarping = false;\nvar switchingGameState = 0; // 0 - Not Switching Game, \n                            // 1 - Playing exit transition before switch\n                            // 2 - Playing enterance after switch \nvar randomWarpsEnabled = true;\n\n/******************/\n/* Warp Addresses */\n/******************/\n/**\n *  Order of events for a warp script\n * \n *  1) A player steps on a warp tile\n *  2) A write8 is perforemed to bank, then map, then warp for current game\n *  3) Several read8s are performed to bank, then map, then warp \n *  4) Exit animation is played (i.e walking through a door) and screen fades to black\n *  5) A write32 is done to the last bank address\n *  6) New map is loaded and fades in then enterance animation is played \n * \n * \n *  Warp flow:\n * \n *  Within game:\n *  Wait for write to warp address -> switch to warping state -> wait for next read from warp address -> make save state -> before reading overwrite it -> continue  \n * \n *  To another game:\n *  Wait for write to warp address -> switch to warping state -> wait for next read from warp address -> take a save state -> increment game state -> resume playing ->\n *  wait for write to previous warp address (player exit map in first game) -> load state from different game (copying data accross) that was take just before warp ->\n *  make screen black -> overwrite next warp location -> increment warp state ->  wait for write to previous warp address (player exit map in load state from second game) -> \n *  make screen visible -> continue\n */\nconst FIRE_RED_LAST_BANK = 0x2031DB4;\n\nconst FIRE_RED_CURRENT_BANK = 0x2031dbc;\nconst FIRE_RED_CURRENT_MAP  = 0x2031dbd;\nconst FIRE_RED_CURRENT_WARP = 0x2031dbe;\n\nconst EMERALD_LAST_BANK = 0x020322DC;\n\nconst EMERALD_CURRENT_BANK = 0x20322e4;\nconst EMERALD_CURRENT_MAP  = 0x20322e5;\nconst EMERALD_CURRENT_WARP = 0x20322e6;\n\nconst EMERALD_MAP_TYPE = 0x203732F; // Used for enabling teleports/fly anywhere (0x2 for city, 0x4 for underground) \nconst FIRE_RED_MAP_TYPE = 0x2036E13; \n\n\nvar flagManager; // only global to help debugging\nvar isInSafari = false;\nGameBoyAdvanceCPU.prototype.write32WithoutIntercept = GameBoyAdvanceCPU.prototype.write32;\nGameBoyAdvanceCPU.prototype.write32 = function (address, data) { \n\n    if (switchingGameState != 0) {\n\n        if (switchingGameState == 1) {\n\n            if (((address == FIRE_RED_LAST_BANK) &&  IodineGUI.Iodine.IOCore.cartridge.romCode === \"FR\") || \n                ((address == EMERALD_LAST_BANK && (IodineGUI.Iodine.IOCore.cartridge.romCode === \"E\" || IodineGUI.Iodine.IOCore.cartridge.romCode === \"C\"))))  {\n\n                    IodineGUI.Iodine.pause();\n                    let beforeRomCode = IodineGUI.Iodine.IOCore.cartridge.romCode;\n                    let partySlice = readWRAMSlice(beforeRomCode == \"E\" || beforeRomCode == \"C\" ? EMERALD_PARTY_OFFSET : FIRE_RED_PARTY_OFFSET, PLAYER_PARTY_LENGTH);\n                    let playerNameAndState = dynamicMemorySlice(beforeRomCode == \"E\" || beforeRomCode == \"C\" ? EMERALD_SAVE_2_PTR : FIRE_RED_SAVE_2_PTR, NAME_STATE_OFFSET, NAME_STATE_LENGTH);\n                    let idAndPlayTime = dynamicMemorySlice(beforeRomCode == \"E\" || beforeRomCode == \"C\" ? EMERALD_SAVE_2_PTR : FIRE_RED_SAVE_2_PTR, ID_TIME_OFFSET, ID_TIME_LENGTH);\n                    let box1 = dynamicMemorySlice(beforeRomCode == \"E\" || beforeRomCode == \"C\" ? EMERALD_SAVE_3_PTR : FIRE_RED_SAVE_3_PTR, 4, BOX_LENGTH);\n\n                    let bagStoreage = new BagStoreage();\n                    bagStoreage.readData(beforeRomCode);\n\n                    flagManager = new FlagManager(bagStoreage.hasBike());\n                    flagManager.readFlags(beforeRomCode);\n        \n                    IodineGUI.Iodine.saveStateManager.loadState(gameSwitchingWarp.toRomCode);\n        \n                    if (gameSwitchingWarp.toRomCode == \"E\" || gameSwitchingWarp.toRomCode == \"C\") {\n                        this.write8(EMERALD_CURRENT_BANK, gameSwitchingWarp.toBank);\n                        this.write8(EMERALD_CURRENT_MAP, gameSwitchingWarp.toMap);\n                        this.write8(EMERALD_CURRENT_WARP, gameSwitchingWarp.toWarpNo);\n                    } else {\n                        this.write8(FIRE_RED_CURRENT_BANK, gameSwitchingWarp.toBank);\n                        this.write8(FIRE_RED_CURRENT_MAP, gameSwitchingWarp.toMap);\n                        this.write8(FIRE_RED_CURRENT_WARP, gameSwitchingWarp.toWarpNo);\n                    }\n                    let currentRomCode = IodineGUI.Iodine.IOCore.cartridge.romCode; // Changed becuase of load state\n                    spliceWRAM(currentRomCode == \"E\" || currentRomCode == \"C\" ? EMERALD_PARTY_OFFSET : FIRE_RED_PARTY_OFFSET, PLAYER_PARTY_LENGTH, partySlice);\n                    dynamicMemorySplice(currentRomCode == \"E\" || currentRomCode == \"C\" ? EMERALD_SAVE_2_PTR : FIRE_RED_SAVE_2_PTR, NAME_STATE_OFFSET, NAME_STATE_LENGTH, playerNameAndState);\n                    dynamicMemorySplice(currentRomCode == \"E\" || currentRomCode == \"C\" ? EMERALD_SAVE_2_PTR : FIRE_RED_SAVE_2_PTR, ID_TIME_OFFSET, ID_TIME_LENGTH, idAndPlayTime);\n                    dynamicMemorySplice(currentRomCode == \"E\" || currentRomCode == \"C\" ? EMERALD_SAVE_3_PTR : FIRE_RED_SAVE_3_PTR, 4, BOX_LENGTH, box1)\n\n                    bagStoreage.writeData(currentRomCode, beforeRomCode, true);\n                    flagManager.writeFlags(currentRomCode, beforeRomCode, true)\n        \n                    IodineGUI.mixerInput.volume = 0.0\n                    switchingGameState = 2;\n                    let elmnt = document.getElementById(\"emulator_target\");\n                    elmnt.classList.add(\"faded\")\n                    IodineGUI.Iodine.play();\n                    return;\n\n            }\n\n        }\n\n\n        if (switchingGameState == 2) {\n            if (((address == FIRE_RED_LAST_BANK) &&  IodineGUI.Iodine.IOCore.cartridge.romCode === \"FR\") || \n            ((address == EMERALD_LAST_BANK && (IodineGUI.Iodine.IOCore.cartridge.romCode === \"E\" || IodineGUI.Iodine.IOCore.cartridge.romCode === \"C\"))))  {\n\n                IodineGUI.mixerInput.volume = 0.1;\n                let elmnt = document.getElementById(\"emulator_target\");\n                elmnt.classList.remove(\"faded\");\n                switchingGameState = 0;\n                isWarping = false;\n                gameSwitchingWarp = null;\n\n            }\n        }\n\n    }\n\n    if (address == FIRE_RED_LAST_BANK &&  IodineGUI.Iodine.IOCore.cartridge.romCode === \"FR\") {\n\n        isInSafari = new FlagManager().getFlag(IodineGUI.Iodine.IOCore.cpu.read32(FIRE_RED_SAVE_1_PTR), FIRE_RED_SYS_FLAGS_OFFSET, 0);\n        specialPostWarpHandling();\n\n    } else if (address == EMERALD_LAST_BANK && (IodineGUI.Iodine.IOCore.cartridge.romCode === \"E\"))  {\n\n        isInSafari = new FlagManager().getFlag(IodineGUI.Iodine.IOCore.cpu.read32(EMERALD_SAVE_1_PTR), EMERALD_SYS_FLAGS_OFFSET, 0x2C)\n        specialPostWarpHandling();\n    } else if (address == EMERALD_LAST_BANK && (IodineGUI.Iodine.IOCore.cartridge.romCode === \"C\"))  {\n\n        specialPostWarpHandling();\n    }\n\n\n    this.write32WithoutIntercept(address, data);\n}\n\n// GameBoyAdvanceCPU.prototype.write16WithoutIntercept = GameBoyAdvanceCPU.prototype.write16;\n// GameBoyAdvanceCPU.prototype.write16 = function (address, data) { \n\n//     if (address == EMERALD_LAST_BANK) {\n//         console.log(\"writing 16\");\n//     }\n\n//     this.write16WithoutIntercept(address, data);\n// }\n\n GameBoyAdvanceCPU.prototype.write8WithoutIntercept = GameBoyAdvanceCPU.prototype.write8;\n GameBoyAdvanceCPU.prototype.write8 = function (address, data) { \n\n    if ((address == FIRE_RED_CURRENT_WARP) && IodineGUI.Iodine.IOCore.cartridge.romCode === \"FR\" )\n    {\n        isWarping = randomWarpsEnabled || forceNextWarp;\n    } \n    else if ((address == EMERALD_CURRENT_WARP) && (IodineGUI.Iodine.IOCore.cartridge.romCode === \"E\" || IodineGUI.Iodine.IOCore.cartridge.romCode === \"C\")) \n    {\n        isWarping = randomWarpsEnabled || forceNextWarp;\n    } \n    \n    this.write8WithoutIntercept(address, data);\n\n }\n\n\nconst EMERALD_MOVEMENT_MODE_OFFSET = 0x02037590;\nconst FIRE_RED_MOVEMENT_MODE_OFFSET = 0x02037078;\nconst MOVEMENT_MODE_WALK = 0x01;\nconst MOVEMENT_MODE_BIKE = 0x02;\nconst MOVEMENT_MODE_SURF = 0x08;\nvar autoBike = false; \nvar teleportAnywhere = false;\nGameBoyAdvanceCPU.prototype.read8WithoutIntercept = GameBoyAdvanceCPU.prototype.read8;\nGameBoyAdvanceCPU.prototype.read8 = function (address) {\n\n    if (autoBike) {\n        if (address == FIRE_RED_MOVEMENT_MODE_OFFSET && IodineGUI.Iodine.IOCore.cartridge.romCode === \"FR\"){\n            let current = this.read8WithoutIntercept(address);\n            return current <= MOVEMENT_MODE_WALK ? MOVEMENT_MODE_BIKE : current;\n        } else if (address == EMERALD_MOVEMENT_MODE_OFFSET){\n            let current = this.read8WithoutIntercept(address);\n            return current <= MOVEMENT_MODE_WALK ? MOVEMENT_MODE_BIKE : current;\n        }\n    }\n\n    if (teleportAnywhere) {\n        if (address == FIRE_RED_MAP_TYPE && IodineGUI.Iodine.IOCore.cartridge.romCode === \"FR\") {\n            return 2;\n        } else if (address == EMERALD_MAP_TYPE){\n            return 2;\n        }\n    }\n\n    if (!isWarping) return this.read8WithoutIntercept(address);\n\n    if (address == FIRE_RED_CURRENT_BANK && IodineGUI.Iodine.IOCore.cartridge.romCode === \"FR\")\n    {\n        // Base game FR/LG\n        address = this.handleWarpRedirection(address, IodineGUI.Iodine.IOCore.cartridge.romCode);\n    } \n    else if (address == EMERALD_CURRENT_BANK && (IodineGUI.Iodine.IOCore.cartridge.romCode === \"E\" || IodineGUI.Iodine.IOCore.cartridge.romCode === \"C\")) \n    {\n        // Base game Emerald\n        address = this.handleWarpRedirection(address, IodineGUI.Iodine.IOCore.cartridge.romCode);\n    }\n\n    return this.read8WithoutIntercept(address);\n}\n\nvar gameSwitchingWarp = null;\nvar reverseNextWarp = false; // Set true when loading a save state that was going through a warp\nvar forceNextWarp = null;\nGameBoyAdvanceCPU.prototype.handleWarpRedirection = function (address, romCode) {\n\n    let bank = this.read8WithoutIntercept(address);\n    let map = this.read8WithoutIntercept(address + 1);\n    let warpNo = this.read8WithoutIntercept(address + 2);\n    \n\n    let usingHomeWarp = this.handelHomeWarp(romCode, bank, map, warpNo);\n    \n    if (warpNo == 255 && !usingHomeWarp) { \n        // Avoid scripted warps, route connections without zone e.t.c\n        return address; \n    }\n\n    if (switchingGameState == 2 || switchingGameState==1) { return address }\n\n\n    let pkWarp = null;\n    let trigger = romCode + \",\" + bank + \",\" + map + \",\" + warpNo;\n\n    if (forceNextWarp) {\n        let toParts = forceNextWarp.split(\",\");\n        pkWarp = new PKWarp(trigger, toParts[0], toParts[1], toParts[2], toParts[3], forceNextWarp)\n        reverseNextWarp = false;\n        forceNextWarp = null;\n    } else if(reverseNextWarp && warpList.get(trigger)) {\n        let source = warpList.get(trigger).source;\n        let toParts = source.split(\",\");\n        pkWarp = new PKWarp(trigger, toParts[0], toParts[1], toParts[2], toParts[3], source)\n        reverseNextWarp = false;\n    } else {\n        pkWarp = warpList.get(trigger);\n        console.log(\"Warping triggered for \" + trigger); \n    }\n\n    if (pkWarp) {\n\n        pkWarp = specialPreWarpHandling(pkWarp);\n\n        IodineGUI.Iodine.pause();\n\n        IodineGUI.Iodine.saveStateManager.saveState(romCode, true);\n        if (pkWarp.toRomCode[0] != pkWarp.trigger[0]) {\n            // Switching Games\n            switchingGameState = 1;\n            gameSwitchingWarp = pkWarp;\n            address = pkWarp.toRomCode == \"E\" || pkWarp.toRomCode == \"C\" ? EMERALD_CURRENT_BANK : FIRE_RED_CURRENT_BANK;\n        } else {\n\n            if (pkWarp.toRomCode == \"E\" || pkWarp.toRomCode == \"C\") {\n                this.write8(EMERALD_CURRENT_BANK, pkWarp.toBank);\n                this.write8(EMERALD_CURRENT_MAP, pkWarp.toMap);\n                this.write8(EMERALD_CURRENT_WARP, pkWarp.toWarpNo);\n                address = EMERALD_CURRENT_BANK;\n            } else {\n                this.write8(FIRE_RED_CURRENT_BANK, pkWarp.toBank);\n                this.write8(FIRE_RED_CURRENT_MAP, pkWarp.toMap);\n                this.write8(FIRE_RED_CURRENT_WARP, pkWarp.toWarpNo);\n                address = FIRE_RED_CURRENT_BANK;\n            }\n\n        }\n\n        specialDuringWarpHandling(pkWarp);\n\n        IodineGUI.Iodine.play();\n\n        console.log(\"Warping sending to \" + pkWarp.toRomCode + \",\" + pkWarp.toBank + \",\" + pkWarp.toMap + \",\" + pkWarp.toWarpNo); \n    } else {\n        console.log(\"Warping sending to vanilla\"); \n    }\n    \n    isWarping = false;\n\n    return address;\n}\n\n// Home Warp function use the same script as the safari zone \n// If we are currently in the safari zone we run the script normally otherwise we modify the location to send us home\nGameBoyAdvanceCPU.prototype.handelHomeWarp = function(romCode, bank, map, warpNo) {\n\n    if (romCode == \"FR\" && bank == 11 && map == 0 && warpNo == 255) {\n\n        if (!isInSafari) {\n            forceNextWarp = forceNextWarp || \"FR,4,1,0\";\n            writeGameVar(\"FR\", 0x406E, 0);\n            return true;\n        }\n\n    } else if (romCode == \"E\" && bank == 23 && map == 0 && warpNo == 255) {\n\n        if (!isInSafari) {\n            forceNextWarp = forceNextWarp || \"E,1,3,0\";\n            writeGameVar(\"E\", 0x40A4, 0);\n            return true;\n        }\n        \n    } else if (romCode == \"C\" && bank == 23 && map == 0 && warpNo == 255) {\n\n        // No Safari, I don't think the bug catching contest retirement works the same\n        forceNextWarp = forceNextWarp || \"C,1,1,0\";\n        return true;\n\n    }\n\n    return false;\n}\n\n// Some warps may need special handling to avoid bugs\n/*\n*   PreWarp handling takes place as soon as a warps has been triggered. This is useful if you need to alter the location\n*   that a warp would be going to\n*/\nfunction specialPreWarpHandling(pkwarp) {\n\n    // let destination = pkwarp.toRomCode + \",\" + pkwarp.toBank + \",\" + pkwarp.toMap + \",\" + pkwarp.toWarpNo;\n\n    return pkwarp;\n}\n\n/*\n*   DuringWarp handling takes place before the warp had happened but after the new rom has been loaded\n*   This is useful for when you need to set a flag/var in  a game you are loading before the new map loads\n*/\nfunction specialDuringWarpHandling(pkwarp) {\n    \n    let destination = pkwarp.toRomCode + \",\" + pkwarp.toBank + \",\" + pkwarp.toMap + \",\" + pkwarp.toWarpNo;\n\n    if (pkwarp.toRomCode == \"E\") {\n        // Open Regi Caves\n\n        // Show Mirage Tower\n\n        // Make sure it dosn't think we are on cycling road\n\n        // Make sure guy is moved from from devon corp floor one\n        \n        // If trickmaster reached end state we need to reset him\n\n        // If muesum defeated we need to open up that warp in slateport\n\n        // If Petalburg Gym make either catch tutorial or battle\n        if (destination == \"E,8,1,0\") {\n            // If catch tutorial hasn't been done we set to that\n            // otherwise we set to battle state\n            let normanState = readGameVar(\"E\", 0x4085);\n            if (normanState < 2) {\n                writeGameVar(\"E\", 0x4085, 0)\n            } else {\n                writeGameVar(\"E\", 0x4085, 6)\n            }\n        } \n\n        // If Mauville Gym make battle\n        if (destination == \"E,10,0,0\") {\n            new FlagManager().setFlag(IodineGUI.Iodine.IOCore.cpu.read32(EMERALD_SAVE_1_PTR), 0x1270, 0x391, 0);\n        }\n\n        // Make sure we can get waterfall\n    }\n\n}\n\n/*\n*   PostWarp handling takes place after the warp has finished\n*   This is useful for when you need to trigger an event after the new map has loaded\n*/\nfunction specialPostWarpHandling() {\n\n    // Need to pass in the current warp address\n    // Fix the \"Jesus warps\" in seafloor cavern for emerald\n\n    if (IodineGUI.Iodine.IOCore.cartridge.romCode === \"E\") {\n        let bank = IodineGUI.Iodine.IOCore.cpu.read8WithoutIntercept(EMERALD_CURRENT_BANK);\n        let map = IodineGUI.Iodine.IOCore.cpu.read8WithoutIntercept(EMERALD_CURRENT_BANK + 1);\n        let warpNo = IodineGUI.Iodine.IOCore.cpu.read8WithoutIntercept(EMERALD_CURRENT_BANK + 2);\n\n        let destination = \"E\" + \",\" + bank + \",\" + map + \",\" + warpNo;\n\n        if (destination == \"E,24,33,2\") {\n            // Seafloor caven stop walking on water\n            forceStateAfterDelay(MOVEMENT_MODE_SURF, 1000);\n        } else if (destination == \"E,16,0,0\") {\n            // E4 rooms needs to walk fowards when entering\n            writeGameVar(\"E\", 0x409C, 0);\n        } else if (destination == \"E,16,0,1\")  {\n            writeGameVar(\"E\", 0x409C, 1);\n        } else if (destination == \"E,16,1,0\") {\n            writeGameVar(\"E\", 0x409C, 1);\n        } else if (destination == \"E,16,1,1\") {\n            writeGameVar(\"E\", 0x409C, 2);\n        } else if (destination == \"E,16,2,0\") {\n            writeGameVar(\"E\", 0x409C, 2);\n        } else if (destination == \"E,16,2,1\") {\n            writeGameVar(\"E\", 0x409C, 3);\n        } else if (destination == \"E,16,3,0\") {\n            writeGameVar(\"E\", 0x409C, 3);\n        } else if (destination == \"E,16,3,1\") {\n            writeGameVar(\"E\", 0x409C, 4);\n        }\n\n    }\n\n    if (IodineGUI.Iodine.IOCore.cartridge.romCode === \"C\") {\n        let bank = IodineGUI.Iodine.IOCore.cpu.read8WithoutIntercept(EMERALD_CURRENT_BANK);\n        let map = IodineGUI.Iodine.IOCore.cpu.read8WithoutIntercept(EMERALD_CURRENT_BANK + 1);\n        let warpNo = IodineGUI.Iodine.IOCore.cpu.read8WithoutIntercept(EMERALD_CURRENT_BANK + 2);\n\n        let destination = \"C\" + \",\" + bank + \",\" + map + \",\" + warpNo;\n\n        if (destination == \"C,16,0,0\") {\n            // E4 rooms needs to walk fowards when entering\n            writeGameVar(\"C\", 0x409C, 0);\n        } else if (destination == \"C,16,0,1\")  {\n            writeGameVar(\"C\", 0x409C, 1);\n        } else if (destination == \"C,16,1,0\") {\n            writeGameVar(\"C\", 0x409C, 1);\n        } else if (destination == \"C,16,1,1\") {\n            writeGameVar(\"C\", 0x409C, 2);\n        } else if (destination == \"C,16,2,0\") {\n            writeGameVar(\"C\", 0x409C, 2);\n        } else if (destination == \"C,16,2,1\") {\n            writeGameVar(\"C\", 0x409C, 3);\n        } else if (destination == \"C,16,3,0\") {\n            writeGameVar(\"C\", 0x409C, 3);\n        } else if (destination == \"C,16,3,1\") {\n            writeGameVar(\"C\", 0x409C, 4);\n        }\n\n    }\n\n    if (IodineGUI.Iodine.IOCore.cartridge.romCode === \"FR\") {\n        let bank = IodineGUI.Iodine.IOCore.cpu.read8WithoutIntercept(FIRE_RED_CURRENT_BANK);\n        let map = IodineGUI.Iodine.IOCore.cpu.read8WithoutIntercept(FIRE_RED_CURRENT_BANK + 1);\n        let warpNo = IodineGUI.Iodine.IOCore.cpu.read8WithoutIntercept(FIRE_RED_CURRENT_BANK + 2);\n\n        let destination = \"FR\" + \",\" + bank + \",\" + map + \",\" + warpNo;\n        if (destination == \"FR,1,86,6\" || destination == \"FR,1,86,5\") {\n            // Seafoam islands stop walking on water\n            forceStateAfterDelay(MOVEMENT_MODE_SURF, 3800);\n        } else if (destination == \"FR,1,75,0\") {\n            // E4 rooms needs to walk fowards when entering\n            writeGameVar(\"FR\", 0x4068, 0);\n        } else if (destination == \"FR,1,75,1\")  {\n            writeGameVar(\"FR\", 0x4068, 1);\n        } else if (destination == \"FR,1,76,0\") {\n            writeGameVar(\"FR\", 0x4068, 1);\n        } else if (destination == \"FR,1,76,1\") {\n            writeGameVar(\"FR\", 0x4068, 2);\n        } else if (destination == \"FR,1,77,0\") {\n            writeGameVar(\"FR\", 0x4068, 2);\n        } else if (destination == \"FR,1,77,1\") {\n            writeGameVar(\"FR\", 0x4068, 3);\n        } else if (destination == \"FR,1,78,0\") {\n            writeGameVar(\"FR\", 0x4068, 3);\n        } else if (destination == \"FR,1,78,1\") {\n            writeGameVar(\"FR\", 0x4068, 4);\n        }\n    }\n}\n\nasync function forceStateAfterDelay(movementMode, delayTime) {\n    await delay(delayTime/IodineGUI.Iodine.getSpeed());\n    forcePlayerState(movementMode);\n}\n\nasync function quickSpeedUp(duration) {\n    let currentSpeed = IodineGUI.Iodine.getSpeed();\n    IodineGUI.Iodine.setSpeed(4);\n    IodineGUI.mixerInput.volume = 0.0\n    await delay(duration);\n    IodineGUI.Iodine.setSpeed(currentSpeed);\n    IodineGUI.mixerInput.volume = 0.1\n}\n\nfunction quickHideScreen() {\n    let elmnt = document.getElementById(\"emulator_target\");\n    elmnt.classList.remove(\"quick-hide\");\n    elmnt.offsetWidth\n    elmnt.classList.add(\"quick-hide\")\n}\n\nfunction readWRAMSlice(address, length) {\n    let startAddress = (address - 0x02000000);\n    let endAddress = startAddress + length;\n    return IodineGUI.Iodine.IOCore.memory.externalRAM.slice(startAddress, endAddress);\n}\nfunction spliceWRAM(address, length, data) {\n    let startAddress = (address - 0x02000000);\n    for (let i = 0; i<length; i++) {\n        IodineGUI.Iodine.IOCore.memory.externalRAM[startAddress + i] = data[i];\n    }\n}\n\n\n/***********************/\n/* Dynamic rom patches */  \n/***********************/\n/**\n * Patches out an area in the ROM \n */\nvar walkThroughWalls = false;\nvar runIndoors = false;\nvar frWallsOffset = 364078; // set to 364098 for 1.1 version\nvar frRunIndoorsOffset = 0xBD494; //  set to 0xBD4A8 for 1.1 version\n\nGameBoyAdvanceMultiCartridge.prototype.initializeWithoutIntercept = GameBoyAdvanceMultiCartridge.prototype.initialize;\nGameBoyAdvanceMultiCartridge.prototype.initialize = function (startingRom) {\n    this.initializeWithoutIntercept(startingRom);\n\n    // if 0x(80000)BC == 1 then we have US 1.1 instead of US 1.0\n    if (this.cartriges.get(\"FR\") && this.cartriges.get(\"FR\").ROM[0xBC]) {\n        frWallsOffset = 364098\n        frRunIndoorsOffset = 0xBD4A8;\n    }\n} \n\nGameBoyAdvanceMultiCartridge.prototype.readROM16WithoutIntercept = GameBoyAdvanceMultiCartridge.prototype.readROM16;\nGameBoyAdvanceMultiCartridge.prototype.readROM16 = function (address) {\n\n    if (!walkThroughWalls && !runIndoors) { return this.readROM16WithoutIntercept(address); }\n\n    if (walkThroughWalls) {\n        if (address == frWallsOffset && this.romCode == \"FR\") { \n            return 0x2100; \n        } else if (address == 601094 && this.romCode == \"C\") {\n            return 0x2000; \n        } else if (address == 601094 && this.romCode == \"E\") {\n            return 0x2000;\n        }\n    }\n\n    if (runIndoors) {\n        if (address == frRunIndoorsOffset && this.romCode == \"FR\") { \n            return 0x00; \n        } else if (address == 0x11A1E8 && this.romCode == \"C\") {\n            return 0x00; \n        } else if (address == 0x11A1E8 && this.romCode == \"E\") {\n            return 0x00;\n        }\n    }\n\n    return this.readROM16WithoutIntercept(address);\n}\n\nvar currentlySaving = false;\nGameBoyAdvanceMultiCartridge.prototype.readROM8WithoutIntercept = GameBoyAdvanceMultiCartridge.prototype.readROM8;\nGameBoyAdvanceMultiCartridge.prototype.readROM8 = function (address) {\n\n    if (currentlySaving) {\n\n        if (this.cartriges.get(\"FR\") && this.cartriges.get(\"FR\").ROM[0xBC] &&  ((address == 1857210 || address == 4305130 || address == 4306233))) {\n            syncSaveStateSaves();\n        } else if (this.cartriges.get(\"FR\") && (address == 1857098 || address == 4305018 || address == 4306121)) {\n            syncSaveStateSaves();\n        } else if ((address == 2681225 || address == 2918453 || address == 6214600)) {\n            syncSaveStateSaves();\n        }\n    }\n\n    return this.readROM8WithoutIntercept(address);\n}\n\n// FIRE RED - isSurfing 0x02036e40 (0x33 = on land, 0x11 on water)\n// EMERALD -            0x0203735B\nconst FIRE_RED_CURRENT_GROUND_OFFSET = 0x02036e43;\nconst EMERALD_CURRENT_GROUND_OFFSET = 0x0203735B;\nconst CURRENT_GROUND_LAND = 0x33;\nconst CURRENT_GROUND_WATER = 0x11;\nconst CURRENT_GROUND_LADDER = 0x30;\nconst CURRENT_GROUND_ELEVATED = 0x44;\n\nconst EMERALD_STATE_OFFSET = 0x02037591;\nconst FIRE_RED_STATE_OFFSET = 0x02037079;\nfunction forcePlayerState(state) {\n\n    if(!IodineGUI.Iodine.IOCore) return;\n\n    if (IodineGUI.Iodine.IOCore.cartridge.romCode === \"FR\") { \n        //IodineGUI.Iodine.IOCore.cpu.write8(FIRE_RED_MOVEMENT_MODE_OFFSET, state);\n        IodineGUI.Iodine.IOCore.cpu.write8(FIRE_RED_STATE_OFFSET, state); \n        if (state == MOVEMENT_MODE_SURF) {\n            IodineGUI.Iodine.IOCore.cpu.write8(FIRE_RED_CURRENT_GROUND_OFFSET, CURRENT_GROUND_WATER); \n        } else {\n            IodineGUI.Iodine.IOCore.cpu.write8(FIRE_RED_CURRENT_GROUND_OFFSET, CURRENT_GROUND_LAND); \n        }\n    } else if (IodineGUI.Iodine.IOCore.cartridge.romCode === \"C\") {\n        IodineGUI.Iodine.IOCore.cpu.write8(EMERALD_MOVEMENT_MODE_OFFSET, state);\n        IodineGUI.Iodine.IOCore.cpu.write8(EMERALD_STATE_OFFSET, state); \n        if (state == MOVEMENT_MODE_SURF) {\n            IodineGUI.Iodine.IOCore.cpu.write8(EMERALD_CURRENT_GROUND_OFFSET, CURRENT_GROUND_WATER); \n        } else {\n            IodineGUI.Iodine.IOCore.cpu.write8(EMERALD_CURRENT_GROUND_OFFSET, CURRENT_GROUND_LAND); \n        }\n    } else if (IodineGUI.Iodine.IOCore.cartridge.romCode === \"E\") {\n        IodineGUI.Iodine.IOCore.cpu.write8(EMERALD_MOVEMENT_MODE_OFFSET, state);\n        IodineGUI.Iodine.IOCore.cpu.write8(EMERALD_STATE_OFFSET, state); \n        if (state == MOVEMENT_MODE_SURF) {\n            IodineGUI.Iodine.IOCore.cpu.write8(EMERALD_CURRENT_GROUND_OFFSET, CURRENT_GROUND_WATER); \n        } else if (IodineGUI.Iodine.IOCore.cpu.read8(EMERALD_CURRENT_GROUND_OFFSET) == CURRENT_GROUND_ELEVATED) {\n            IodineGUI.Iodine.IOCore.cpu.write8(EMERALD_CURRENT_GROUND_OFFSET, CURRENT_GROUND_ELEVATED); \n        } else {\n            IodineGUI.Iodine.IOCore.cpu.write8(EMERALD_CURRENT_GROUND_OFFSET, CURRENT_GROUND_LADDER); \n        }\n    }\n}\n\nfunction whiteoutTeam() {\n    if (IodineGUI.Iodine.IOCore.cartridge.romCode === \"FR\") { \n        // Poison First Mon\n        IodineGUI.Iodine.IOCore.cpu.write8(FIRE_RED_PARTY_OFFSET + 80, 0x08);\n        // Set First Mon HP to 1 \n        IodineGUI.Iodine.IOCore.cpu.write16(FIRE_RED_PARTY_OFFSET + 86, 0x01);\n        // Set other mons fainted\n        IodineGUI.Iodine.IOCore.cpu.write16(FIRE_RED_PARTY_OFFSET + 86 + 100, 0x00);\n        IodineGUI.Iodine.IOCore.cpu.write16(FIRE_RED_PARTY_OFFSET + 86 + 200, 0x00);\n        IodineGUI.Iodine.IOCore.cpu.write16(FIRE_RED_PARTY_OFFSET + 86 + 300, 0x00);\n        IodineGUI.Iodine.IOCore.cpu.write16(FIRE_RED_PARTY_OFFSET + 86 + 400, 0x00);\n        IodineGUI.Iodine.IOCore.cpu.write16(FIRE_RED_PARTY_OFFSET + 86 + 500, 0x00);\n    } else if (IodineGUI.Iodine.IOCore.cartridge.romCode === \"C\" || IodineGUI.Iodine.IOCore.cartridge.romCode === \"E\") {\n       // Poison First Mon\n       IodineGUI.Iodine.IOCore.cpu.write8(EMERALD_PARTY_OFFSET + 80, 0x08);\n       // Set First Mon HP to 1 \n       IodineGUI.Iodine.IOCore.cpu.write16(EMERALD_PARTY_OFFSET + 86, 0x01);\n       // Set other mons fainted\n       IodineGUI.Iodine.IOCore.cpu.write16(EMERALD_PARTY_OFFSET + 86 + 100, 0x00);\n       IodineGUI.Iodine.IOCore.cpu.write16(EMERALD_PARTY_OFFSET + 86 + 200, 0x00);\n       IodineGUI.Iodine.IOCore.cpu.write16(EMERALD_PARTY_OFFSET + 86 + 300, 0x00);\n       IodineGUI.Iodine.IOCore.cpu.write16(EMERALD_PARTY_OFFSET + 86 + 400, 0x00);\n       IodineGUI.Iodine.IOCore.cpu.write16(EMERALD_PARTY_OFFSET + 86 + 500, 0x00);\n    }\n}\n\nfunction dynamicMemorySlice(dynamicPointer, offsetInDynamic, length) {\n    let dynamicBlock = IodineGUI.Iodine.IOCore.cpu.read32(dynamicPointer);\n    let startAddress = (dynamicBlock + offsetInDynamic - 0x02000000);\n    let endAddress = startAddress + length;\n    return IodineGUI.Iodine.IOCore.memory.externalRAM.slice(startAddress, endAddress);    \n}\n\nfunction dynamicMemorySplice(dynamicPointer, offsetInDynamic, length, data) {\n    let dynamicBlock = IodineGUI.Iodine.IOCore.cpu.read32(dynamicPointer);\n    let startAddress = (dynamicBlock + offsetInDynamic - 0x02000000);\n    for (let i = 0; i<length; i++) {\n        IodineGUI.Iodine.IOCore.memory.externalRAM[startAddress + i] = data[i];\n    }\n}\n\n\n/******************/\n/* Data Addresses */\n/******************/\n/**\n *  Addresses for save data, Team is not copied here because we use where it is statically stored in memory\n *  Addresses are offsets from the 32bit addresses that can be found using the pointers (ptr locations are static)\n *  Money is xor'd against 32bit xor key, item quantity is xor'd against the first 2 bytes of that key.\n *  \n *  Dynamicly Addressed memory means the three sections of data move in memory (hence we need to look the up with ptrs)\n *  These change each time the bag is accessed or a warp is triggered (and at various other times)\n * \n *  There are 3 dynamic sections. SAV1 (mostly relating to team and items)\n *  SAV2 (storing the xor key, and trainer data, play time, settings, seen mons e.t.c)\n *  We don't deal with SAV3 but it's mostly boxed pokemon / box config   \n */\n\nconst EMERALD_PARTY_OFFSET = 0x020244EC;\nconst FIRE_RED_PARTY_OFFSET = 0x02024284;\nconst PLAYER_PARTY_LENGTH = 0x258;\n\n// DYNAMIC SAV1 PTRs\nconst FIRE_RED_SAVE_1_PTR = 0x03005008;\nconst EMERALD_SAVE_1_PTR = 0x03005D8C;\n// MONEY \nconst FIRE_RED_OBSF_MONEY_OFFSET = 0x0290; //(0x0218)???\nconst FIRE_RED_OBSF_MONEY_LENGTH = 4;\nconst EMERALD_OBSF_MONEY_OFFSET = 0x0490; //(0x0494)???\nconst EMERALD_OBSF_MONEY_LENGTH = 4;\n\n// DYNAMIC SAV2 PTRs\nconst FIRE_RED_SAVE_2_PTR = 0x0300500C;\nconst EMERALD_SAVE_2_PTR = 0x03005d90;\n// Name + Gender / If on bike or surfing\nconst NAME_STATE_OFFSET = 0;\nconst NAME_STATE_LENGTH = 9;\n// Trainer id and time (last 3 bytes button mode + text speed + sound/battle scene)\nconst ID_TIME_OFFSET = 10;\nconst ID_TIME_LENGTH = 12;\n// XOR Key\nconst FIRE_RED_XOR_KEY_OFFSET = 0x0F20;\nconst FIRE_RED_XOR_KEY_LENGTH = 4;\nconst EMERALD_XOR_KEY_OFFSET = 0xAC;\nconst EMERALD_XOR_KEY_LENGTH = 4;\n\n// ITEM POCKET\nconst FIRE_RED_ITEM_OFFSET = 0x0310;\nconst FIRE_RED_ITEM_LENGTH = 168;\nconst EMERALD_ITEM_OFFSET = 0x0560;\nconst EMERALD_ITEM_LENGTH = 120;\n\n// KEY ITEM POCKET\nconst FIRE_RED_KEY_ITEM_OFFSET = 0x03B8;\nconst FIRE_RED_KEY_ITEM_LENGTH = 120;\nconst EMERALD_KEY_ITEM_OFFSET = 0x05D8;\nconst EMERALD_KEY_ITEM_LENGTH = 120;\n\n// BALLS\nconst FIRE_RED_BALL_OFFSET = 0x0430;\nconst FIRE_RED_BALL_LENGTH = 52;\nconst EMERALD_BALL_OFFSET = 0x0650;\nconst EMERALD_BALL_LENGTH = 64;\n\n// TM Case\nconst FIRE_RED_TM_OFFSET = 0x0464;\nconst FIRE_RED_TM_LENGTH = 232;\nconst EMERALD_TM_OFFSET = 0x0690;\nconst EMERALD_TM_LENGTH = 256;\n\n// Berry Pocket\nconst FIRE_RED_BERRIES_OFFSET = 0x054C;\nconst FIRE_RED_BERRIES_LENGTH = 172;\nconst EMERALD_BERRIES_OFFSET = 0x0790;\nconst EMERALD_BERRIES_LENGTH = 184;\n\n// DYNAMIC SAV3 PTRs\nconst FIRE_RED_SAVE_3_PTR = 0x03005010;\nconst EMERALD_SAVE_3_PTR = 0x03005d94;\n\nconst BOX_LENGTH = 2400;\n\n/**************************/\n/* Bag Storage Management */\n/**************************/\n/**\n * \n *  Bag storeage requires special handling as quantities are xor'd with a special key \n *  that changes and will be different for each game\n * \n *  Additionally, storage size differs between games for now excess items will just be \n *  lost so we don't have to worry about storing additional item data outside the games\n * \n *  Additionally, additionally we do some special handling like, give the berry pouch if \n *  berries are already collected, or give a bike if they have one in the other game\n *\n */\n\nfunction BagStoreage() {\n    this.money = null;\n    //this.coins = null;\n\n    //this.pcItems = new Map();\n    this.itemPocket = new Map();\n    this.keyItemsPocket = new Map();\n    this.ballItemPocket = new Map();\n    this.tmCase = new Map();\n    this.berryPocket = new Map();\n}\n\nBagStoreage.prototype.readData = function (game) {\n    if (game == \"E\" || game == \"C\") {\n        this.readEmeraldData();\n    } else {\n        this.readFireRedData();\n    }\n}\n\nBagStoreage.prototype.readFireRedData = function () {\n    this.itemPocket.clear();\n    this.keyItemsPocket.clear();\n    this.ballItemPocket.clear();\n    this.tmCase.clear();\n    this.berryPocket.clear();\n\n    let save2Start = IodineGUI.Iodine.IOCore.cpu.read32(FIRE_RED_SAVE_2_PTR);\n    let xorKey32 = IodineGUI.Iodine.IOCore.cpu.read32(save2Start + FIRE_RED_XOR_KEY_OFFSET);\n    let xorKey16 = IodineGUI.Iodine.IOCore.cpu.read16(save2Start + FIRE_RED_XOR_KEY_OFFSET);\n\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(FIRE_RED_SAVE_1_PTR);\n    this.money = IodineGUI.Iodine.IOCore.cpu.read32(save1Start + FIRE_RED_OBSF_MONEY_OFFSET) ^ xorKey32;\n\n    // read items\n    this.readItemSection(save1Start, FIRE_RED_ITEM_OFFSET, FIRE_RED_ITEM_LENGTH, this.itemPocket, xorKey16);\n\n    // read key items\n    this.readItemSection(save1Start, FIRE_RED_KEY_ITEM_OFFSET, FIRE_RED_KEY_ITEM_LENGTH, this.keyItemsPocket, xorKey16);\n\n    // read balls\n    this.readItemSection(save1Start, FIRE_RED_BALL_OFFSET, FIRE_RED_BALL_LENGTH, this.ballItemPocket, xorKey16);\n\n    // read tms\n    this.readItemSection(save1Start, FIRE_RED_TM_OFFSET, FIRE_RED_TM_LENGTH, this.tmCase, xorKey16);\n\n    // read berries\n    this.readItemSection(save1Start, FIRE_RED_BERRIES_OFFSET, FIRE_RED_BERRIES_LENGTH, this.berryPocket, xorKey16);\n}\n\nBagStoreage.prototype.readEmeraldData = function () {\n    this.itemPocket.clear();\n    this.keyItemsPocket.clear();\n    this.ballItemPocket.clear();\n    this.tmCase.clear();\n    this.berryPocket.clear();\n\n    let save2Start = IodineGUI.Iodine.IOCore.cpu.read32(EMERALD_SAVE_2_PTR);\n    let xorKey32 = IodineGUI.Iodine.IOCore.cpu.read32(save2Start + EMERALD_XOR_KEY_OFFSET);\n    let xorKey16 = IodineGUI.Iodine.IOCore.cpu.read16(save2Start + EMERALD_XOR_KEY_OFFSET);\n\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(EMERALD_SAVE_1_PTR);\n    this.money = IodineGUI.Iodine.IOCore.cpu.read32(save1Start + EMERALD_OBSF_MONEY_OFFSET) ^ xorKey32;\n\n    // read items\n    this.readItemSection(save1Start, EMERALD_ITEM_OFFSET, EMERALD_ITEM_LENGTH, this.itemPocket, xorKey16);\n\n    // read key items\n    this.readItemSection(save1Start, EMERALD_KEY_ITEM_OFFSET, EMERALD_KEY_ITEM_LENGTH, this.keyItemsPocket, xorKey16);\n\n    // read balls\n    this.readItemSection(save1Start, EMERALD_BALL_OFFSET, EMERALD_BALL_LENGTH, this.ballItemPocket, xorKey16);\n\n    // read tms\n    this.readItemSection(save1Start, EMERALD_TM_OFFSET, EMERALD_TM_LENGTH, this.tmCase, xorKey16);\n\n    // read berries\n    this.readItemSection(save1Start, EMERALD_BERRIES_OFFSET, EMERALD_BERRIES_LENGTH, this.berryPocket, xorKey16);\n}\n\nBagStoreage.prototype.writeData = function (game, lastGame, isLoadingScreen) {\n    if (game == \"E\" || game == \"C\") {\n        this.writeDataToEmerald(game, lastGame, isLoadingScreen);\n    } else {\n        this.writeDataToFireRed(game, lastGame, isLoadingScreen);\n    }\n}\n\n\nBagStoreage.prototype.writeDataToFireRed = function (game, lastGame, isLoadingScreen) {\n    let save2Start = IodineGUI.Iodine.IOCore.cpu.read32(FIRE_RED_SAVE_2_PTR);\n    let xorKey32 = IodineGUI.Iodine.IOCore.cpu.read32(save2Start + FIRE_RED_XOR_KEY_OFFSET);\n    let xorKey16 = IodineGUI.Iodine.IOCore.cpu.read16(save2Start + FIRE_RED_XOR_KEY_OFFSET);\n\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(FIRE_RED_SAVE_1_PTR);\n\n    IodineGUI.Iodine.IOCore.cpu.write32(save1Start + FIRE_RED_OBSF_MONEY_OFFSET, this.money ^ xorKey32);\n\n    // We need to give the player the berry pocket or tm case if they have some \n    if (this.berryPocket.size >= 1) {\n        this.keyItemsPocket.set(365, 1); // one berry pouch\n    }\n    if (this.tmCase.size >= 1) {\n        this.keyItemsPocket.set(364, 1); // one tm case\n    }\n\n    if (lastGame == \"C\") {\n        // Going from crystal to firered\n        let hasRocksmash = this.tmCase.get(296);\n        let hasWhirldpool = this.tmCase.get(344);\n        let hasBodyslam = this.keyItemsPocket.get(347);\n\n        this.tmCase.delete(296);\n        this.tmCase.delete(344);\n        this.keyItemsPocket.delete(347);\n\n        if(hasRocksmash) this.tmCase.set(344, 1);\n        if(hasWhirldpool) this.keyItemsPocket.set(347, 1); // Unused TM to represent whirldpool\n        if(hasBodyslam) this.tmCase.set(296, 1); \n    } \n\n    // write items\n    this.writeItemSection(save1Start, FIRE_RED_ITEM_OFFSET, FIRE_RED_ITEM_LENGTH, this.itemPocket, xorKey16, isLoadingScreen);\n\n    // write key items\n    this.writeItemSection(save1Start, FIRE_RED_KEY_ITEM_OFFSET, FIRE_RED_KEY_ITEM_LENGTH, this.keyItemsPocket, xorKey16, false);\n\n    // write balls\n    this.writeItemSection(save1Start, FIRE_RED_BALL_OFFSET, FIRE_RED_BALL_LENGTH, this.ballItemPocket, xorKey16, isLoadingScreen);\n\n    // write tms\n    this.writeItemSection(save1Start, FIRE_RED_TM_OFFSET, FIRE_RED_TM_LENGTH, this.tmCase, xorKey16, isLoadingScreen);\n\n    // write berries\n    this.writeItemSection(save1Start, FIRE_RED_BERRIES_OFFSET, FIRE_RED_BERRIES_LENGTH, this.berryPocket, xorKey16, isLoadingScreen);\n}\n\nBagStoreage.prototype.writeDataToEmerald = function (game, lastGame, isLoadingScreen) {\n    let save2Start = IodineGUI.Iodine.IOCore.cpu.read32(EMERALD_SAVE_2_PTR);\n    let xorKey32 = IodineGUI.Iodine.IOCore.cpu.read32(save2Start + EMERALD_XOR_KEY_OFFSET);\n    let xorKey16 = IodineGUI.Iodine.IOCore.cpu.read16(save2Start + EMERALD_XOR_KEY_OFFSET);\n\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(EMERALD_SAVE_1_PTR);\n\n    IodineGUI.Iodine.IOCore.cpu.write32(save1Start + EMERALD_OBSF_MONEY_OFFSET, this.money ^ xorKey32);\n\n    // If we have a bike from fire red but not a mach/acro bike from emerald we should get a mach bike \n    if (this.keyItemsPocket.get(360) && !this.keyItemsPocket.get(259) && !this.keyItemsPocket.get(272)) {\n        this.keyItemsPocket.set(259, 1);\n        this.keyItemsPocket.get(272, 1);\n    }\n\n    // If we have HM06/TM08 we need to make sure it's the right hm\n    // In Crystal HM06 is whirlpool and TM08 is Rocksmash\n    // In Emerald and FireRed HM06 is  Rocksmash and TM08 is 'Bulk Up'\n    if (game == \"E\" && lastGame == \"C\") {\n        // Going from crystal to emerald\n\n        let hasRocksmash = this.tmCase.get(296);\n        let hasWhirldpool = this.tmCase.get(344);\n        let hasBodyslam = this.keyItemsPocket.get(347);\n\n        this.tmCase.delete(296);\n        this.tmCase.delete(344);\n        this.keyItemsPocket.delete(347);\n\n        if(hasRocksmash) this.tmCase.set(344, 1);\n        if(hasWhirldpool) this.keyItemsPocket.set(347, 1); // Unused TM to represent whirldpool\n        if(hasBodyslam) this.tmCase.set(296, 1); \n\n    } else if (game == \"C\" && lastGame && lastGame != \"C\") {\n\n        // Going from firered or emerald into crystal\n        let hasRocksmash = this.tmCase.get(344);\n        let hasWhirldpool = this.keyItemsPocket.get(347);\n        let hasBodyslam = this.tmCase.get(296);\n\n        this.tmCase.delete(296);\n        this.tmCase.delete(344);\n        this.keyItemsPocket.delete(347);\n\n        if(hasRocksmash) this.tmCase.set(296, 1);\n        if(hasWhirldpool) this.tmCase.set(344, 1); // Unused TM to represent bodyslam\n        if(hasBodyslam) this.keyItemsPocket.set(347, 1); \n\n    }\n\n    // write items\n    this.writeItemSection(save1Start, EMERALD_ITEM_OFFSET, EMERALD_ITEM_LENGTH, this.itemPocket, xorKey16, isLoadingScreen);\n\n    // write key items\n    this.writeItemSection(save1Start, EMERALD_KEY_ITEM_OFFSET, EMERALD_KEY_ITEM_LENGTH, this.keyItemsPocket, xorKey16, false);\n\n    // write balls\n    this.writeItemSection(save1Start, EMERALD_BALL_OFFSET, EMERALD_BALL_LENGTH, this.ballItemPocket, xorKey16, isLoadingScreen);\n\n    // write tms\n    this.writeItemSection(save1Start, EMERALD_TM_OFFSET, EMERALD_TM_LENGTH, this.tmCase, xorKey16, isLoadingScreen);\n\n    // write berries\n    this.writeItemSection(save1Start, EMERALD_BERRIES_OFFSET, EMERALD_BERRIES_LENGTH, this.berryPocket, xorKey16, isLoadingScreen);\n}\n\nBagStoreage.prototype.readItemSection = function(save1Start, offset, length, storeTo, xorKey16) {\n    for (let i = 0;  i < offset + length; i+=4) {\n        let item = IodineGUI.Iodine.IOCore.cpu.read16(save1Start + offset + i);\n\n        if (item == 0) { break; }\n\n        let ballQuantity = IodineGUI.Iodine.IOCore.cpu.read16(save1Start + offset + i + 2) ^ xorKey16;\n        storeTo.set(item, ballQuantity);\n    }\n}\n\nBagStoreage.prototype.writeItemSection = function(save1Start, offset, length, store, xorKey16, clear) {\n\n    var storeArr = [...store];\n\n    for (let i = 0;  i < offset + length; i+=4) {\n\n        let index = i / 4;\n        if (storeArr.length > index) {\n\n            let item = (storeArr[i / 4])[0];\n            let quantity = (storeArr[i / 4])[1] ^ xorKey16;\n\n            IodineGUI.Iodine.IOCore.cpu.write16(save1Start + offset + i, item);\n            IodineGUI.Iodine.IOCore.cpu.write16(save1Start + offset + i + 2, quantity);\n\n        } else {\n\n            // No more items to copy\n            if(clear) {\n                let item = ITEM_DATA.Nothing.number;\n                let quantity = 0 ^ xorKey16;\n                \n                IodineGUI.Iodine.IOCore.cpu.write16(save1Start + offset + i, item);\n                IodineGUI.Iodine.IOCore.cpu.write16(save1Start + offset + i + 2, quantity);\n            } else {\n                break;\n            }\n        }\n    }\n}\n\nBagStoreage.prototype.hasBike = function () {\n    // Add up quantities of any bikes\n    return ((this.keyItemsPocket.get(259) || 0) + (this.keyItemsPocket.get(272) || 0) + (this.keyItemsPocket.get(360) || 0)) > 0\n}\n\n/*******************/\n/* Flag Management */\n/*******************/\nvar badgeSync = true;\n\n// This handles any general vars/flags that need to be transfered when switching games\n\n// IN DYNAMIC SAV1\n// The equations are so the offsets line up the the flags defined in the decomp projects\n// https://github.com/pret/pokefirered/blob/master/include/constants/flags.h\n// https://github.com/pret/pokeemerald/blob/master/include/constants/flags.h\n// https://github.com/pret/pokefirered/blob/master/include/constants/vars.h\n// https://github.com/pret/pokeemerald/blob/master/include/constants/vars.h\nconst FIRE_RED_BASE_FLAG_OFFSET    = 0xEE0;\nconst FIRE_RED_SYS_FLAGS_OFFSET    = 0xFE0;\nconst FIRE_RED_BADGE1_OFFSET       = 0x20;\nconst FIRE_RED_BADGE2_OFFSET       = 0x21;\nconst FIRE_RED_BADGE3_OFFSET       = 0x22;\nconst FIRE_RED_BADGE4_OFFSET       = 0x23;\nconst FIRE_RED_BADGE5_OFFSET       = 0x24;\nconst FIRE_RED_BADGE6_OFFSET       = 0x25;\nconst FIRE_RED_BADGE7_OFFSET       = 0x26;\nconst FIRE_RED_BADGE8_OFFSET       = 0x27;\nconst FIRE_RED_RUNNING_SHOE_OFFSET = 0x2F;\nconst FIRE_RED_POKEDEX_OFFSET      = 0x29; \nconst FIRE_RED_NATIONAL_DEX_OFFSET = 0x40;\nconst FIRE_RED_BADGE_OFFSETS = [FIRE_RED_BADGE1_OFFSET, \n                                FIRE_RED_BADGE2_OFFSET, \n                                FIRE_RED_BADGE3_OFFSET, \n                                FIRE_RED_BADGE4_OFFSET, \n                                FIRE_RED_BADGE5_OFFSET, \n                                FIRE_RED_BADGE6_OFFSET, \n                                FIRE_RED_BADGE7_OFFSET, \n                                FIRE_RED_BADGE8_OFFSET];\nconst FIRE_RED_BIKE_OBTAINED_OFFSET = 0x271;\n\nconst EMERALD_BASE_FLAGS_OFFSET   = 0x1270;\nconst EMERALD_SYS_FLAGS_OFFSET    = 0x137C;\nconst EMERALD_BADGE1_OFFSET       = 0x7;\nconst EMERALD_BADGE2_OFFSET       = 0x8;\nconst EMERALD_BADGE3_OFFSET       = 0x9;\nconst EMERALD_BADGE4_OFFSET       = 0xA;\nconst EMERALD_BADGE5_OFFSET       = 0xB;\nconst EMERALD_BADGE6_OFFSET       = 0xC;\nconst EMERALD_BADGE7_OFFSET       = 0xD;\nconst EMERALD_BADGE8_OFFSET       = 0xE;\nconst EMERALD_RUNNING_SHOE_OFFSET = 0x60;\nconst EMERALD_POKEDEX_OFFSET      = 0x1; \nconst EMERALD_NATIONAL_DEX_OFFSET = 0x36;\nconst EMERALD_BADGE_OFFSETS = [EMERALD_BADGE1_OFFSET, \n                               EMERALD_BADGE2_OFFSET, \n                               EMERALD_BADGE3_OFFSET, \n                               EMERALD_BADGE4_OFFSET, \n                               EMERALD_BADGE5_OFFSET, \n                               EMERALD_BADGE6_OFFSET, \n                               EMERALD_BADGE7_OFFSET, \n                               EMERALD_BADGE8_OFFSET];\n\nconst EMERALD_BASE_VAR_OFFSET = 0x139c;\nconst FIRE_RED_BASE_VAR_OFFSET = 0x1000;\n\nconst EMERALD_REPEL_STEPS_OFFSET = 0x4021;\nconst FIRE_RED_REPEL_STEPS_OFFSET = 0x4020;\n\nconst EMERALD_STARTER_CHOICE_OFFSET = 0x4023;\nconst FIRE_RED_STARTER_CHOICE_OFFSET = 0x4031;\n\nfunction FlagManager(hasBike) {\n    this.badge1 = null;\n    this.badge2 = null;\n    this.badge3 = null;\n    this.badge4 = null;\n    this.badge5 = null;\n    this.badge6 = null;\n    this.badge7 = null;\n    this.badge8 = null;\n    this.hasRunningShoes = null;\n    this.HMState = null;\n    this.hasBike = hasBike;\n    this.repelSteps = null;\n    this.starterChoice = null;\n}\n\nFlagManager.prototype.getFlag = function (saveOffset, sectionOffset, flagOffset) {\n\n    let flagByte = IodineGUI.Iodine.IOCore.cpu.read8(saveOffset + sectionOffset + Math.ceil((flagOffset + 1) / 8) - 1);\n    let flagBit = flagOffset % 8;\n\n    return !!+flagByte.toString(2).padStart(8, 0).split(\"\").reverse()[flagBit];\n}\n\nFlagManager.prototype.setFlag = function (saveOffset, sectionOffset, flagOffset, value) {\n\n    let flagByte = IodineGUI.Iodine.IOCore.cpu.read8(saveOffset + sectionOffset + Math.ceil((flagOffset + 1) / 8) - 1);\n    let flagBit = flagOffset % 8;\n\n    let byteArr = flagByte.toString(2).padStart(8, 0).split(\"\").reverse();\n    byteArr[flagBit] = value;\n\n    IodineGUI.Iodine.IOCore.cpu.write8(saveOffset + sectionOffset + Math.ceil((flagOffset + 1) / 8) - 1, parseInt(byteArr.reverse().join(\"\"), 2));\n\n}\n\nFlagManager.prototype.readFlags = function (game) {\n    if (game == \"E\") {\n        this.readEmeraldFlags();\n    } \n    else if (game == \"C\") {\n        this.readCrystalFlags();\n    } else {\n        this.readFireRedFlags();\n    }\n}\n\nFlagManager.prototype.readEmeraldFlags = function () {\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(EMERALD_SAVE_1_PTR);\n\n    this.badge1          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE1_OFFSET);\n    this.badge2          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE2_OFFSET);\n    this.badge3          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE3_OFFSET);\n    this.badge4          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE4_OFFSET);\n    this.badge5          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE5_OFFSET);\n    this.badge6          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE6_OFFSET);\n    this.badge7          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE7_OFFSET);\n    this.badge8          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE8_OFFSET);\n    this.hasRunningShoes = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_RUNNING_SHOE_OFFSET);\n    \n    this.HMState = new HMState();\n    this.HMState.evaluate(\"E\", this.badge1, this.badge2, this.badge3, this.badge4, this.badge5, this.badge6, this.badge7, this.badge8);\n\n    this.repelSteps = readGameVar(\"E\", EMERALD_REPEL_STEPS_OFFSET);\n    //this.starterChoice = readGameVar(\"E\", EMERALD_STARTER_CHOICE_OFFSET);\n}\n\nFlagManager.prototype.readCrystalFlags = function () {\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(EMERALD_SAVE_1_PTR);\n\n    this.badge1          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE1_OFFSET);\n    this.badge2          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE2_OFFSET);\n    this.badge3          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE3_OFFSET);\n    this.badge4          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE4_OFFSET);\n    this.badge5          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE5_OFFSET);\n    this.badge6          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE6_OFFSET);\n    this.badge7          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE7_OFFSET);\n    this.badge8          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE8_OFFSET);\n    this.hasRunningShoes = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_RUNNING_SHOE_OFFSET);\n\n    this.HMState = new HMState();\n    this.HMState.evaluate(\"C\", this.badge1, this.badge2, this.badge3, this.badge4, this.badge5, this.badge6, this.badge7, this.badge8);\n\n    this.repelSteps = readGameVar(\"C\", EMERALD_REPEL_STEPS_OFFSET);\n    //this.starterChoice = readGameVar(\"C\", EMERALD_STARTER_CHOICE_OFFSET);\n}\n\nFlagManager.prototype.readFireRedFlags = function () {\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(FIRE_RED_SAVE_1_PTR);\n    \n    this.badge1          = this.getFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE1_OFFSET);\n    this.badge2          = this.getFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE2_OFFSET);\n    this.badge3          = this.getFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE3_OFFSET);\n    this.badge4          = this.getFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE4_OFFSET);\n    this.badge5          = this.getFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE5_OFFSET);\n    this.badge6          = this.getFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE6_OFFSET);\n    this.badge7          = this.getFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE7_OFFSET);\n    this.badge8          = this.getFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE8_OFFSET);\n    this.hasRunningShoes = this.getFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_RUNNING_SHOE_OFFSET);\n\n    this.HMState = new HMState();\n    this.HMState.evaluate(\"FR\", this.badge1, this.badge2, this.badge3, this.badge4, this.badge5, this.badge6, this.badge7, this.badge8);\n\n    this.repelSteps = readGameVar(\"FR\", FIRE_RED_REPEL_STEPS_OFFSET);\n    this.starterChoice = readGameVar(\"FR\", FIRE_RED_STARTER_CHOICE_OFFSET);\n}\n\nFlagManager.prototype.writeFlags = function (game, lastGame) {\n    if (game == \"E\") {\n        this.writeEmeraldFlags();\n    } \n    else if (game == \"C\") {\n        this.writeCrystalFlags();\n    } else {\n        this.writeFireRedFlags();\n    }\n}\n\nFlagManager.prototype.writeEmeraldFlags = function () {\n\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(EMERALD_SAVE_1_PTR);\n\n    this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_RUNNING_SHOE_OFFSET, +this.hasRunningShoes);\n\n    // Enable national dex\n    this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_NATIONAL_DEX_OFFSET, 1);\n    writeGameVar(\"E\", 0x404E, 0x0302);\n    let save2Start = IodineGUI.Iodine.IOCore.cpu.read32(EMERALD_SAVE_2_PTR);\n    IodineGUI.Iodine.IOCore.cpu.write8(save2Start + 26, 0xDA);\n\n    // Open regi doors\n    this.setFlag(save1Start, EMERALD_BASE_FLAGS_OFFSET, 0xE4, 1);\n\n    if (badgeSync) {\n        \n        let badge1 = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE1_OFFSET);\n        let badge2 = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE2_OFFSET);\n        let badge3 = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE3_OFFSET);\n        let badge4 = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE4_OFFSET);\n        let badge5 = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE5_OFFSET);\n        let badge6 = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE6_OFFSET);\n        let badge7 = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE7_OFFSET);\n        let badge8 = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE8_OFFSET);\n\n        let updatedBadges = this.HMState.updateBadges(\"E\", badge1, badge2, badge3, badge4, badge5, badge6, badge7, badge8);\n\n        this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE1_OFFSET, +(updatedBadges[0] || badge1));\n        this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE2_OFFSET, +(updatedBadges[1] || badge2));\n        this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE3_OFFSET, +(updatedBadges[2] || badge3));\n        this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE4_OFFSET, +(updatedBadges[3] || badge4));\n        this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE5_OFFSET, +(updatedBadges[4] || badge5));\n        this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE6_OFFSET, +(updatedBadges[5] || badge6));\n        this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE7_OFFSET, +(updatedBadges[6] || badge7));\n        this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE8_OFFSET, +(updatedBadges[7] || badge8));\n\n    }\n\n    writeGameVar(\"E\", EMERALD_REPEL_STEPS_OFFSET, this.repelSteps);\n\n    if (this.starterChoice) {\n        writeGameVar(\"E\", EMERALD_STARTER_CHOICE_OFFSET, this.starterChoice);\n    }\n}\n\nFlagManager.prototype.writeCrystalFlags = function () {\n\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(EMERALD_SAVE_1_PTR);\n\n    this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_RUNNING_SHOE_OFFSET, +this.hasRunningShoes);\n\n    // Enable national dex\n    this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_NATIONAL_DEX_OFFSET, 1);\n    writeGameVar(\"E\", 0x404E, 0x0302);\n    let save2Start = IodineGUI.Iodine.IOCore.cpu.read32(EMERALD_SAVE_2_PTR);\n    IodineGUI.Iodine.IOCore.cpu.write8(save2Start + 26, 0xDA);\n\n    if (badgeSync) {\n        \n        let badge1 = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE1_OFFSET);\n        let badge2 = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE2_OFFSET);\n        let badge3 = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE3_OFFSET);\n        let badge4 = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE4_OFFSET);\n        let badge5 = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE5_OFFSET);\n        let badge6 = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE6_OFFSET);\n        let badge7 = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE7_OFFSET);\n        let badge8 = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE8_OFFSET);\n\n        let updatedBadges = this.HMState.updateBadges(\"C\", badge1, badge2, badge3, badge4, badge5, badge6, badge7, badge8);\n\n        this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE1_OFFSET, +(updatedBadges[0] || badge1));\n        this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE2_OFFSET, +(updatedBadges[1] || badge2));\n        this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE3_OFFSET, +(updatedBadges[2] || badge3));\n        this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE4_OFFSET, +(updatedBadges[3] || badge4));\n        this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE5_OFFSET, +(updatedBadges[4] || badge5));\n        this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE6_OFFSET, +(updatedBadges[5] || badge6));\n        this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE7_OFFSET, +(updatedBadges[6] || badge7));\n        this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE8_OFFSET, +(updatedBadges[7] || badge8));\n        \n    }\n\n    writeGameVar(\"C\", EMERALD_REPEL_STEPS_OFFSET, this.repelSteps);\n    // Enabling this disables all the battle with Silver\n    //writeGameVar(\"C\", EMERALD_STARTER_CHOICE_OFFSET, this.starterChoice);\n}\n\nFlagManager.prototype.writeFireRedFlags = function () {\n\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(FIRE_RED_SAVE_1_PTR);\n\n    this.setFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_RUNNING_SHOE_OFFSET, +this.hasRunningShoes);\n\n    // Enable national dex\n    this.setFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_NATIONAL_DEX_OFFSET, 1);\n    writeGameVar(\"FR\", 0x404E, 0x6258);\n    let save2Start = IodineGUI.Iodine.IOCore.cpu.read32(FIRE_RED_SAVE_2_PTR);\n    IodineGUI.Iodine.IOCore.cpu.write8(save2Start + 27, 0xB9);\n\n    if (this.hasBike) {\n        this.setFlag(save1Start, FIRE_RED_BASE_FLAG_OFFSET, FIRE_RED_BIKE_OBTAINED_OFFSET, 1);\n    }\n\n    if (badgeSync) {\n        \n        let badge1 = this.getFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE1_OFFSET);\n        let badge2 = this.getFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE2_OFFSET);\n        let badge3 = this.getFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE3_OFFSET);\n        let badge4 = this.getFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE4_OFFSET);\n        let badge5 = this.getFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE5_OFFSET);\n        let badge6 = this.getFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE6_OFFSET);\n        let badge7 = this.getFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE7_OFFSET);\n        let badge8 = this.getFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE8_OFFSET);\n\n        let updatedBadges = this.HMState.updateBadges(\"FR\", badge1, badge2, badge3, badge4, badge5, badge6, badge7, badge8);\n\n        this.setFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE1_OFFSET, +(updatedBadges[0] || badge1));\n        this.setFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE2_OFFSET, +(updatedBadges[1] || badge2));\n        this.setFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE3_OFFSET, +(updatedBadges[2] || badge3));\n        this.setFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE4_OFFSET, +(updatedBadges[3] || badge4));\n        this.setFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE5_OFFSET, +(updatedBadges[4] || badge5));\n        this.setFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE6_OFFSET, +(updatedBadges[5] || badge6));\n        this.setFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE7_OFFSET, +(updatedBadges[6] || badge7));\n        this.setFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE8_OFFSET, +(updatedBadges[7] || badge8));\n        \n    }\n    \n    writeGameVar(\"FR\", FIRE_RED_REPEL_STEPS_OFFSET, this.repelSteps);\n    //writeGameVar(\"FR\", FIRE_RED_STARTER_CHOICE_OFFSET, this.starterChoice);\n}\n\nfunction modifyBadge(game, badgeNumber, shouldGiveOrRemoveBit) {\n\n    let badgeOffsets = game == \"FR\" ? FIRE_RED_BADGE_OFFSETS : EMERALD_BADGE_OFFSETS\n    modifySystemFlag(game, badgeOffsets[badgeNumber - 1], shouldGiveOrRemoveBit);\n\n}\n\nfunction modifyRunningShoes(game, shouldGiveOrRemoveBit) {\n\n    let offset = game == \"FR\" ? FIRE_RED_RUNNING_SHOE_OFFSET : EMERALD_RUNNING_SHOE_OFFSET\n    modifySystemFlag(game, offset, shouldGiveOrRemoveBit);\n\n}\n\nfunction modifySystemFlag(game, offset, shouldGiveOrRemoveBit) {\n\n    let manager = new FlagManager();\n    manager.readFlags(game);\n\n    let savePtr = game == \"FR\" ? FIRE_RED_SAVE_1_PTR : EMERALD_SAVE_1_PTR;\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(savePtr);\n\n    let sysFlagOffset = game == \"FR\" ? FIRE_RED_SYS_FLAGS_OFFSET : EMERALD_SYS_FLAGS_OFFSET;\n\n    manager.setFlag(save1Start, sysFlagOffset, offset, shouldGiveOrRemoveBit);\n\n}\n\nfunction readSystemFlag(game, offset) {\n\n    let manager = new FlagManager();\n    manager.readFlags(game);\n\n    let savePtr = game == \"FR\" ? FIRE_RED_SAVE_1_PTR : EMERALD_SAVE_1_PTR;\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(savePtr);\n\n    let sysFlagOffset = game == \"FR\" ? FIRE_RED_SYS_FLAGS_OFFSET : EMERALD_SYS_FLAGS_OFFSET;\n\n    return manager.getFlag(save1Start, sysFlagOffset, offset);\n\n}\nfunction writeGameVar(game, offset, data) {\n\n    let savePtr = game == \"FR\" ? FIRE_RED_SAVE_1_PTR : EMERALD_SAVE_1_PTR;\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(savePtr);\n\n    let baseVarOffset = game == \"FR\" ? FIRE_RED_BASE_VAR_OFFSET : EMERALD_BASE_VAR_OFFSET;\n\n    IodineGUI.Iodine.IOCore.cpu.write16(save1Start + baseVarOffset + ((offset - 0x4000) * 2), data);\n}\n\nfunction readGameVar(game, offset) {\n\n    let savePtr = game == \"FR\" ? FIRE_RED_SAVE_1_PTR : EMERALD_SAVE_1_PTR;\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(savePtr);\n\n    let baseVarOffset = game == \"FR\" ? FIRE_RED_BASE_VAR_OFFSET : EMERALD_BASE_VAR_OFFSET;\n\n    return IodineGUI.Iodine.IOCore.cpu.read16(save1Start + baseVarOffset + ((offset - 0x4000) * 2));\n}\n\n// EQUIVILENT BADGE UNLOCKS\n/*           | FR    | C     | E     |\n| Flash      | GYM 1 | GYM 1 | GYM 2 |   \n| Cut        | GYM 2 | GYM 2 | GYM 1 |\n| Fly        | GYM 3 | GYM 5 | GYM 6 |\n| Strength   | GYM 4 | GYM 3 | GYM 4 |\n| Surf       | GYM 5 | GYM 4 | GYM 5 |\n| Rock Smash | GYM 6 |       | GYM 3 |\n| Waterfall  | GYM 7 | GYM 8 | GYM 8 |\n| Dive       |       |       | GYM 7 | \n| Whirlpool  |       | GYM 7 |       |\n*/\nfunction HMState() {\n    this.canFlash     = false;\n    this.canCut       = false;\n    this.canFly       = false;\n    this.canStrength  = false;\n    this.canSurf      = false;\n    this.canSmash     = false;\n    this.canWaterfall = false;\n    this.canDive      = false;\n    this.canWhirlpool = false;\n}\n\nHMState.prototype.evaluate = function (game, badge1, badge2, badge3, badge4, badge5, badge6, badge7, badge8) {\n    if (game == \"E\") {\n        this.canFlash     = badge2;\n        this.canCut       = badge1;\n        this.canFly       = badge6;\n        this.canStrength  = badge4;\n        this.canSurf      = badge5;\n        this.canSmash     = badge3;\n        this.canWaterfall = badge8;\n        this.canDive      = badge7;\n        this.canWhirlpool = false;\n    } \n    else if (game == \"C\") {\n        this.canFlash     = badge1;\n        this.canCut       = badge2;\n        this.canFly       = badge5;\n        this.canStrength  = badge3;\n        this.canSurf      = badge4;\n        this.canSmash     = false; // because there is no badge requirement\n        this.canWaterfall = badge8;\n        this.canDive      = false;\n        this.canWhirlpool = badge7;\n    } else {\n        this.canFlash     = badge1;\n        this.canCut       = badge2;\n        this.canFly       = badge3;\n        this.canStrength  = badge4;\n        this.canSurf      = badge5;\n        this.canSmash     = badge6;\n        this.canWaterfall = badge7;\n        this.canDive      = false;\n        this.canWhirlpool = false;\n    }\n}\n\nHMState.prototype.updateBadges = function (game, badge1, badge2, badge3, badge4, badge5, badge6, badge7, badge8) {\n\n    let badges = [];\n\n    if (game == \"E\") {\n        badges[1 - 1] = +(badge1  || this.canCut);\n        badges[2 - 1] = +(badge2  || this.canFlash);\n        badges[3 - 1] = +(badge3  || this.canSmash);\n        badges[4 - 1] = +(badge4  || this.canStrength);\n        badges[5 - 1] = +(badge5  || this.canSurf);\n        badges[6 - 1] = +(badge6  || this.canFly);\n        badges[7 - 1] = +(badge7  || this.canDive);\n        badges[8 - 1] = +(badge8  || this.canWaterfall);\n    } \n    else if (game == \"C\") {\n        badges[1 - 1] = +(badge1 || this.canFlash);\n        badges[2 - 1] = +(badge2 || this.canCut);\n        badges[3 - 1] = +(badge3 || this.canStrength);\n        badges[4 - 1] = +(badge4 || this.canSurf);\n        badges[5 - 1] = +(badge5 || this.canFly);\n        badges[8 - 1] = +(badge8 || this.canWaterfall);\n    } else {\n        badges[1 - 1] = +(badge1  || this.canFlash);\n        badges[2 - 1] = +(badge2  || this.canCut);\n        badges[3 - 1] = +(badge3  || this.canFly);\n        badges[4 - 1] = +(badge4  || this.canStrength);\n        badges[5 - 1] = +(badge5  || this.canSurf);\n        badges[6 - 1] = +(badge6  || this.canSmash);\n        badges[7 - 1] = +(badge7  || this.canWaterfall);\n    }\n\n    return badges;\n}"],"names":["isWarping","switchingGameState","randomWarpsEnabled","FIRE_RED_LAST_BANK","FIRE_RED_CURRENT_BANK","FIRE_RED_CURRENT_MAP","FIRE_RED_CURRENT_WARP","EMERALD_LAST_BANK","EMERALD_CURRENT_BANK","EMERALD_CURRENT_MAP","EMERALD_CURRENT_WARP","EMERALD_MAP_TYPE","FIRE_RED_MAP_TYPE","flagManager","isInSafari","GameBoyAdvanceCPU","prototype","write32WithoutIntercept","write32","address","data","IodineGUI","Iodine","IOCore","cartridge","romCode","pause","beforeRomCode","partySlice","readWRAMSlice","EMERALD_PARTY_OFFSET","FIRE_RED_PARTY_OFFSET","PLAYER_PARTY_LENGTH","playerNameAndState","dynamicMemorySlice","EMERALD_SAVE_2_PTR","FIRE_RED_SAVE_2_PTR","NAME_STATE_OFFSET","NAME_STATE_LENGTH","idAndPlayTime","ID_TIME_OFFSET","ID_TIME_LENGTH","box1","EMERALD_SAVE_3_PTR","FIRE_RED_SAVE_3_PTR","BOX_LENGTH","bagStoreage","BagStoreage","readData","FlagManager","hasBike","readFlags","saveStateManager","loadState","gameSwitchingWarp","toRomCode","this","write8","toBank","toMap","toWarpNo","currentRomCode","spliceWRAM","dynamicMemorySplice","writeData","writeFlags","mixerInput","volume","document","getElementById","classList","add","play","remove","getFlag","cpu","read32","FIRE_RED_SAVE_1_PTR","FIRE_RED_SYS_FLAGS_OFFSET","specialPostWarpHandling","EMERALD_SAVE_1_PTR","EMERALD_SYS_FLAGS_OFFSET","write8WithoutIntercept","forceNextWarp","EMERALD_MOVEMENT_MODE_OFFSET","FIRE_RED_MOVEMENT_MODE_OFFSET","MOVEMENT_MODE_WALK","MOVEMENT_MODE_BIKE","MOVEMENT_MODE_SURF","autoBike","teleportAnywhere","read8WithoutIntercept","read8","current","current1","handleWarpRedirection","reverseNextWarp","specialPreWarpHandling","pkwarp","specialDuringWarpHandling","destination","writeGameVar","readGameVar","setFlag","forceStateAfterDelay","destination1","destination2","async","movementMode","delayTime","delay","getSpeed","forcePlayerState","quickSpeedUp","duration","currentSpeed","setSpeed","quickHideScreen","elmnt","offsetWidth","length","startAddress","endAddress","memory","externalRAM","slice","i","bank","map","warpNo","usingHomeWarp","handelHomeWarp","pkWarp","trigger","toParts","split","PKWarp","warpList","get","source","toParts1","console","log","saveState","walkThroughWalls","runIndoors","frWallsOffset","frRunIndoorsOffset","GameBoyAdvanceMultiCartridge","initializeWithoutIntercept","initialize","startingRom","cartriges","ROM","readROM16WithoutIntercept","readROM16","currentlySaving","readROM8WithoutIntercept","readROM8","syncSaveStateSaves","FIRE_RED_CURRENT_GROUND_OFFSET","EMERALD_CURRENT_GROUND_OFFSET","CURRENT_GROUND_LAND","CURRENT_GROUND_WATER","CURRENT_GROUND_LADDER","CURRENT_GROUND_ELEVATED","EMERALD_STATE_OFFSET","FIRE_RED_STATE_OFFSET","state","whiteoutTeam","write16","dynamicPointer","offsetInDynamic","FIRE_RED_OBSF_MONEY_OFFSET","FIRE_RED_OBSF_MONEY_LENGTH","EMERALD_OBSF_MONEY_OFFSET","EMERALD_OBSF_MONEY_LENGTH","FIRE_RED_XOR_KEY_OFFSET","FIRE_RED_XOR_KEY_LENGTH","EMERALD_XOR_KEY_OFFSET","EMERALD_XOR_KEY_LENGTH","FIRE_RED_ITEM_OFFSET","FIRE_RED_ITEM_LENGTH","EMERALD_ITEM_OFFSET","EMERALD_ITEM_LENGTH","FIRE_RED_KEY_ITEM_OFFSET","FIRE_RED_KEY_ITEM_LENGTH","EMERALD_KEY_ITEM_OFFSET","EMERALD_KEY_ITEM_LENGTH","FIRE_RED_BALL_OFFSET","FIRE_RED_BALL_LENGTH","EMERALD_BALL_OFFSET","EMERALD_BALL_LENGTH","FIRE_RED_TM_OFFSET","FIRE_RED_TM_LENGTH","EMERALD_TM_OFFSET","EMERALD_TM_LENGTH","FIRE_RED_BERRIES_OFFSET","FIRE_RED_BERRIES_LENGTH","EMERALD_BERRIES_OFFSET","EMERALD_BERRIES_LENGTH","money","itemPocket","Map","keyItemsPocket","ballItemPocket","tmCase","berryPocket","game","readEmeraldData","readFireRedData","clear","save2Start","xorKey32","xorKey16","read16","save1Start","readItemSection","lastGame","isLoadingScreen","writeDataToEmerald","writeDataToFireRed","size","set","hasRocksmash","hasWhirldpool","hasBodyslam","delete","writeItemSection","hasRocksmash1","hasWhirldpool1","hasBodyslam1","offset","storeTo","item","ballQuantity","store","storeArr","quantity","item1","ITEM_DATA","Nothing","number","quantity1","badgeSync","FIRE_RED_BASE_FLAG_OFFSET","FIRE_RED_BADGE1_OFFSET","FIRE_RED_BADGE2_OFFSET","FIRE_RED_BADGE3_OFFSET","FIRE_RED_BADGE4_OFFSET","FIRE_RED_BADGE5_OFFSET","FIRE_RED_BADGE6_OFFSET","FIRE_RED_BADGE7_OFFSET","FIRE_RED_BADGE8_OFFSET","FIRE_RED_RUNNING_SHOE_OFFSET","FIRE_RED_POKEDEX_OFFSET","FIRE_RED_NATIONAL_DEX_OFFSET","FIRE_RED_BADGE_OFFSETS","FIRE_RED_BIKE_OBTAINED_OFFSET","EMERALD_BASE_FLAGS_OFFSET","EMERALD_BADGE1_OFFSET","EMERALD_BADGE2_OFFSET","EMERALD_BADGE3_OFFSET","EMERALD_BADGE4_OFFSET","EMERALD_BADGE5_OFFSET","EMERALD_BADGE6_OFFSET","EMERALD_BADGE7_OFFSET","EMERALD_BADGE8_OFFSET","EMERALD_RUNNING_SHOE_OFFSET","EMERALD_POKEDEX_OFFSET","EMERALD_NATIONAL_DEX_OFFSET","EMERALD_BADGE_OFFSETS","EMERALD_BASE_VAR_OFFSET","FIRE_RED_BASE_VAR_OFFSET","EMERALD_REPEL_STEPS_OFFSET","FIRE_RED_REPEL_STEPS_OFFSET","EMERALD_STARTER_CHOICE_OFFSET","FIRE_RED_STARTER_CHOICE_OFFSET","badge1","badge2","badge3","badge4","badge5","badge6","badge7","badge8","hasRunningShoes","HMState","repelSteps","starterChoice","modifyBadge","badgeNumber","shouldGiveOrRemoveBit","modifySystemFlag","modifyRunningShoes","manager","savePtr","sysFlagOffset","readSystemFlag","baseVarOffset","canFlash","canCut","canFly","canStrength","canSurf","canSmash","canWaterfall","canDive","canWhirlpool","saveOffset","sectionOffset","flagOffset","flagBit","Math","ceil","toString","padStart","reverse","value","byteArr","parseInt","join","readEmeraldFlags","readCrystalFlags","readFireRedFlags","evaluate","writeEmeraldFlags","writeCrystalFlags","writeFireRedFlags","updatedBadges","updateBadges","badges"],"version":3,"file":"index.67b5a77b.js.map"}