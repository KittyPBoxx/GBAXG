{"mappings":"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","sources":["dist/Cheat/EmulationCoreHacks.js"],"sourcesContent":["/**\n * Random Warp Script\n */\n\n// Ruby/Saphire (0x020297f0) where to find current warp\n\nvar isWarping = false;\nvar switchingGameState = 0; // 0 - Not Switching Game, \n                            // 1 - Playing exit transition before switch\n                            // 2 - Playing enterance after switch \nvar randomWarpsEnabled = true;\n\n/******************/\n/* Warp Addresses */\n/******************/\n/**\n *  Order of events for a warp script\n * \n *  1) A player steps on a warp tile\n *  2) A write8 is perforemed to bank, then map, then warp for current game\n *  3) Several read8s are performed to bank, then map, then warp \n *  4) Exit animation is played (i.e walking through a door) and screen fades to black\n *  5) A write32 is done to the last bank address\n *  6) New map is loaded and fades in then enterance animation is played \n * \n * \n *  Warp flow:\n * \n *  Within game:\n *  Wait for write to warp address -> switch to warping state -> wait for next read from warp address -> make save state -> before reading overwrite it -> continue  \n * \n *  To another game:\n *  Wait for write to warp address -> switch to warping state -> wait for next read from warp address -> take a save state -> increment game state -> resume playing ->\n *  wait for write to previous warp address (player exit map in first game) -> load state from different game (copying data accross) that was take just before warp ->\n *  make screen black -> overwrite next warp location -> increment warp state ->  wait for write to previous warp address (player exit map in load state from second game) -> \n *  make screen visible -> continue\n */\nconst FIRE_RED_LAST_BANK = 0x2031DB4;\n\nconst FIRE_RED_CURRENT_BANK = 0x2031dbc;\nconst FIRE_RED_CURRENT_MAP  = 0x2031dbd;\nconst FIRE_RED_CURRENT_WARP = 0x2031dbe;\n\nconst EMERALD_LAST_BANK = 0x020322DC;\n\nconst EMERALD_CURRENT_BANK = 0x20322e4;\nconst EMERALD_CURRENT_MAP  = 0x20322e5;\nconst EMERALD_CURRENT_WARP = 0x20322e6;\n\nconst EMERALD_MAP_TYPE = 0x203732F; // Used for enabling teleports/fly anywhere (0x2 for city, 0x4 for underground) \nconst FIRE_RED_MAP_TYPE = 0x2036E13; \n\nGameBoyAdvanceCPU.prototype.write32WithoutIntercept = GameBoyAdvanceCPU.prototype.write32;\nGameBoyAdvanceCPU.prototype.write32 = function (address, data) { \n\n    if (switchingGameState != 0) {\n\n        if (switchingGameState == 1) {\n\n            if (((address == FIRE_RED_LAST_BANK) &&  IodineGUI.Iodine.IOCore.cartridge.romCode === \"FR\") || \n                ((address == EMERALD_LAST_BANK && (IodineGUI.Iodine.IOCore.cartridge.romCode === \"E\" || IodineGUI.Iodine.IOCore.cartridge.romCode === \"C\"))))  {\n\n                    IodineGUI.Iodine.pause();\n                    let beforeRomCode = IodineGUI.Iodine.IOCore.cartridge.romCode;\n                    let partySlice = readWRAMSlice(beforeRomCode == \"E\" || beforeRomCode == \"C\" ? EMERALD_PARTY_OFFSET : FIRE_RED_PARTY_OFFSET, PLAYER_PARTY_LENGTH);\n                    let playerNameAndState = dynamicMemorySlice(beforeRomCode == \"E\" || beforeRomCode == \"C\" ? EMERALD_SAVE_2_PTR : FIRE_RED_SAVE_2_PTR, NAME_STATE_OFFSET, NAME_STATE_LENGTH);\n                    let idAndPlayTime = dynamicMemorySlice(beforeRomCode == \"E\" || beforeRomCode == \"C\" ? EMERALD_SAVE_2_PTR : FIRE_RED_SAVE_2_PTR, ID_TIME_OFFSET, ID_TIME_LENGTH);\n                    let bagStoreage = new BagStoreage();\n                    bagStoreage.readData(beforeRomCode);\n        \n                    IodineGUI.Iodine.saveStateManager.loadState(gameSwitchingWarp.toRomCode);\n        \n                    if (gameSwitchingWarp.toRomCode == \"E\" || gameSwitchingWarp.toRomCode == \"C\") {\n                        this.write8(EMERALD_CURRENT_BANK, gameSwitchingWarp.toBank);\n                        this.write8(EMERALD_CURRENT_MAP, gameSwitchingWarp.toMap);\n                        this.write8(EMERALD_CURRENT_WARP, gameSwitchingWarp.toWarpNo);\n                    } else {\n                        this.write8(FIRE_RED_CURRENT_BANK, gameSwitchingWarp.toBank);\n                        this.write8(FIRE_RED_CURRENT_MAP, gameSwitchingWarp.toMap);\n                        this.write8(FIRE_RED_CURRENT_WARP, gameSwitchingWarp.toWarpNo);\n                    }\n                    let currentRomCode = IodineGUI.Iodine.IOCore.cartridge.romCode; // Changed becuase of load state\n                    spliceWRAM(currentRomCode == \"E\" || currentRomCode == \"C\" ? EMERALD_PARTY_OFFSET : FIRE_RED_PARTY_OFFSET, PLAYER_PARTY_LENGTH, partySlice);\n                    dynamicMemorySplice(currentRomCode == \"E\" || currentRomCode == \"C\" ? EMERALD_SAVE_2_PTR : FIRE_RED_SAVE_2_PTR, NAME_STATE_OFFSET, NAME_STATE_LENGTH, playerNameAndState);\n                    dynamicMemorySplice(currentRomCode == \"E\" || currentRomCode == \"C\" ? EMERALD_SAVE_2_PTR : FIRE_RED_SAVE_2_PTR, ID_TIME_OFFSET, ID_TIME_LENGTH, idAndPlayTime);\n                    bagStoreage.writeData(currentRomCode, beforeRomCode);\n        \n                    IodineGUI.mixerInput.volume = 0.0\n                    switchingGameState = 2;\n                    let elmnt = document.getElementById(\"emulator_target\");\n                    elmnt.classList.add(\"faded\")\n                    IodineGUI.Iodine.play();\n                    return;\n\n            }\n\n        }\n\n\n        if (switchingGameState == 2) {\n            if (((address == FIRE_RED_LAST_BANK) &&  IodineGUI.Iodine.IOCore.cartridge.romCode === \"FR\") || \n            ((address == EMERALD_LAST_BANK && (IodineGUI.Iodine.IOCore.cartridge.romCode === \"E\" || IodineGUI.Iodine.IOCore.cartridge.romCode === \"C\"))))  {\n\n                IodineGUI.mixerInput.volume = 0.1;\n                let elmnt = document.getElementById(\"emulator_target\");\n                elmnt.classList.remove(\"faded\");\n                switchingGameState = 0;\n                isWarping = false;\n                gameSwitchingWarp = null;\n\n            }\n        }\n\n    }\n\n    this.write32WithoutIntercept(address, data);\n}\n\n// GameBoyAdvanceCPU.prototype.write16WithoutIntercept = GameBoyAdvanceCPU.prototype.write16;\n// GameBoyAdvanceCPU.prototype.write16 = function (address, data) { \n\n//     if (address == EMERALD_LAST_BANK) {\n//         console.log(\"writing 16\");\n//     }\n\n//     this.write16WithoutIntercept(address, data);\n// }\n\n GameBoyAdvanceCPU.prototype.write8WithoutIntercept = GameBoyAdvanceCPU.prototype.write8;\n GameBoyAdvanceCPU.prototype.write8 = function (address, data) { \n\n    if ((address == FIRE_RED_CURRENT_WARP) && IodineGUI.Iodine.IOCore.cartridge.romCode === \"FR\" )\n    {\n        isWarping = randomWarpsEnabled;\n    } \n    else if ((address == EMERALD_CURRENT_WARP) && (IodineGUI.Iodine.IOCore.cartridge.romCode === \"E\" || IodineGUI.Iodine.IOCore.cartridge.romCode === \"C\")) \n    {\n        isWarping = randomWarpsEnabled;\n    } \n    \n    this.write8WithoutIntercept(address, data);\n\n }\n\n\nconst EMERALD_MOVEMENT_MODE_OFFSET = 0x02037590;\nconst FIRE_RED_MOVEMENT_MODE_OFFSET = 0x02037078;\nconst MOVEMENT_MODE_WALK = 0x01;\nconst MOVEMENT_MODE_BIKE = 0x02;\nconst MOVEMENT_MODE_SURF = 0x08;\nvar autoBike = false; \nvar teleportAnywhere = false;\nGameBoyAdvanceCPU.prototype.read8WithoutIntercept = GameBoyAdvanceCPU.prototype.read8;\nGameBoyAdvanceCPU.prototype.read8 = function (address) {\n\n    if (autoBike) {\n        if (address == FIRE_RED_MOVEMENT_MODE_OFFSET && IodineGUI.Iodine.IOCore.cartridge.romCode === \"FR\"){\n            let current = this.read8WithoutIntercept(address);\n            return current <= MOVEMENT_MODE_WALK ? MOVEMENT_MODE_BIKE : current;\n        } else if (address == EMERALD_MOVEMENT_MODE_OFFSET){\n            let current = this.read8WithoutIntercept(address);\n            return current <= MOVEMENT_MODE_WALK ? MOVEMENT_MODE_BIKE : current;\n        }\n    }\n\n    if (teleportAnywhere) {\n        if (address == FIRE_RED_MAP_TYPE && IodineGUI.Iodine.IOCore.cartridge.romCode === \"FR\") {\n            return 2;\n        } else if (address == EMERALD_MAP_TYPE){\n            return 2;\n        }\n    }\n\n    if (!isWarping) return this.read8WithoutIntercept(address);\n\n    if (address == FIRE_RED_CURRENT_BANK && IodineGUI.Iodine.IOCore.cartridge.romCode === \"FR\")\n    {\n        // Base game FR/LG\n        address = this.handleWarpRedirection(address, IodineGUI.Iodine.IOCore.cartridge.romCode);\n    } \n    else if (address == EMERALD_CURRENT_BANK && (IodineGUI.Iodine.IOCore.cartridge.romCode === \"E\" || IodineGUI.Iodine.IOCore.cartridge.romCode === \"C\")) \n    {\n        // Base game Emerald\n        address = this.handleWarpRedirection(address, IodineGUI.Iodine.IOCore.cartridge.romCode);\n    }\n\n    return this.read8WithoutIntercept(address);\n}\n\nvar gameSwitchingWarp = null;\nvar reverseNextWarp = false; // Set true when loading a save state that was going through a warp\nvar forceNextWarp = null;\nGameBoyAdvanceCPU.prototype.handleWarpRedirection = function (address, romCode) {\n\n    let bank = this.read8WithoutIntercept(address);\n    let map = this.read8WithoutIntercept(address + 1);\n    let warpNo = this.read8WithoutIntercept(address + 2);\n\n    // Avoid scripted warps, route connections without zone e.t.c\n    if (warpNo == 255) { return address; }\n    if (switchingGameState == 2 || switchingGameState==1) { return address }\n\n\n    let pkWarp = null;\n    let trigger = romCode + \",\" + bank + \",\" + map + \",\" + warpNo;\n\n    if (forceNextWarp) {\n        let toParts = forceNextWarp.split(\",\");\n        pkWarp = new PKWarp(trigger, toParts[0], toParts[1], toParts[2], toParts[3], forceNextWarp)\n        reverseNextWarp = false;\n        forceNextWarp = null;\n    } else if(reverseNextWarp && warpList.get(trigger)) {\n        let source = warpList.get(trigger).source;\n        let toParts = source.split(\",\");\n        pkWarp = new PKWarp(trigger, toParts[0], toParts[1], toParts[2], toParts[3], source)\n        reverseNextWarp = false;\n    } else {\n        pkWarp = warpList.get(trigger);\n        console.log(\"Warping triggered for \" + trigger); \n    }\n\n    if (pkWarp) {\n\n        IodineGUI.Iodine.pause();\n\n        IodineGUI.Iodine.saveStateManager.saveState(romCode, true);\n        if (pkWarp.toRomCode[0] != pkWarp.trigger[0]) {\n            // Switching Games\n            switchingGameState = 1;\n            gameSwitchingWarp = pkWarp;\n            address = pkWarp.toRomCode == \"E\" || pkWarp.toRomCode == \"C\" ? EMERALD_CURRENT_BANK : FIRE_RED_CURRENT_BANK;\n        } else {\n\n            if (pkWarp.toRomCode == \"E\" || pkWarp.toRomCode == \"C\") {\n                this.write8(EMERALD_CURRENT_BANK, pkWarp.toBank);\n                this.write8(EMERALD_CURRENT_MAP, pkWarp.toMap);\n                this.write8(EMERALD_CURRENT_WARP, pkWarp.toWarpNo);\n                address = EMERALD_CURRENT_BANK;\n            } else {\n                this.write8(FIRE_RED_CURRENT_BANK, pkWarp.toBank);\n                this.write8(FIRE_RED_CURRENT_MAP, pkWarp.toMap);\n                this.write8(FIRE_RED_CURRENT_WARP, pkWarp.toWarpNo);\n                address = FIRE_RED_CURRENT_BANK;\n            }\n\n        }\n\n        IodineGUI.Iodine.play();\n\n        console.log(\"Warping sending to \" + pkWarp.toRomCode + \",\" + pkWarp.toBank + \",\" + pkWarp.toMap + \",\" + pkWarp.toWarpNo); \n    } else {\n        console.log(\"Warping sending to vanilla\"); \n    }\n    \n    isWarping = false;\n\n    return address;\n}\n\nasync function quickSpeedUp(duration) {\n    let currentSpeed = IodineGUI.Iodine.getSpeed();\n    IodineGUI.Iodine.setSpeed(4);\n    IodineGUI.mixerInput.volume = 0.0\n    await delay(duration);\n    IodineGUI.Iodine.setSpeed(currentSpeed);\n    IodineGUI.mixerInput.volume = 0.1\n}\n\nfunction quickHideScreen() {\n    let elmnt = document.getElementById(\"emulator_target\");\n    elmnt.classList.remove(\"quick-hide\");\n    elmnt.offsetWidth\n    elmnt.classList.add(\"quick-hide\")\n}\n\nfunction readWRAMSlice(address, length) {\n    let startAddress = (address - 0x02000000);\n    let endAddress = startAddress + length;\n    return IodineGUI.Iodine.IOCore.memory.externalRAM.slice(startAddress, endAddress);\n}\nfunction spliceWRAM(address, length, data) {\n    let startAddress = (address - 0x02000000);\n    for (let i = 0; i<length; i++) {\n        IodineGUI.Iodine.IOCore.memory.externalRAM[startAddress + i] = data[i];\n    }\n}\n\n\n/**********************/\n/* Walk through walls */  \n/**********************/\n/**\n * Patches out an area in the ROM \n */\nvar walkThroughWalls = false;\nvar frOffset = 364078; // set to 364098 for 1.1 version\n\nGameBoyAdvanceMultiCartridge.prototype.initializeWithoutIntercept = GameBoyAdvanceMultiCartridge.prototype.initialize;\nGameBoyAdvanceMultiCartridge.prototype.initialize = function (startingRom) {\n    this.initializeWithoutIntercept(startingRom);\n\n    // if 0x(80000)BC == 1 then we have US 1.1 instead of US 1.0\n    if (this.cartriges.get(\"FR\") && this.cartriges.get(\"FR\").ROM[0xBC]) {\n        frOffset = 364098\n    }\n} \n\nGameBoyAdvanceMultiCartridge.prototype.readROM16WithoutIntercept = GameBoyAdvanceMultiCartridge.prototype.readROM16;\nGameBoyAdvanceMultiCartridge.prototype.readROM16 = function (address) {\n\n    if (!walkThroughWalls) { return this.readROM16WithoutIntercept(address); }\n\n    if (address == frOffset && this.romCode == \"FR\") { \n        return 0x2100; \n    } else if (address == 601094 && this.romCode == \"C\") {\n        return 0x2000; \n    } else if (address == 601094 && this.romCode == \"E\") {\n        return 0x2000;\n    }\n    \n    return this.readROM16WithoutIntercept(address);\n}\n\n// FIRE RED - isSurfing 0x02036e40 (0x33 = on land, 0x11 on water)\n// EMERALD -            0x0203735B\nconst FIRE_RED_CURRENT_GROUND_OFFSET = 0x02036e43;\nconst EMERALD_CURRENT_GROUND_OFFSET = 0x0203735B;\nconst CURRENT_GROUND_LAND = 0x33;\nconst CURRENT_GROUND_WATER = 0x11;\n\nconst EMERALD_STATE_OFFSET = 0x02037591;\nconst FIRE_RED_STATE_OFFSET = 0x02037079;\nfunction forcePlayerState(state) {\n\n    if(!IodineGUI.Iodine.IOCore) return;\n\n    if (IodineGUI.Iodine.IOCore.cartridge.romCode === \"FR\") { \n        //IodineGUI.Iodine.IOCore.cpu.write8(FIRE_RED_MOVEMENT_MODE_OFFSET, state);\n        IodineGUI.Iodine.IOCore.cpu.write8(FIRE_RED_STATE_OFFSET, state); \n        if (state == MOVEMENT_MODE_SURF) {\n            IodineGUI.Iodine.IOCore.cpu.write8(FIRE_RED_CURRENT_GROUND_OFFSET, CURRENT_GROUND_WATER); \n        } else {\n            IodineGUI.Iodine.IOCore.cpu.write8(FIRE_RED_CURRENT_GROUND_OFFSET, CURRENT_GROUND_LAND); \n        }\n    } else if (IodineGUI.Iodine.IOCore.cartridge.romCode === \"C\") {\n        IodineGUI.Iodine.IOCore.cpu.write8(EMERALD_MOVEMENT_MODE_OFFSET, state);\n        IodineGUI.Iodine.IOCore.cpu.write8(EMERALD_STATE_OFFSET, state); \n        if (state == MOVEMENT_MODE_SURF) {\n            IodineGUI.Iodine.IOCore.cpu.write8(EMERALD_CURRENT_GROUND_OFFSET, CURRENT_GROUND_WATER); \n        } else {\n            IodineGUI.Iodine.IOCore.cpu.write8(EMERALD_CURRENT_GROUND_OFFSET, CURRENT_GROUND_LAND); \n        }\n    } else if (IodineGUI.Iodine.IOCore.cartridge.romCode === \"E\") {\n        IodineGUI.Iodine.IOCore.cpu.write8(EMERALD_MOVEMENT_MODE_OFFSET, state);\n        IodineGUI.Iodine.IOCore.cpu.write8(EMERALD_STATE_OFFSET, state); \n        if (state == MOVEMENT_MODE_SURF) {\n            IodineGUI.Iodine.IOCore.cpu.write8(EMERALD_CURRENT_GROUND_OFFSET, CURRENT_GROUND_WATER); \n        } else {\n            IodineGUI.Iodine.IOCore.cpu.write8(EMERALD_CURRENT_GROUND_OFFSET, CURRENT_GROUND_LAND); \n        }\n    }\n}\n\nfunction whiteoutTeam() {\n    if (IodineGUI.Iodine.IOCore.cartridge.romCode === \"FR\") { \n        // Poison First Mon\n        IodineGUI.Iodine.IOCore.cpu.write8(FIRE_RED_PARTY_OFFSET + 80, 0x08);\n        // Set First Mon HP to 1 \n        IodineGUI.Iodine.IOCore.cpu.write16(FIRE_RED_PARTY_OFFSET + 86, 0x01);\n        // Set other mons fainted\n        IodineGUI.Iodine.IOCore.cpu.write16(FIRE_RED_PARTY_OFFSET + 86 + 100, 0x00);\n        IodineGUI.Iodine.IOCore.cpu.write16(FIRE_RED_PARTY_OFFSET + 86 + 200, 0x00);\n        IodineGUI.Iodine.IOCore.cpu.write16(FIRE_RED_PARTY_OFFSET + 86 + 300, 0x00);\n        IodineGUI.Iodine.IOCore.cpu.write16(FIRE_RED_PARTY_OFFSET + 86 + 400, 0x00);\n        IodineGUI.Iodine.IOCore.cpu.write16(FIRE_RED_PARTY_OFFSET + 86 + 500, 0x00);\n    } else if (IodineGUI.Iodine.IOCore.cartridge.romCode === \"C\" || IodineGUI.Iodine.IOCore.cartridge.romCode === \"E\") {\n       // Poison First Mon\n       IodineGUI.Iodine.IOCore.cpu.write8(EMERALD_PARTY_OFFSET + 80, 0x08);\n       // Set First Mon HP to 1 \n       IodineGUI.Iodine.IOCore.cpu.write16(EMERALD_PARTY_OFFSET + 86, 0x01);\n       // Set other mons fainted\n       IodineGUI.Iodine.IOCore.cpu.write16(EMERALD_PARTY_OFFSET + 86 + 100, 0x00);\n       IodineGUI.Iodine.IOCore.cpu.write16(EMERALD_PARTY_OFFSET + 86 + 200, 0x00);\n       IodineGUI.Iodine.IOCore.cpu.write16(EMERALD_PARTY_OFFSET + 86 + 300, 0x00);\n       IodineGUI.Iodine.IOCore.cpu.write16(EMERALD_PARTY_OFFSET + 86 + 400, 0x00);\n       IodineGUI.Iodine.IOCore.cpu.write16(EMERALD_PARTY_OFFSET + 86 + 500, 0x00);\n    }\n}\n\n/******************/\n/* Data Addresses */\n/******************/\n/**\n *  Addresses for save data, Team is not copied here because we use where it is statically stored in memory\n *  Addresses are offsets from the 32bit addresses that can be found using the pointers (ptr locations are static)\n *  Money is xor'd against 32bit xor key, item quantity is xor'd against the first 2 bytes of that key.\n *  \n *  Dynamicly Addressed memory means the three sections of data move in memory (hence we need to look the up with ptrs)\n *  These change each time the bag is accessed or a warp is triggered (and at various other times)\n * \n *  There are 3 dynamic sections. SAV1 (mostly relating to team and items)\n *  SAV2 (storing the xor key, and trainer data, play time, settings, seen mons e.t.c)\n *  We don't deal with SAV3 but it's mostly boxed pokemon / box config   \n */\n\nconst EMERALD_PARTY_OFFSET = 0x020244EC;\nconst FIRE_RED_PARTY_OFFSET = 0x02024284;\nconst PLAYER_PARTY_LENGTH = 0x258;\n\n// DYNAMIC SAV1 PTRs\nconst FIRE_RED_SAVE_1_PTR = 0x03005008;\nconst EMERALD_SAVE_1_PTR = 0x03005D8C;\n// MONEY \nconst FIRE_RED_OBSF_MONEY_OFFSET = 0x0290; //(0x0218)???\nconst FIRE_RED_OBSF_MONEY_LENGTH = 4;\nconst EMERALD_OBSF_MONEY_OFFSET = 0x0490; //(0x0494)???\nconst EMERALD_OBSF_MONEY_LENGTH = 4;\n\n// DYNAMIC SAV2 PTRs\nconst FIRE_RED_SAVE_2_PTR = 0x0300500C;\nconst EMERALD_SAVE_2_PTR = 0x03005d90;\n// Name + Gender / If on bike or surfing\nconst NAME_STATE_OFFSET = 0;\nconst NAME_STATE_LENGTH = 9;\n// Trainer id and time (last 3 bytes button mode + text speed + sound/battle scene)\nconst ID_TIME_OFFSET = 10;\nconst ID_TIME_LENGTH = 12;\n// XOR Key\nconst FIRE_RED_XOR_KEY_OFFSET = 0x0F20;\nconst FIRE_RED_XOR_KEY_LENGTH = 4;\nconst EMERALD_XOR_KEY_OFFSET = 0xAC;\nconst EMERALD_XOR_KEY_LENGTH = 4;\n\n// ITEM POCKET\nconst FIRE_RED_ITEM_OFFSET = 0x0310;\nconst FIRE_RED_ITEM_LENGTH = 168;\nconst EMERALD_ITEM_OFFSET = 0x0560;\nconst EMERALD_ITEM_LENGTH = 120;\n\n// KEY ITEM POCKET\nconst FIRE_RED_KEY_ITEM_OFFSET = 0x03B8;\nconst FIRE_RED_KEY_ITEM_LENGTH = 120;\nconst EMERALD_KEY_ITEM_OFFSET = 0x05D8;\nconst EMERALD_KEY_ITEM_LENGTH = 120;\n\n// BALLS\nconst FIRE_RED_BALL_OFFSET = 0x0430;\nconst FIRE_RED_BALL_LENGTH = 52;\nconst EMERALD_BALL_OFFSET = 0x0650;\nconst EMERALD_BALL_LENGTH = 64;\n\n// TM Case\nconst FIRE_RED_TM_OFFSET = 0x0464;\nconst FIRE_RED_TM_LENGTH = 232;\nconst EMERALD_TM_OFFSET = 0x0690;\nconst EMERALD_TM_LENGTH = 256;\n\n// Berry Pocket\nconst FIRE_RED_BERRIES_OFFSET = 0x054C;\nconst FIRE_RED_BERRIES_LENGTH = 172;\nconst EMERALD_BERRIES_OFFSET = 0x0790;\nconst EMERALD_BERRIES_LENGTH = 184;\n\nfunction dynamicMemorySlice(dynamicPointer, offsetInDynamic, length) {\n    let dynamicBlock = IodineGUI.Iodine.IOCore.cpu.read32(dynamicPointer);\n    let startAddress = (dynamicBlock + offsetInDynamic - 0x02000000);\n    let endAddress = startAddress + length;\n    return IodineGUI.Iodine.IOCore.memory.externalRAM.slice(startAddress, endAddress);    \n}\n\nfunction dynamicMemorySplice(dynamicPointer, offsetInDynamic, length, data) {\n    let dynamicBlock = IodineGUI.Iodine.IOCore.cpu.read32(dynamicPointer);\n    let startAddress = (dynamicBlock + offsetInDynamic - 0x02000000);\n    for (let i = 0; i<length; i++) {\n        IodineGUI.Iodine.IOCore.memory.externalRAM[startAddress + i] = data[i];\n    }\n}\n\n/**************************/\n/* Bag Storage Management */\n/**************************/\n/**\n * \n *  Bag storeage requires special handling as quantities are xor'd with a special key \n *  that changes and will be different for each game\n * \n *  Additionally, storage size differs between games for now excess items will just be \n *  lost so we don't have to worry about storing additional item data outside the games\n * \n *  Additionally, additionally we do some special handling like, give the berry pouch if \n *  berries are already collected, or give a bike if they have one in the other game\n *\n */\n\nfunction BagStoreage() {\n    this.money = null;\n    //this.coins = null;\n\n    //this.pcItems = new Map();\n    this.itemPocket = new Map();\n    this.keyItemsPocket = new Map();\n    this.ballItemPocket = new Map();\n    this.tmCase = new Map();\n    this.berryPocket = new Map();\n}\n\nBagStoreage.prototype.readData = function (game) {\n    if (game == \"E\" || game == \"C\") {\n        this.readEmeraldData();\n    } else {\n        this.readFireRedData();\n    }\n}\n\nBagStoreage.prototype.readFireRedData = function () {\n    this.itemPocket.clear();\n    this.keyItemsPocket.clear();\n    this.ballItemPocket.clear();\n    this.tmCase.clear();\n    this.berryPocket.clear();\n\n    let save2Start = IodineGUI.Iodine.IOCore.cpu.read32(FIRE_RED_SAVE_2_PTR);\n    let xorKey32 = IodineGUI.Iodine.IOCore.cpu.read32(save2Start + FIRE_RED_XOR_KEY_OFFSET);\n    let xorKey16 = IodineGUI.Iodine.IOCore.cpu.read16(save2Start + FIRE_RED_XOR_KEY_OFFSET);\n\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(FIRE_RED_SAVE_1_PTR);\n    this.money = IodineGUI.Iodine.IOCore.cpu.read32(save1Start + FIRE_RED_OBSF_MONEY_OFFSET) ^ xorKey32;\n\n    // read items\n    this.readItemSection(save1Start, FIRE_RED_ITEM_OFFSET, FIRE_RED_ITEM_LENGTH, this.itemPocket, xorKey16);\n\n    // read key items\n    this.readItemSection(save1Start, FIRE_RED_KEY_ITEM_OFFSET, FIRE_RED_KEY_ITEM_LENGTH, this.keyItemsPocket, xorKey16);\n\n    // read balls\n    this.readItemSection(save1Start, FIRE_RED_BALL_OFFSET, FIRE_RED_BALL_LENGTH, this.ballItemPocket, xorKey16);\n\n    // read tms\n    this.readItemSection(save1Start, FIRE_RED_TM_OFFSET, FIRE_RED_TM_LENGTH, this.tmCase, xorKey16);\n\n    // read berries\n    this.readItemSection(save1Start, FIRE_RED_BERRIES_OFFSET, FIRE_RED_BERRIES_LENGTH, this.berryPocket, xorKey16);\n}\n\nBagStoreage.prototype.readEmeraldData = function () {\n    this.itemPocket.clear();\n    this.keyItemsPocket.clear();\n    this.ballItemPocket.clear();\n    this.tmCase.clear();\n    this.berryPocket.clear();\n\n    let save2Start = IodineGUI.Iodine.IOCore.cpu.read32(EMERALD_SAVE_2_PTR);\n    let xorKey32 = IodineGUI.Iodine.IOCore.cpu.read32(save2Start + EMERALD_XOR_KEY_OFFSET);\n    let xorKey16 = IodineGUI.Iodine.IOCore.cpu.read16(save2Start + EMERALD_XOR_KEY_OFFSET);\n\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(EMERALD_SAVE_1_PTR);\n    this.money = IodineGUI.Iodine.IOCore.cpu.read32(save1Start + EMERALD_OBSF_MONEY_OFFSET) ^ xorKey32;\n\n    // read items\n    this.readItemSection(save1Start, EMERALD_ITEM_OFFSET, EMERALD_ITEM_LENGTH, this.itemPocket, xorKey16);\n\n    // read key items\n    this.readItemSection(save1Start, EMERALD_KEY_ITEM_OFFSET, EMERALD_KEY_ITEM_LENGTH, this.keyItemsPocket, xorKey16);\n\n    // read balls\n    this.readItemSection(save1Start, EMERALD_BALL_OFFSET, EMERALD_BALL_LENGTH, this.ballItemPocket, xorKey16);\n\n    // read tms\n    this.readItemSection(save1Start, EMERALD_TM_OFFSET, EMERALD_TM_LENGTH, this.tmCase, xorKey16);\n\n    // read berries\n    this.readItemSection(save1Start, EMERALD_BERRIES_OFFSET, EMERALD_BERRIES_LENGTH, this.berryPocket, xorKey16);\n}\n\nBagStoreage.prototype.writeData = function (game, lastGame) {\n    if (game == \"E\" || game == \"C\") {\n        this.writeDataToEmerald(game, lastGame);\n    } else {\n        this.writeDataToFireRed(game, lastGame);\n    }\n}\n\n\nBagStoreage.prototype.writeDataToFireRed = function (game, lastGame) {\n    let save2Start = IodineGUI.Iodine.IOCore.cpu.read32(FIRE_RED_SAVE_2_PTR);\n    let xorKey32 = IodineGUI.Iodine.IOCore.cpu.read32(save2Start + FIRE_RED_XOR_KEY_OFFSET);\n    let xorKey16 = IodineGUI.Iodine.IOCore.cpu.read16(save2Start + FIRE_RED_XOR_KEY_OFFSET);\n\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(FIRE_RED_SAVE_1_PTR);\n\n    IodineGUI.Iodine.IOCore.cpu.write32(save1Start + FIRE_RED_OBSF_MONEY_OFFSET, this.money ^ xorKey32);\n\n    // We need to give the player the berry pocket or tm case if they have some \n    if (this.berryPocket.size >= 1) {\n        this.keyItemsPocket.set(365, 1); // one berry pouch\n    }\n    if (this.tmCase.size >= 1) {\n        this.keyItemsPocket.set(364, 1); // one tm case\n    }\n\n    if (lastGame == \"C\") {\n        // Going from crystal to firered\n        let hasRocksmash = this.tmCase.get(296);\n        let hasWhirldpool = this.tmCase.get(344);\n        let hasBodyslam = this.keyItemsPocket.get(347);\n\n        this.tmCase.delete(296);\n        this.tmCase.delete(344);\n        this.keyItemsPocket.delete(347);\n\n        if(hasRocksmash) this.tmCase.set(344, 1);\n        if(hasWhirldpool) this.keyItemsPocket.set(347, 1); // Unused TM to represent whirldpool\n        if(hasBodyslam) this.tmCase.set(296, 1); \n    } \n\n    // write items\n    this.writeItemSection(save1Start, FIRE_RED_ITEM_OFFSET, FIRE_RED_ITEM_LENGTH, this.itemPocket, xorKey16, true);\n\n    // write key items\n    this.writeItemSection(save1Start, FIRE_RED_KEY_ITEM_OFFSET, FIRE_RED_KEY_ITEM_LENGTH, this.keyItemsPocket, xorKey16, false);\n\n    // write balls\n    this.writeItemSection(save1Start, FIRE_RED_BALL_OFFSET, FIRE_RED_BALL_LENGTH, this.ballItemPocket, xorKey16, true);\n\n    // write tms\n    this.writeItemSection(save1Start, FIRE_RED_TM_OFFSET, FIRE_RED_TM_LENGTH, this.tmCase, xorKey16, true);\n\n    // write berries\n    this.writeItemSection(save1Start, FIRE_RED_BERRIES_OFFSET, FIRE_RED_BERRIES_LENGTH, this.berryPocket, xorKey16, true);\n}\n\nBagStoreage.prototype.writeDataToEmerald = function (game, lastGame) {\n    let save2Start = IodineGUI.Iodine.IOCore.cpu.read32(EMERALD_SAVE_2_PTR);\n    let xorKey32 = IodineGUI.Iodine.IOCore.cpu.read32(save2Start + EMERALD_XOR_KEY_OFFSET);\n    let xorKey16 = IodineGUI.Iodine.IOCore.cpu.read16(save2Start + EMERALD_XOR_KEY_OFFSET);\n\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(EMERALD_SAVE_1_PTR);\n\n    IodineGUI.Iodine.IOCore.cpu.write32(save1Start + EMERALD_OBSF_MONEY_OFFSET, this.money ^ xorKey32);\n\n    // If we have a bike from fire red but not a mach/acro bike from emerald we should get a mach bike \n    if (this.keyItemsPocket.get(360) && !this.keyItemsPocket.get(259) && !this.keyItemsPocket.get(272)) {\n        this.keyItemsPocket.set(259, 1);\n    }\n\n    // If we have HM06/TM08 we need to make sure it's the right hm\n    // In Crystal HM06 is whirlpool and TM08 is Rocksmash\n    // In Emerald and FireRed HM06 is  Rocksmash and TM08 is 'Bulk Up'\n    if (game == \"E\" && lastGame == \"C\") {\n        // Going from crystal to emerald\n\n        let hasRocksmash = this.tmCase.get(296);\n        let hasWhirldpool = this.tmCase.get(344);\n        let hasBodyslam = this.keyItemsPocket.get(347);\n\n        this.tmCase.delete(296);\n        this.tmCase.delete(344);\n        this.keyItemsPocket.delete(347);\n\n        if(hasRocksmash) this.tmCase.set(344, 1);\n        if(hasWhirldpool) this.keyItemsPocket.set(347, 1); // Unused TM to represent whirldpool\n        if(hasBodyslam) this.tmCase.set(296, 1); \n\n    } else if (game == \"C\" && lastGame && lastGame != \"C\") {\n\n        // Going from firered or emerald into crystal\n        let hasRocksmash = this.tmCase.get(344);\n        let hasWhirldpool = this.keyItemsPocket.get(347);\n        let hasBodyslam = this.tmCase.get(296);\n\n        this.tmCase.delete(296);\n        this.tmCase.delete(344);\n        this.keyItemsPocket.delete(347);\n\n        if(hasRocksmash) this.tmCase.set(296, 1);\n        if(hasWhirldpool) this.tmCase.set(344, 1); // Unused TM to represent bodyslam\n        if(hasBodyslam) this.keyItemsPocket.set(347, 1); \n\n    }\n\n    // write items\n    this.writeItemSection(save1Start, EMERALD_ITEM_OFFSET, EMERALD_ITEM_LENGTH, this.itemPocket, xorKey16, true);\n\n    // write key items\n    this.writeItemSection(save1Start, EMERALD_KEY_ITEM_OFFSET, EMERALD_KEY_ITEM_LENGTH, this.keyItemsPocket, xorKey16, false);\n\n    // write balls\n    this.writeItemSection(save1Start, EMERALD_BALL_OFFSET, EMERALD_BALL_LENGTH, this.ballItemPocket, xorKey16, true);\n\n    // write tms\n    this.writeItemSection(save1Start, EMERALD_TM_OFFSET, EMERALD_TM_LENGTH, this.tmCase, xorKey16, true);\n\n    // write berries\n    this.writeItemSection(save1Start, EMERALD_BERRIES_OFFSET, EMERALD_BERRIES_LENGTH, this.berryPocket, xorKey16, true);\n}\n\nBagStoreage.prototype.readItemSection = function(save1Start, offset, length, storeTo, xorKey16) {\n    for (let i = 0;  i < offset + length; i+=4) {\n        let item = IodineGUI.Iodine.IOCore.cpu.read16(save1Start + offset + i);\n\n        if (item == 0) { break; }\n\n        let ballQuantity = IodineGUI.Iodine.IOCore.cpu.read16(save1Start + offset + i + 2) ^ xorKey16;\n        storeTo.set(item, ballQuantity);\n    }\n}\n\nBagStoreage.prototype.writeItemSection = function(save1Start, offset, length, store, xorKey16, clear) {\n\n    var storeArr = [...store];\n\n    for (let i = 0;  i < offset + length; i+=4) {\n\n        let index = i / 4;\n        if (storeArr.length > index) {\n\n            let item = (storeArr[i / 4])[0];\n            let quantity = (storeArr[i / 4])[1] ^ xorKey16;\n\n            IodineGUI.Iodine.IOCore.cpu.write16(save1Start + offset + i, item);\n            IodineGUI.Iodine.IOCore.cpu.write16(save1Start + offset + i + 2, quantity);\n\n        } else {\n\n            // No more items to copy\n            if(clear) {\n                let item = ITEM_DATA.Nothing.number;\n                let quantity = 0 ^ xorKey16;\n                \n                IodineGUI.Iodine.IOCore.cpu.write16(save1Start + offset + i, item);\n                IodineGUI.Iodine.IOCore.cpu.write16(save1Start + offset + i + 2, quantity);\n            } else {\n                break;\n            }\n        }\n    }\n}"],"names":["isWarping","switchingGameState","randomWarpsEnabled","FIRE_RED_LAST_BANK","FIRE_RED_CURRENT_BANK","FIRE_RED_CURRENT_MAP","FIRE_RED_CURRENT_WARP","EMERALD_LAST_BANK","EMERALD_CURRENT_BANK","EMERALD_CURRENT_MAP","EMERALD_CURRENT_WARP","EMERALD_MAP_TYPE","FIRE_RED_MAP_TYPE","GameBoyAdvanceCPU","prototype","write32WithoutIntercept","write32","address","data","IodineGUI","Iodine","IOCore","cartridge","romCode","pause","beforeRomCode","partySlice","readWRAMSlice","EMERALD_PARTY_OFFSET","FIRE_RED_PARTY_OFFSET","PLAYER_PARTY_LENGTH","playerNameAndState","dynamicMemorySlice","EMERALD_SAVE_2_PTR","FIRE_RED_SAVE_2_PTR","NAME_STATE_OFFSET","NAME_STATE_LENGTH","idAndPlayTime","ID_TIME_OFFSET","ID_TIME_LENGTH","bagStoreage","BagStoreage","readData","saveStateManager","loadState","gameSwitchingWarp","toRomCode","this","write8","toBank","toMap","toWarpNo","currentRomCode","spliceWRAM","dynamicMemorySplice","writeData","mixerInput","volume","document","getElementById","classList","add","play","remove","write8WithoutIntercept","EMERALD_MOVEMENT_MODE_OFFSET","FIRE_RED_MOVEMENT_MODE_OFFSET","MOVEMENT_MODE_WALK","MOVEMENT_MODE_BIKE","MOVEMENT_MODE_SURF","autoBike","teleportAnywhere","read8WithoutIntercept","read8","current","current1","handleWarpRedirection","reverseNextWarp","forceNextWarp","async","quickSpeedUp","duration","currentSpeed","getSpeed","setSpeed","delay","quickHideScreen","elmnt","offsetWidth","length","startAddress","endAddress","memory","externalRAM","slice","i","bank","map","warpNo","pkWarp","trigger","toParts","split","PKWarp","warpList","get","source","toParts1","console","log","saveState","walkThroughWalls","frOffset","GameBoyAdvanceMultiCartridge","initializeWithoutIntercept","initialize","startingRom","cartriges","ROM","readROM16WithoutIntercept","readROM16","FIRE_RED_CURRENT_GROUND_OFFSET","EMERALD_CURRENT_GROUND_OFFSET","CURRENT_GROUND_LAND","CURRENT_GROUND_WATER","EMERALD_STATE_OFFSET","FIRE_RED_STATE_OFFSET","forcePlayerState","state","cpu","whiteoutTeam","write16","FIRE_RED_SAVE_1_PTR","EMERALD_SAVE_1_PTR","FIRE_RED_OBSF_MONEY_OFFSET","FIRE_RED_OBSF_MONEY_LENGTH","EMERALD_OBSF_MONEY_OFFSET","EMERALD_OBSF_MONEY_LENGTH","FIRE_RED_XOR_KEY_OFFSET","FIRE_RED_XOR_KEY_LENGTH","EMERALD_XOR_KEY_OFFSET","EMERALD_XOR_KEY_LENGTH","FIRE_RED_ITEM_OFFSET","FIRE_RED_ITEM_LENGTH","EMERALD_ITEM_OFFSET","EMERALD_ITEM_LENGTH","FIRE_RED_KEY_ITEM_OFFSET","FIRE_RED_KEY_ITEM_LENGTH","EMERALD_KEY_ITEM_OFFSET","EMERALD_KEY_ITEM_LENGTH","FIRE_RED_BALL_OFFSET","FIRE_RED_BALL_LENGTH","EMERALD_BALL_OFFSET","EMERALD_BALL_LENGTH","FIRE_RED_TM_OFFSET","FIRE_RED_TM_LENGTH","EMERALD_TM_OFFSET","EMERALD_TM_LENGTH","FIRE_RED_BERRIES_OFFSET","FIRE_RED_BERRIES_LENGTH","EMERALD_BERRIES_OFFSET","EMERALD_BERRIES_LENGTH","dynamicPointer","offsetInDynamic","read32","money","itemPocket","Map","keyItemsPocket","ballItemPocket","tmCase","berryPocket","game","readEmeraldData","readFireRedData","clear","save2Start","xorKey32","xorKey16","read16","save1Start","readItemSection","lastGame","writeDataToEmerald","writeDataToFireRed","size","set","hasRocksmash","hasWhirldpool","hasBodyslam","delete","writeItemSection","hasRocksmash1","hasWhirldpool1","hasBodyslam1","offset","storeTo","item","ballQuantity","store","storeArr","quantity","item1","ITEM_DATA","Nothing","number","quantity1"],"version":3,"file":"index.e1f9c7d4.js.map"}