{"mappings":"AAGC,SAASA,gBACNC,KAAKC,UAAY,GACjBD,KAAKE,mBAAqB,IAAIC,GAClC,CAsEA,SAASC,cAAcC,EAAMC,EAAQC,GACjCP,KAAKK,KAAOA,EACZL,KAAKM,OAASA,EACdN,KAAKO,KAAOA,CAChB,CAgBA,SAASC,mBAAmBD,GACxB,IAAIE,EAAgB,GAKhB,IAAK,IAAIC,EAAI,EAAGA,EAAI,GAAOA,IACvBD,EAAcE,KAAK,GAIvB,IAASD,EAAI,EAAGA,EAAI,GAAOA,IACvBD,EAAcE,KAAKJ,EAAKG,EAAK,IAIjC,IAASA,EAAI,EAAGA,EAAI,GAAOA,IACvBD,EAAcE,KAAKJ,EAAKG,EAAK,KAIjC,IAASA,EAAI,EAAGA,EAAI,GAAOA,IACvBD,EAAcE,KAAK,GAMvB,IAASD,EAAI,EAAGA,EAAI,GAAOA,IACvBD,EAAcE,KAAK,GAIvB,IAASD,EAAI,EAAGA,EAAI,GAAOA,IACvBD,EAAcE,KAAKJ,EAAKG,EAAK,KAIjC,IAASA,EAAI,EAAGA,EAAI,GAAOA,IACvBD,EAAcE,KAAKJ,EAAKG,EAAK,KAIjC,IAASA,EAAI,EAAGA,EAAI,GAAOA,IACvBD,EAAcE,KAAK,GAMvB,IAASD,EAAI,EAAGA,EAAI,GAAOA,IACvBD,EAAcE,KAAK,GAIvB,IAASD,EAAI,EAAGA,EAAI,GAAOA,IACvBD,EAAcE,KAAKJ,EAAKG,EAAK,MAIjC,IAASA,EAAI,EAAGA,EAAI,GAAOA,IACvBD,EAAcE,KAAKJ,EAAKG,EAAK,MAIjC,IAASA,EAAI,EAAGA,EAAI,GAAOA,IACvBD,EAAcE,KAAK,GAMvB,IAASD,EAAI,EAAGA,EAAI,GAAOA,IACvBD,EAAcE,KAAK,GAIvB,IAASD,EAAI,EAAGA,EAAI,GAAOA,IACvBD,EAAcE,KAAKJ,EAAKG,EAAK,MAIjC,IAASA,EAAI,EAAGA,EAAI,GAAOA,IACvBD,EAAcE,KAAKJ,EAAKG,EAAK,MAIjC,IAASA,EAAI,EAAGA,EAAI,GAAOA,IACvBD,EAAcE,KAAK,GAG3B,OAAOF,CACX,CApLAV,cAAca,UAAUC,SAAW,SAASC,GACxC,IAAIC,EAAMC,UAAUC,OAAOC,OAAOC,UAAUC,UAAUC,IAAIP,GAASC,IAE/DO,EAAkBtB,KAAKuB,mBAAmBT,GAG9C,GAAIQ,EAAkBtB,KAAKC,UAAUuB,OAAST,EAAIS,OAAQ,CAGtD,IAAIC,EAAc,IAAIC,WAAWJ,EAAkBtB,KAAKC,UAAUuB,QAClEC,EAAYE,IAAIZ,GAChBU,EAAYE,IAAI3B,KAAKC,UAAWqB,GAEhCN,UAAUC,OAAOC,OAAOC,UAAUC,UAAUC,IAAIP,GAASc,UAAYN,EAAkBtB,KAAKC,UAAUuB,OACtGR,UAAUC,OAAOC,OAAOC,UAAUC,UAAUC,IAAIP,GAASC,IAAOU,EAChET,UAAUC,OAAOC,OAAOC,UAAUC,UAAUC,IAAIP,GAASe,MAAQC,cAAcd,UAAUC,OAAOC,OAAOC,UAAUC,UAAUC,IAAIP,GAASC,KACxIC,UAAUC,OAAOC,OAAOC,UAAUC,UAAUC,IAAIP,GAASiB,MAAQC,aAAahB,UAAUC,OAAOC,OAAOC,UAAUC,UAAUC,IAAIP,GAASC,IAE3I,MAGIC,UAAUC,OAAOC,OAAOC,UAAUC,UAAUC,IAAIP,GAASC,IAAIY,IAAI3B,KAAKC,UAAWqB,GACjFN,UAAUC,OAAOC,OAAOC,UAAUC,UAAUC,IAAIP,GAASe,MAAQC,cAAcd,UAAUC,OAAOC,OAAOC,UAAUC,UAAUC,IAAIP,GAASC,KACxIC,UAAUC,OAAOC,OAAOC,UAAUC,UAAUC,IAAIP,GAASiB,MAAQC,aAAahB,UAAUC,OAAOC,OAAOC,UAAUC,UAAUC,IAAIP,GAASC,IAI/I,EAEAhB,cAAca,UAAUqB,gBAAkB,SAASC,EAAepB,GAE9D,OADgBd,KAAKE,mBAAmBmB,IAAIa,GAC3B5B,OAAS,UAAaN,KAAKuB,mBAAmBT,EACnE,EAEAf,cAAca,UAAUuB,cAAgB,SAAUrB,EAASsB,EAAYC,GACnE,IAAIC,EAAW,IAAIC,SAAS,IAAIC,YAAY,CAACH,IAASI,QAEtDzB,UAAUC,OAAOC,OAAOC,UAAUC,UAAUC,IAAIP,GAAS4B,UAAUN,EAAYE,EAASK,SAAS,GAAG,IACpG3B,UAAUC,OAAOC,OAAOC,UAAUC,UAAUC,IAAIP,GAAS4B,UAAUN,EAAa,EAAGE,EAASK,SAAS,GAAG,IACxG3B,UAAUC,OAAOC,OAAOC,UAAUC,UAAUC,IAAIP,GAAS4B,UAAUN,EAAa,EAAGE,EAASK,SAAS,GAAG,IACxG3B,UAAUC,OAAOC,OAAOC,UAAUC,UAAUC,IAAIP,GAAS4B,UAAUN,EAAa,EAAGE,EAASK,SAAS,GAAG,IAExG3B,UAAUC,OAAOC,OAAOC,UAAUC,UAAUC,IAAIP,GAASe,MAAQC,cAAcd,UAAUC,OAAOC,OAAOC,UAAUC,UAAUC,IAAIP,GAASC,KACxIC,UAAUC,OAAOC,OAAOC,UAAUC,UAAUC,IAAIP,GAASiB,MAAQC,aAAahB,UAAUC,OAAOC,OAAOC,UAAUC,UAAUC,IAAIP,GAASC,IAC3I,EAEAhB,cAAca,UAAUgC,oBAAsB,SAAU9B,EAASsB,EAAY/B,GACzE,IAAIgC,EAASrC,KAAKiC,gBAAgB5B,EAAMS,GACxCd,KAAKmC,cAAcrB,EAASsB,EAAYC,EAC5C,EAEAtC,cAAca,UAAUiC,sBAAwB,SAASxC,EAAMS,EAASgC,EAAatB,EAAQuB,EAAY,MACrG,IAAIC,EAAeF,EACfG,EAAaD,EAAexB,EAC5BjB,EAAOS,UAAUC,OAAOC,OAAOC,UAAUC,UAAUC,IAAIP,GAASC,IAAImC,MAAMF,EAAcC,GACxFF,IACAxC,EAAOwC,EAAUI,MAAM,KAAM,CAAC5C,KAElC,IAAID,EAASN,KAAKC,UAAUuB,OAC5BxB,KAAKC,UAAYD,KAAKC,UAAUmD,OAAOC,MAAMC,KAAK/C,IAClDP,KAAKE,mBAAmByB,IAAItB,EAAM,IAAID,cAAcC,EAAMC,EAAQ+C,MAAMC,KAAK/C,IACjF,EAEAR,cAAca,UAAUW,mBAAqB,SAAUT,GAEnD,OAAO,QACX,EAQAV,cAAcQ,UAAU2C,UAAY,WAChC,OAAOvD,KAAKO,KAAKiB,MACrB,EA0GA,IAAIgC,IAAM,KACVC,eAAeC,eAEX,GAAwD,GAApD1C,UAAUC,OAAOC,OAAOC,UAAUC,UAAUuC,KAC5C,OAIJ,IAAIC,EAAmB5C,UAAUC,OAAOC,OAAOC,UAAUC,UAAUC,IAAI,MAAMN,IAAI,KAEtE,MAAPyC,MACAA,IAAM,IAAIzD,cAMV8D,OAAOC,KAAKC,8BAA8BC,SAAQC,IAC9C,IAAIC,EAAgB,EAChBN,IACAM,EAAgBC,4BAEpBX,IAAIX,sBAAsB,WAAaoB,EAAG,KAAMC,EAAiBH,6BAA6BE,GAAM,UAAY,QAGpHJ,OAAOC,KAAKM,6BAA6BJ,SAAQC,IAC7C,IAAIC,EAAgB,EAChBN,IACAM,EAAgBC,4BAEpBX,IAAIX,sBAAsB,UAAYoB,EAAG,KAAMC,EAAiBE,4BAA4BH,GAAM,UAAY,QAIlHJ,OAAOC,KAAKO,8BAA8BL,SAAQC,IAC9C,IAAIC,EAAgB,EAChBN,IACAM,EAAgBC,4BAEpBX,IAAIX,sBAAsB,gBAAkBoB,EAAG,KAAMC,EAAiBG,6BAA6BJ,GAAM,UAAY,QAGzHJ,OAAOC,KAAKQ,6BAA6BN,SAAQC,IAC7C,IAAIC,EAAgB,EAChBN,IACAM,EAAgBC,4BAEpBX,IAAIX,sBAAsB,eAAiBoB,EAAG,KAAMC,EAAiBI,4BAA4BL,GAAM,UAAY,QAIvHJ,OAAOC,KAAKS,8BAA8BP,SAAQC,IAC9C,IAAIC,EAAgB,EAChBN,IACAM,EAAgBC,4BAEpBX,IAAIX,sBAAsB,gBAAkBoB,EAAG,KAAMC,EAAiBK,6BAA6BN,GAAM,UAAY,IAAKzD,mBAAA,IAG9HqD,OAAOC,KAAKU,6BAA6BR,SAAQC,IAC7C,IAAIC,EAAgB,EAChBN,IACAM,EAAgBC,4BAEpBX,IAAIX,sBAAsB,eAAiBoB,EAAG,KAAMC,EAAiBM,4BAA4BP,GAAM,UAAY,IAAKzD,mBAAA,IAI5HqD,OAAOC,KAAKW,6BAA6BT,SAAQC,IAC7C,IAAIC,EAAgB,EAChBN,IACAM,EAAgBC,4BAEpBX,IAAIX,sBAAsB,eAAiBoB,EAAG,KAAMC,EAAiBO,4BAA4BR,GAAM,UAAY,IAAKzD,mBAAA,IAG5HqD,OAAOC,KAAKY,4BAA4BV,SAAQC,IAC5C,IAAIC,EAAgB,EAChBN,IACAM,EAAgBC,4BAEpBX,IAAIX,sBAAsB,cAAgBoB,EAAG,KAAMC,EAAiBQ,2BAA2BT,GAAM,UAAY,IAAKzD,mBAAA,IAI1HqD,OAAOC,KAAKa,iCAAiCX,SAAQC,IACjD,IAAIC,EAAgB,EAChBN,IACAM,EAAgBC,4BAEpBX,IAAIX,sBAAsB,mBAAqBoB,EAAG,KAAMC,EAAiBS,gCAAgCV,GAAM,UAAY,QAG/HJ,OAAOC,KAAKc,gCAAgCZ,SAAQC,IAChD,IAAIC,EAAgB,EAChBN,IACAM,EAAgBC,4BAEpBX,IAAIX,sBAAsB,kBAAoBoB,EAAG,KAAMC,EAAiBU,+BAA+BX,GAAM,UAAY,QAI7HJ,OAAOC,KAAKe,oBAAoBb,SAAQC,IACpCT,IAAIX,sBAAsB,gBAAkBoB,EAAG,KAAMY,mBAAoBZ,GAAM,UAAYa,0BAAA,KAOnGtB,IAAI3C,SAAS,KACbgD,OAAOC,KAAKiB,6BAA6Bf,SAAQC,IAC7CT,IAAIZ,oBAAoB,IAAKmC,4BAA4Bd,GAAK,UAAY,WAAaA,EAAA,IAE3FJ,OAAOC,KAAKkB,4BAA4BhB,SAAQC,IAC5CT,IAAIZ,oBAAoB,IAAKoC,2BAA2Bf,GAAK,UAAY,UAAYA,EAAA,IAEzFJ,OAAOC,KAAKmB,6BAA6BjB,SAAQC,IAC7CT,IAAIZ,oBAAoB,IAAKqC,4BAA4BhB,GAAK,UAAY,gBAAkBA,EAAA,IAEhGJ,OAAOC,KAAKoB,4BAA4BlB,SAAQC,IAC5CT,IAAIZ,oBAAoB,IAAKsC,2BAA2BjB,GAAK,UAAY,eAAiBA,EAAA,IAE9FJ,OAAOC,KAAKqB,6BAA6BnB,SAAQC,IAC7CT,IAAIZ,oBAAoB,IAAKuC,4BAA4BlB,GAAK,UAAY,gBAAkBA,EAAA,IAEhGJ,OAAOC,KAAKsB,4BAA4BpB,SAAQC,IAC5CT,IAAIZ,oBAAoB,IAAKwC,2BAA2BnB,GAAK,UAAY,eAAiBA,EAAA,IAE9FJ,OAAOC,KAAKuB,4BAA4BrB,SAAQC,IAC5CT,IAAIZ,oBAAoB,IAAKyC,2BAA2BpB,GAAK,UAAY,eAAiBA,EAAA,IAE9FJ,OAAOC,KAAKwB,2BAA2BtB,SAAQC,IAC3CT,IAAIZ,oBAAoB,IAAK0C,0BAA0BrB,GAAK,UAAY,cAAgBA,EAAA,IAE5FJ,OAAOC,KAAKyB,gCAAgCvB,SAAQC,IAChDT,IAAIZ,oBAAoB,IAAK2C,+BAA+BtB,GAAK,UAAY,mBAAqBA,EAAA,IAEtGJ,OAAOC,KAAK0B,+BAA+BxB,SAAQC,IAC/CT,IAAIZ,oBAAoB,IAAK4C,8BAA8BvB,GAAK,UAAY,kBAAoBA,EAAA,IAIpGJ,OAAOC,KAAK2B,mBAAmBzB,SAAQC,IACnCT,IAAIZ,oBAAoB,IAAK6C,kBAAkBxB,GAAK,UAAY,gBAAkBA,EAAA,IAItFT,IAAI3C,SAAS,KACbgD,OAAOC,KAAKiB,6BAA6Bf,SAAQC,IAC7CT,IAAIZ,oBAAoB,IAAKmC,4BAA4Bd,GAAK,UAAY,WAAaA,EAAA,IAE3FJ,OAAOC,KAAKkB,4BAA4BhB,SAAQC,IAC5CT,IAAIZ,oBAAoB,IAAKoC,2BAA2Bf,GAAK,UAAY,UAAYA,EAAA,IAEzFJ,OAAOC,KAAKmB,6BAA6BjB,SAAQC,IAC7CT,IAAIZ,oBAAoB,IAAKqC,4BAA4BhB,GAAK,UAAY,gBAAkBA,EAAA,IAEhGJ,OAAOC,KAAKoB,4BAA4BlB,SAAQC,IAC5CT,IAAIZ,oBAAoB,IAAKsC,2BAA2BjB,GAAK,UAAY,eAAiBA,EAAA,IAE9FJ,OAAOC,KAAKqB,6BAA6BnB,SAAQC,IAC7CT,IAAIZ,oBAAoB,IAAKuC,4BAA4BlB,GAAK,UAAY,gBAAkBA,EAAA,IAEhGJ,OAAOC,KAAKsB,4BAA4BpB,SAAQC,IAC5CT,IAAIZ,oBAAoB,IAAKwC,2BAA2BnB,GAAK,UAAY,eAAiBA,EAAA,IAE9FJ,OAAOC,KAAKuB,4BAA4BrB,SAAQC,IAC5CT,IAAIZ,oBAAoB,IAAKyC,2BAA2BpB,GAAK,UAAY,eAAiBA,EAAA,IAE9FJ,OAAOC,KAAKwB,2BAA2BtB,SAAQC,IAC3CT,IAAIZ,oBAAoB,IAAK0C,0BAA0BrB,GAAK,UAAY,cAAgBA,EAAA,IAE5FJ,OAAOC,KAAKyB,gCAAgCvB,SAAQC,IAChDT,IAAIZ,oBAAoB,IAAK2C,+BAA+BtB,GAAK,UAAY,mBAAqBA,EAAA,IAEtGJ,OAAOC,KAAK0B,+BAA+BxB,SAAQC,IAC/CT,IAAIZ,oBAAoB,IAAK4C,8BAA8BvB,GAAK,UAAY,kBAAoBA,EAAA,IAIpGT,IAAIrB,cAAc,IAAKuD,mCAAoC1E,UAAUC,OAAOC,OAAOC,UAAUC,UAAUC,IAAI,KAAKsE,UAAUC,iCAC1HpC,IAAIrB,cAAc,IAAK0D,+BAAgC7E,UAAUC,OAAOC,OAAOC,UAAUC,UAAUC,IAAI,KAAKsE,UAAUG,kCAGtHjC,OAAOC,KAAKiC,mBAAmB/B,SAAQC,IACnCT,IAAIZ,oBAAoB,IAAKmD,kBAAkB9B,GAAK,UAAY,gBAAkBA,EAAA,IAKtF,IAAI+B,EAAsBpC,EAAmBqC,oCAAsCC,oCAEnF,IAAIC,EAAsB,GACtBC,EAA2B,GAC3BC,EAA0B,GAC9B,IAAKC,EAAI,EAAGA,EAAIC,+BAAgCD,IAAK,CACjD,IAAIE,EAAQR,EAAsBM,EAAI,UACtCH,EAAoBxF,KAAKK,UAAUC,OAAOC,OAAOC,UAAUC,UAAUC,IAAI,MAAMN,IAAIyF,GACvF,CAEA,IAAKF,EAAI,EAAGA,EAAIG,0BAA2BH,IAAK,CAC5C,IAAII,EAAsBC,iCAAmCL,EAAI,UACjEF,EAAyBzF,KAAKK,UAAUC,OAAOC,OAAOC,UAAUC,UAAUC,IAAI,MAAMN,IAAI2F,IAExF,IAAIE,EAAqBC,gCAAkCP,EAAI,UAC/DD,EAAwB1F,KAAKK,UAAUC,OAAOC,OAAOC,UAAUC,UAAUC,IAAI,MAAMN,IAAI6F,GAC3F,CAGA,IAAKN,EAAI,EAAGA,EAAIH,EAAoB3E,OAAQ8E,IAAK,CAC7C,IAAIQ,EAAqBC,mCAAqCT,EAAI,UAClEtF,UAAUC,OAAOC,OAAOC,UAAUC,UAAUC,IAAI,KAAKqB,UAAUoE,EAAoBX,EAAoBG,IAEvG,IAAIU,EAAoBC,kCAAoCX,EAAI,UAChEtF,UAAUC,OAAOC,OAAOC,UAAUC,UAAUC,IAAI,KAAKqB,UAAUsE,EAAmBb,EAAoBG,GAC1G,CACA,IAAKA,EAAI,EAAGA,EAAIG,0BAA2BH,IAAK,CAC5C,IAAIY,EAAsBC,gCAAkCb,EAAI,UAChEtF,UAAUC,OAAOC,OAAOC,UAAUC,UAAUC,IAAI,KAAKqB,UAAUwE,EAAqBd,EAAyBE,IAE7G,IAAIc,EAAqBC,+BAAiCf,EAAI,UAC9DtF,UAAUC,OAAOC,OAAOC,UAAUC,UAAUC,IAAI,KAAKqB,UAAU0E,EAAoBf,EAAwBC,GAC/G,CAKA,IAJAtF,UAAUC,OAAOC,OAAOC,UAAUC,UAAUC,IAAI,KAAKQ,MAAQC,cAAcd,UAAUC,OAAOC,OAAOC,UAAUC,UAAUC,IAAI,KAAKN,KAChIC,UAAUC,OAAOC,OAAOC,UAAUC,UAAUC,IAAI,KAAKU,MAAQC,aAAahB,UAAUC,OAAOC,OAAOC,UAAUC,UAAUC,IAAI,KAAKN,KAG1HuF,EAAI,EAAGA,EAAIH,EAAoB3E,OAAQ8E,IAAK,CAC7C,IAAIgB,EAAqBC,mCAAqCjB,EAAI,UAClEtF,UAAUC,OAAOC,OAAOC,UAAUC,UAAUC,IAAI,KAAKqB,UAAU4E,EAAoBnB,EAAoBG,IAEvG,IAAIkB,EAAoBC,kCAAoCnB,EAAI,UAChEtF,UAAUC,OAAOC,OAAOC,UAAUC,UAAUC,IAAI,KAAKqB,UAAU8E,EAAmBrB,EAAoBG,GAC1G,CAEA,IAAKA,EAAI,EAAGA,EAAIG,0BAA2BH,IAAK,CAC5C,IAAIoB,EAAsBC,gCAAkCrB,EAAI,UAChEtF,UAAUC,OAAOC,OAAOC,UAAUC,UAAUC,IAAI,KAAKqB,UAAUgF,EAAqBtB,EAAyBE,IAE7G,IAAIsB,EAAqBC,+BAAiCvB,EAAI,UAC9DtF,UAAUC,OAAOC,OAAOC,UAAUC,UAAUC,IAAI,KAAKqB,UAAUkF,EAAoBvB,EAAwBC,GAC/G,CACAtF,UAAUC,OAAOC,OAAOC,UAAUC,UAAUC,IAAI,KAAKQ,MAAQC,cAAcd,UAAUC,OAAOC,OAAOC,UAAUC,UAAUC,IAAI,KAAKN,KAChIC,UAAUC,OAAOC,OAAOC,UAAUC,UAAUC,IAAI,KAAKU,MAAQC,aAAahB,UAAUC,OAAOC,OAAOC,UAAUC,UAAUC,IAAI,KAAKN,IACnI","sources":["dist/Patching/ExpansionPack.js"],"sourcesContent":["/**\n *  Handle expanding roms to add additional data from other roms and creadting expansions from existing roms\n */\n function ExpansionPack() {\n    this.expansion = [];\n    this.nameExpanstionData = new Map();\n}\n\nExpansionPack.prototype.addToRom = function(romCode) {\n    let ROM = IodineGUI.Iodine.IOCore.cartridge.cartriges.get(romCode).ROM;\n\n    let freeMemoryStart = this.getPatchPointStart(romCode);\n\n\n    if (freeMemoryStart + this.expansion.length > ROM.length) {\n\n        // Appending to the rom (i.e for a 16mb rom we can increase the size upto 32mb)\n        var mergedArray = new Uint8Array(freeMemoryStart + this.expansion.length);\n        mergedArray.set(ROM);\n        mergedArray.set(this.expansion, freeMemoryStart);\n    \n        IodineGUI.Iodine.IOCore.cartridge.cartriges.get(romCode).ROMLength = freeMemoryStart + this.expansion.length;\n        IodineGUI.Iodine.IOCore.cartridge.cartriges.get(romCode).ROM =  mergedArray;\n        IodineGUI.Iodine.IOCore.cartridge.cartriges.get(romCode).ROM16 = getUint16View(IodineGUI.Iodine.IOCore.cartridge.cartriges.get(romCode).ROM);\n        IodineGUI.Iodine.IOCore.cartridge.cartriges.get(romCode).ROM32 = getInt32View(IodineGUI.Iodine.IOCore.cartridge.cartriges.get(romCode).ROM);\n\n    } else {\n\n        // Splicing into (i.e rom is already 32mb so when have to write into a block of free space)\n        IodineGUI.Iodine.IOCore.cartridge.cartriges.get(romCode).ROM.set(this.expansion, freeMemoryStart);\n        IodineGUI.Iodine.IOCore.cartridge.cartriges.get(romCode).ROM16 = getUint16View(IodineGUI.Iodine.IOCore.cartridge.cartriges.get(romCode).ROM);\n        IodineGUI.Iodine.IOCore.cartridge.cartriges.get(romCode).ROM32 = getInt32View(IodineGUI.Iodine.IOCore.cartridge.cartriges.get(romCode).ROM);\n\n    }\n\n}\n\nExpansionPack.prototype.getExpansionPtr = function(expansionName, romCode) {\n    let expansion = this.nameExpanstionData.get(expansionName);\n    return expansion.offset + 0x08000000 + this.getPatchPointStart(romCode);\n}\n\nExpansionPack.prototype.patchRomPtr32 = function (romCode, ptrAddress, newPtr) {\n    let davaView = new DataView(new Uint32Array([newPtr]).buffer);\n\n    IodineGUI.Iodine.IOCore.cartridge.cartriges.get(romCode).patchROM8(ptrAddress, davaView.getUint8(0, true));\n    IodineGUI.Iodine.IOCore.cartridge.cartriges.get(romCode).patchROM8(ptrAddress + 1, davaView.getUint8(1, true));\n    IodineGUI.Iodine.IOCore.cartridge.cartriges.get(romCode).patchROM8(ptrAddress + 2, davaView.getUint8(2, true));\n    IodineGUI.Iodine.IOCore.cartridge.cartriges.get(romCode).patchROM8(ptrAddress + 3, davaView.getUint8(3, true));\n\n    IodineGUI.Iodine.IOCore.cartridge.cartriges.get(romCode).ROM16 = getUint16View(IodineGUI.Iodine.IOCore.cartridge.cartriges.get(romCode).ROM);\n    IodineGUI.Iodine.IOCore.cartridge.cartriges.get(romCode).ROM32 = getInt32View(IodineGUI.Iodine.IOCore.cartridge.cartriges.get(romCode).ROM);\n}\n\nExpansionPack.prototype.patchRomPtr32ByName = function (romCode, ptrAddress, name) {\n    let newPtr = this.getExpansionPtr(name, romCode);\n    this.patchRomPtr32(romCode, ptrAddress, newPtr);\n}\n\nExpansionPack.prototype.addElementToExpansion = function(name, romCode, offsetInRom, length, transform = null) {\n    let startAddress = offsetInRom;\n    let endAddress = startAddress + length;\n    let data = IodineGUI.Iodine.IOCore.cartridge.cartriges.get(romCode).ROM.slice(startAddress, endAddress);\n    if (transform) {\n        data = transform.apply(null, [data]);\n    }\n    let offset = this.expansion.length; \n    this.expansion = this.expansion.concat(Array.from(data));\n    this.nameExpanstionData.set(name, new ExpansionData(name, offset, Array.from(data)))\n} \n\nExpansionPack.prototype.getPatchPointStart = function (romCode) {\n    // For a 16mb rom we can just append to the end for 32mb+ roms we might need to find some free space to patch into\n    return 0x1000000;\n}\n\nfunction ExpansionData(name, offset, data) {\n    this.name = name;\n    this.offset = offset;\n    this.data = data;\n}\n\nExpansionData.prototype.getLength = function() {\n    return this.data.length;\n}\n\n/* \n    Sprites data is stored as 8x8 blocks (top -> bottom, left -> right) from the top left\n    Each pixle is 4 BITS i.e each byte represents 2 pixels\n    We need to transpose\n    [1, 2]       [1 , 2 , 3 , 4 ]\n    [3, 4]   ->  [5 , 6 , 7 , 8 ]\n    [5, 6]       [9 , 10, 11, 12]\n    [7, 8]       [13, 14, 15, 16]\n    by padding with 0's\n*/\nfunction sprite16x32To32x32(data) {\n    let newSpriteData = [];\n\n    // ROW 1\n\n        // BLOCK 1\n        for (var i = 0; i < 8*8/2; i++) {\n            newSpriteData.push(0);\n        } \n\n        // BLOCK 2\n        for (var i = 0; i < 8*8/2; i++) {\n            newSpriteData.push(data[i + (0*8*8/2)]);\n        } \n\n        // BLOCK 3\n        for (var i = 0; i < 8*8/2; i++) {\n            newSpriteData.push(data[i + (1*8*8/2)]);\n        } \n\n        // BLOCK 4\n        for (var i = 0; i < 8*8/2; i++) {\n            newSpriteData.push(0);\n        } \n\n    // ROW 2\n\n        // BLOCK 5\n        for (var i = 0; i < 8*8/2; i++) {\n            newSpriteData.push(0);\n        } \n\n        // BLOCK 6\n        for (var i = 0; i < 8*8/2; i++) {\n            newSpriteData.push(data[i + (2*8*8/2)]);\n        } \n\n        // BLOCK 7\n        for (var i = 0; i < 8*8/2; i++) {\n            newSpriteData.push(data[i + (3*8*8/2)]);\n        } \n\n        // BLOCK 8\n        for (var i = 0; i < 8*8/2; i++) {\n            newSpriteData.push(0);\n        } \n\n    // ROW 3\n\n        // BLOCK 9\n        for (var i = 0; i < 8*8/2; i++) {\n            newSpriteData.push(0);\n        } \n\n        // BLOCK 10\n        for (var i = 0; i < 8*8/2; i++) {\n            newSpriteData.push(data[i + (4*8*8/2)]);\n        } \n\n        // BLOCK 11\n        for (var i = 0; i < 8*8/2; i++) {\n            newSpriteData.push(data[i + (5*8*8/2)]);\n        } \n\n        // BLOCK 12\n        for (var i = 0; i < 8*8/2; i++) {\n            newSpriteData.push(0);\n        }\n\n    // ROW 4\n\n        // BLOCK 13\n        for (var i = 0; i < 8*8/2; i++) {\n            newSpriteData.push(0);\n        } \n\n        // BLOCK 14\n        for (var i = 0; i < 8*8/2; i++) {\n            newSpriteData.push(data[i + (6*8*8/2)]);\n        } \n\n        // BLOCK 15\n        for (var i = 0; i < 8*8/2; i++) {\n            newSpriteData.push(data[i + (7*8*8/2)]);\n        } \n\n        // BLOCK 16\n        for (var i = 0; i < 8*8/2; i++) {\n            newSpriteData.push(0);\n        } \n\n    return newSpriteData;\n}\n\nvar exp = null;\nasync function patchSprites() {\n\n    if (IodineGUI.Iodine.IOCore.cartridge.cartriges.size != 3) {\n        return;\n    }\n\n\n    var isPatchedFireRed = IodineGUI.Iodine.IOCore.cartridge.cartriges.get(\"FR\").ROM[0xBC];\n\n    if (exp == null) {\n        exp = new ExpansionPack();\n        \n        /* COPY DATA FROM FIRE RED */\n\n        // WALKING\n\n        Object.keys(FR_1_0_GIRL_WALK_SPRITE_DATA).forEach(k => {\n            let versionOffset = 0;\n            if (isPatchedFireRed) {\n                versionOffset = FR_1_1_SPRITE_OFFSET_SHIFT;\n            }\n            exp.addElementToExpansion(\"fr_girl_\" + k, \"FR\", (versionOffset + FR_1_0_GIRL_WALK_SPRITE_DATA[k]) - 0x08000000, 256);\n        });\n\n        Object.keys(FR_1_0_BOY_WALK_SPRITE_DATA).forEach(k => {\n            let versionOffset = 0;\n            if (isPatchedFireRed) {\n                versionOffset = FR_1_1_SPRITE_OFFSET_SHIFT;\n            }\n            exp.addElementToExpansion(\"fr_boy_\" + k, \"FR\", (versionOffset + FR_1_0_BOY_WALK_SPRITE_DATA[k]) - 0x08000000, 256);\n        });\n\n        // BIKING \n        Object.keys(FR_1_0_GIRL_BIKE_SPRITE_DATA).forEach(k => {\n            let versionOffset = 0;\n            if (isPatchedFireRed) {\n                versionOffset = FR_1_1_SPRITE_OFFSET_SHIFT;\n            }\n            exp.addElementToExpansion(\"fr_girl_bike_\" + k, \"FR\", (versionOffset + FR_1_0_GIRL_BIKE_SPRITE_DATA[k]) - 0x08000000, 512);\n        });\n\n        Object.keys(FR_1_0_BOY_BIKE_SPRITE_DATA).forEach(k => {\n            let versionOffset = 0;\n            if (isPatchedFireRed) {\n                versionOffset = FR_1_1_SPRITE_OFFSET_SHIFT;\n            }\n            exp.addElementToExpansion(\"fr_boy_bike_\" + k, \"FR\", (versionOffset + FR_1_0_BOY_BIKE_SPRITE_DATA[k]) - 0x08000000, 512);\n        });\n\n        // SURFING \n        Object.keys(FR_1_0_GIRL_SURF_SPRITE_DATA).forEach(k => {\n            let versionOffset = 0;\n            if (isPatchedFireRed) {\n                versionOffset = FR_1_1_SPRITE_OFFSET_SHIFT;\n            }\n            exp.addElementToExpansion(\"fr_girl_surf_\" + k, \"FR\", (versionOffset + FR_1_0_GIRL_SURF_SPRITE_DATA[k]) - 0x08000000, 256, sprite16x32To32x32);\n        });\n\n        Object.keys(FR_1_0_BOY_SURF_SPRITE_DATA).forEach(k => {\n            let versionOffset = 0;\n            if (isPatchedFireRed) {\n                versionOffset = FR_1_1_SPRITE_OFFSET_SHIFT;\n            }\n            exp.addElementToExpansion(\"fr_boy_surf_\" + k, \"FR\", (versionOffset + FR_1_0_BOY_SURF_SPRITE_DATA[k]) - 0x08000000, 256, sprite16x32To32x32);\n        });\n\n        // USE ITEM\n        Object.keys(FR_1_0_GIRL_BAG_SPRITE_DATA).forEach(k => {\n            let versionOffset = 0;\n            if (isPatchedFireRed) {\n                versionOffset = FR_1_1_SPRITE_OFFSET_SHIFT;\n            }\n            exp.addElementToExpansion(\"fr_girl_bag_\" + k, \"FR\", (versionOffset + FR_1_0_GIRL_BAG_SPRITE_DATA[k]) - 0x08000000, 256, sprite16x32To32x32);\n        });\n\n        Object.keys(FR_1_0_BOY_BAG_SPRITE_DATA).forEach(k => {\n            let versionOffset = 0;\n            if (isPatchedFireRed) {\n                versionOffset = FR_1_1_SPRITE_OFFSET_SHIFT;\n            }\n            exp.addElementToExpansion(\"fr_boy_bag_\" + k, \"FR\", (versionOffset + FR_1_0_BOY_BAG_SPRITE_DATA[k]) - 0x08000000, 256, sprite16x32To32x32);\n        });\n\n        // FISHING\n        Object.keys(FR_1_0_GIRL_FISHING_SPRITE_DATA).forEach(k => {\n            let versionOffset = 0;\n            if (isPatchedFireRed) {\n                versionOffset = FR_1_1_SPRITE_OFFSET_SHIFT;\n            }\n            exp.addElementToExpansion(\"fr_girl_fishing_\" + k, \"FR\", (versionOffset + FR_1_0_GIRL_FISHING_SPRITE_DATA[k]) - 0x08000000, 512);\n        });\n\n        Object.keys(FR_1_0_BOY_FISHING_SPRITE_DATA).forEach(k => {\n            let versionOffset = 0;\n            if (isPatchedFireRed) {\n                versionOffset = FR_1_1_SPRITE_OFFSET_SHIFT;\n            }\n            exp.addElementToExpansion(\"fr_boy_fishing_\" + k, \"FR\", (versionOffset + FR_1_0_BOY_FISHING_SPRITE_DATA[k]) - 0x08000000, 512);\n        });\n\n        // Backsprites\n        Object.keys(FR_BACKSPRITE_DATA).forEach(k => {\n            exp.addElementToExpansion(\"fr_backsprite\" + k, \"FR\", (FR_BACKSPRITE_DATA[k]) - 0x08000000, FR_BACKSPRITE_DATA_LENGTH);\n        });\n    }\n\n    \n\n    /* COPY DATA TO CRYSTAL */\n    exp.addToRom(\"C\");\n    Object.keys(E_1_0_GIRL_WALK_SPRITE_PTRS).forEach(k => {\n        exp.patchRomPtr32ByName(\"C\", E_1_0_GIRL_WALK_SPRITE_PTRS[k] - 0x08000000, \"fr_girl_\" + k);\n    });\n    Object.keys(E_1_0_BOY_WALK_SPRITE_PTRS).forEach(k => {\n        exp.patchRomPtr32ByName(\"C\", E_1_0_BOY_WALK_SPRITE_PTRS[k] - 0x08000000, \"fr_boy_\" + k);\n    });\n    Object.keys(E_1_0_GIRL_BIKE_SPRITE_PTRS).forEach(k => {\n        exp.patchRomPtr32ByName(\"C\", E_1_0_GIRL_BIKE_SPRITE_PTRS[k] - 0x08000000, \"fr_girl_bike_\" + k);\n    });\n    Object.keys(E_1_0_BOY_BIKE_SPRITE_PTRS).forEach(k => {\n        exp.patchRomPtr32ByName(\"C\", E_1_0_BOY_BIKE_SPRITE_PTRS[k] - 0x08000000, \"fr_boy_bike_\" + k);\n    });\n    Object.keys(E_1_0_GIRL_SURF_SPRITE_PTRS).forEach(k => {\n        exp.patchRomPtr32ByName(\"C\", E_1_0_GIRL_SURF_SPRITE_PTRS[k] - 0x08000000, \"fr_girl_surf_\" + k);\n    });\n    Object.keys(E_1_0_BOY_SURF_SPRITE_PTRS).forEach(k => {\n        exp.patchRomPtr32ByName(\"C\", E_1_0_BOY_SURF_SPRITE_PTRS[k] - 0x08000000, \"fr_boy_surf_\" + k);\n    });\n    Object.keys(E_1_0_GIRL_BAG_SPRITE_PTRS).forEach(k => {\n        exp.patchRomPtr32ByName(\"C\", E_1_0_GIRL_BAG_SPRITE_PTRS[k] - 0x08000000, \"fr_girl_bag_\" + k);\n    });\n    Object.keys(E_1_0_BOY_BAG_SPRITE_PTRS).forEach(k => {\n        exp.patchRomPtr32ByName(\"C\", E_1_0_BOY_BAG_SPRITE_PTRS[k] - 0x08000000, \"fr_boy_bag_\" + k);\n    });\n    Object.keys(E_1_0_GIRL_FISHING_SPRITE_PTRS).forEach(k => {\n        exp.patchRomPtr32ByName(\"C\", E_1_0_GIRL_FISHING_SPRITE_PTRS[k] - 0x08000000, \"fr_girl_fishing_\" + k);\n    });\n    Object.keys(E_1_0_BOY_FISHING_SPRITE_PTRS).forEach(k => {\n        exp.patchRomPtr32ByName(\"C\", E_1_0_BOY_FISHING_SPRITE_PTRS[k] - 0x08000000, \"fr_boy_fishing_\" + k);\n    });\n\n    // Backsprites\n    Object.keys(C_BACKSPRITE_PTRS).forEach(k => {\n        exp.patchRomPtr32ByName(\"C\", C_BACKSPRITE_PTRS[k] - 0x08000000, \"fr_backsprite\" + k);\n    });\n\n    /* COPY DATA TO EMERALD */\n    exp.addToRom(\"E\");\n    Object.keys(E_1_0_GIRL_WALK_SPRITE_PTRS).forEach(k => {\n        exp.patchRomPtr32ByName(\"E\", E_1_0_GIRL_WALK_SPRITE_PTRS[k] - 0x08000000, \"fr_girl_\" + k);\n    });\n    Object.keys(E_1_0_BOY_WALK_SPRITE_PTRS).forEach(k => {\n        exp.patchRomPtr32ByName(\"E\", E_1_0_BOY_WALK_SPRITE_PTRS[k] - 0x08000000, \"fr_boy_\" + k);\n    });\n    Object.keys(E_1_0_GIRL_BIKE_SPRITE_PTRS).forEach(k => {\n        exp.patchRomPtr32ByName(\"E\", E_1_0_GIRL_BIKE_SPRITE_PTRS[k] - 0x08000000, \"fr_girl_bike_\" + k);\n    });\n    Object.keys(E_1_0_BOY_BIKE_SPRITE_PTRS).forEach(k => {\n        exp.patchRomPtr32ByName(\"E\", E_1_0_BOY_BIKE_SPRITE_PTRS[k] - 0x08000000, \"fr_boy_bike_\" + k);\n    });\n    Object.keys(E_1_0_GIRL_SURF_SPRITE_PTRS).forEach(k => {\n        exp.patchRomPtr32ByName(\"E\", E_1_0_GIRL_SURF_SPRITE_PTRS[k] - 0x08000000, \"fr_girl_surf_\" + k);\n    });\n    Object.keys(E_1_0_BOY_SURF_SPRITE_PTRS).forEach(k => {\n        exp.patchRomPtr32ByName(\"E\", E_1_0_BOY_SURF_SPRITE_PTRS[k] - 0x08000000, \"fr_boy_surf_\" + k);\n    });\n    Object.keys(E_1_0_GIRL_BAG_SPRITE_PTRS).forEach(k => {\n        exp.patchRomPtr32ByName(\"E\", E_1_0_GIRL_BAG_SPRITE_PTRS[k] - 0x08000000, \"fr_girl_bag_\" + k);\n    });\n    Object.keys(E_1_0_BOY_BAG_SPRITE_PTRS).forEach(k => {\n        exp.patchRomPtr32ByName(\"E\", E_1_0_BOY_BAG_SPRITE_PTRS[k] - 0x08000000, \"fr_boy_bag_\" + k);\n    });\n    Object.keys(E_1_0_GIRL_FISHING_SPRITE_PTRS).forEach(k => {\n        exp.patchRomPtr32ByName(\"E\", E_1_0_GIRL_FISHING_SPRITE_PTRS[k] - 0x08000000, \"fr_girl_fishing_\" + k);\n    });\n    Object.keys(E_1_0_BOY_FISHING_SPRITE_PTRS).forEach(k => {\n        exp.patchRomPtr32ByName(\"E\", E_1_0_BOY_FISHING_SPRITE_PTRS[k] - 0x08000000, \"fr_boy_fishing_\" + k);\n    });\n\n    // Fix Emerald Trainer Sprites\n    exp.patchRomPtr32(\"E\", EMERALD_BRANDON_TRAINER_SPRITE_PTR, IodineGUI.Iodine.IOCore.cartridge.cartriges.get(\"E\").readROM32(EMERALD_RED_TRAINER_SPRITE_PTR));\n    exp.patchRomPtr32(\"E\", EMERALD_MAY_TRAINER_SPRITE_PTR, IodineGUI.Iodine.IOCore.cartridge.cartriges.get(\"E\").readROM32(EMERALD_LEAF_TRAINER_SPRITE_PTR));\n\n    // Backsprites\n    Object.keys(E_BACKSPRITE_PTRS).forEach(k => {\n        exp.patchRomPtr32ByName(\"E\", E_BACKSPRITE_PTRS[k] - 0x08000000, \"fr_backsprite\" + k);\n    });\n\n\n    /* COPY COLOUR PALLETS FROM FIRE RED */\n    var fireRedPalletOffset = isPatchedFireRed ? FR_1_1_GIRL_PALLET_DATA_BASE_OFFSET : FR_1_0_GIRL_PALLET_DATA_BASE_OFFSET;\n\n    let overworldPalletData = []; // In  FireRed boy and Girl use the same overworld pallet\n    let girlBackspritePalletData = [];\n    let boyBackspritePalletData = [];\n    for (i = 0; i < FR_1_0_GIRL_PALLET_DATA_LENGTH; i++) {\n        let index = fireRedPalletOffset + i - 0x08000000;\n        overworldPalletData.push(IodineGUI.Iodine.IOCore.cartridge.cartriges.get(\"FR\").ROM[index]);\n    }\n\n    for (i = 0; i < BACKSPRITES_PALLET_LENGTH; i++) {\n        let girlBackspriteIndex = FR_GIRL_BACKSPRITE_PALLET_OFFSET + i - 0x08000000;\n        girlBackspritePalletData.push(IodineGUI.Iodine.IOCore.cartridge.cartriges.get(\"FR\").ROM[girlBackspriteIndex]);\n\n        let boyBackspriteIndex = FR_BOY_BACKSPRITE_PALLET_OFFSET + i - 0x08000000;\n        boyBackspritePalletData.push(IodineGUI.Iodine.IOCore.cartridge.cartriges.get(\"FR\").ROM[boyBackspriteIndex]);\n    }\n\n    /* COPY COLOUR PALLETS TO EMERALD */\n    for (i = 0; i < overworldPalletData.length; i++) {\n        let girlOverworldIndex = E_1_0_GIRL_PALLET_DATA_BASE_OFFSET + i - 0x08000000;\n        IodineGUI.Iodine.IOCore.cartridge.cartriges.get(\"E\").patchROM8(girlOverworldIndex, overworldPalletData[i]);\n\n        let boyOverworldIndex = E_1_0_BOY_PALLET_DATA_BASE_OFFSET + i - 0x08000000;\n        IodineGUI.Iodine.IOCore.cartridge.cartriges.get(\"E\").patchROM8(boyOverworldIndex, overworldPalletData[i]);\n    }\n    for (i = 0; i < BACKSPRITES_PALLET_LENGTH; i++) {\n        let girlBackspriteIndex = E_GIRL_BACKSPRITE_PALLET_OFFSET + i - 0x08000000;\n        IodineGUI.Iodine.IOCore.cartridge.cartriges.get(\"E\").patchROM8(girlBackspriteIndex, girlBackspritePalletData[i]);\n\n        let boyBackspriteIndex = E_BOY_BACKSPRITE_PALLET_OFFSET + i - 0x08000000;\n        IodineGUI.Iodine.IOCore.cartridge.cartriges.get(\"E\").patchROM8(boyBackspriteIndex, boyBackspritePalletData[i]);\n    }\n    IodineGUI.Iodine.IOCore.cartridge.cartriges.get(\"E\").ROM16 = getUint16View(IodineGUI.Iodine.IOCore.cartridge.cartriges.get(\"E\").ROM);\n    IodineGUI.Iodine.IOCore.cartridge.cartriges.get(\"E\").ROM32 = getInt32View(IodineGUI.Iodine.IOCore.cartridge.cartriges.get(\"E\").ROM);\n\n    /* COPY COLOUR PALLETS TO CRYSTAL */\n    for (i = 0; i < overworldPalletData.length; i++) {\n        let girlOverworldIndex = C_1_0_GIRL_PALLET_DATA_BASE_OFFSET + i - 0x08000000;\n        IodineGUI.Iodine.IOCore.cartridge.cartriges.get(\"C\").patchROM8(girlOverworldIndex, overworldPalletData[i]);\n\n        let boyOverworldIndex = C_1_0_BOY_PALLET_DATA_BASE_OFFSET + i - 0x08000000;\n        IodineGUI.Iodine.IOCore.cartridge.cartriges.get(\"C\").patchROM8(boyOverworldIndex, overworldPalletData[i]);\n    }\n\n    for (i = 0; i < BACKSPRITES_PALLET_LENGTH; i++) {\n        let girlBackspriteIndex = C_GIRL_BACKSPRITE_PALLET_OFFSET + i - 0x08000000;\n        IodineGUI.Iodine.IOCore.cartridge.cartriges.get(\"C\").patchROM8(girlBackspriteIndex, girlBackspritePalletData[i]);\n\n        let boyBackspriteIndex = C_BOY_BACKSPRITE_PALLET_OFFSET + i - 0x08000000;\n        IodineGUI.Iodine.IOCore.cartridge.cartriges.get(\"C\").patchROM8(boyBackspriteIndex, boyBackspritePalletData[i]);\n    }\n    IodineGUI.Iodine.IOCore.cartridge.cartriges.get(\"C\").ROM16 = getUint16View(IodineGUI.Iodine.IOCore.cartridge.cartriges.get(\"C\").ROM);\n    IodineGUI.Iodine.IOCore.cartridge.cartriges.get(\"C\").ROM32 = getInt32View(IodineGUI.Iodine.IOCore.cartridge.cartriges.get(\"C\").ROM);\n}\n"],"names":["ExpansionPack","this","expansion","nameExpanstionData","Map","ExpansionData","name","offset","data","sprite16x32To32x32","newSpriteData","i1","push","prototype","addToRom","romCode","ROM","IodineGUI","Iodine","IOCore","cartridge","cartriges","get","freeMemoryStart","getPatchPointStart","length","mergedArray","Uint8Array","set","ROMLength","ROM16","getUint16View","ROM32","getInt32View","getExpansionPtr","expansionName","patchRomPtr32","ptrAddress","newPtr","davaView","DataView","Uint32Array","buffer","patchROM8","getUint8","patchRomPtr32ByName","addElementToExpansion","offsetInRom","transform","startAddress","endAddress","slice","apply","concat","Array","from","getLength","exp","async","patchSprites","size","isPatchedFireRed","Object","keys","FR_1_0_GIRL_WALK_SPRITE_DATA","forEach","k","versionOffset","FR_1_1_SPRITE_OFFSET_SHIFT","FR_1_0_BOY_WALK_SPRITE_DATA","FR_1_0_GIRL_BIKE_SPRITE_DATA","FR_1_0_BOY_BIKE_SPRITE_DATA","FR_1_0_GIRL_SURF_SPRITE_DATA","FR_1_0_BOY_SURF_SPRITE_DATA","FR_1_0_GIRL_BAG_SPRITE_DATA","FR_1_0_BOY_BAG_SPRITE_DATA","FR_1_0_GIRL_FISHING_SPRITE_DATA","FR_1_0_BOY_FISHING_SPRITE_DATA","FR_BACKSPRITE_DATA","FR_BACKSPRITE_DATA_LENGTH","E_1_0_GIRL_WALK_SPRITE_PTRS","E_1_0_BOY_WALK_SPRITE_PTRS","E_1_0_GIRL_BIKE_SPRITE_PTRS","E_1_0_BOY_BIKE_SPRITE_PTRS","E_1_0_GIRL_SURF_SPRITE_PTRS","E_1_0_BOY_SURF_SPRITE_PTRS","E_1_0_GIRL_BAG_SPRITE_PTRS","E_1_0_BOY_BAG_SPRITE_PTRS","E_1_0_GIRL_FISHING_SPRITE_PTRS","E_1_0_BOY_FISHING_SPRITE_PTRS","C_BACKSPRITE_PTRS","EMERALD_BRANDON_TRAINER_SPRITE_PTR","readROM32","EMERALD_RED_TRAINER_SPRITE_PTR","EMERALD_MAY_TRAINER_SPRITE_PTR","EMERALD_LEAF_TRAINER_SPRITE_PTR","E_BACKSPRITE_PTRS","fireRedPalletOffset","FR_1_1_GIRL_PALLET_DATA_BASE_OFFSET","FR_1_0_GIRL_PALLET_DATA_BASE_OFFSET","overworldPalletData","girlBackspritePalletData","boyBackspritePalletData","i","FR_1_0_GIRL_PALLET_DATA_LENGTH","index","BACKSPRITES_PALLET_LENGTH","girlBackspriteIndex","FR_GIRL_BACKSPRITE_PALLET_OFFSET","boyBackspriteIndex","FR_BOY_BACKSPRITE_PALLET_OFFSET","girlOverworldIndex","E_1_0_GIRL_PALLET_DATA_BASE_OFFSET","boyOverworldIndex","E_1_0_BOY_PALLET_DATA_BASE_OFFSET","girlBackspriteIndex1","E_GIRL_BACKSPRITE_PALLET_OFFSET","boyBackspriteIndex1","E_BOY_BACKSPRITE_PALLET_OFFSET","girlOverworldIndex1","C_1_0_GIRL_PALLET_DATA_BASE_OFFSET","boyOverworldIndex1","C_1_0_BOY_PALLET_DATA_BASE_OFFSET","girlBackspriteIndex2","C_GIRL_BACKSPRITE_PALLET_OFFSET","boyBackspriteIndex2","C_BOY_BACKSPRITE_PALLET_OFFSET"],"version":3,"file":"index.8f0dcb9d.js.map"}