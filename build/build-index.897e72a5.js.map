{"mappings":"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","sources":["dist/CoreHacks/EmulationCoreHacks.js"],"sourcesContent":["/**\n * Random Warp Script\n */\n\n// Ruby/Saphire (0x020297f0) where to find current warp\n\nvar isWarping = false;\nvar switchingGameState = 0; // 0 - Not Switching Game, \n                            // 1 - Playing exit transition before switch\n                            // 2 - Playing enterance after switch \nvar randomWarpsEnabled = true;\n\n/******************/\n/* Warp Addresses */\n/******************/\n/**\n *  Order of events for a warp script\n * \n *  1) A player steps on a warp tile\n *  2) A write8 is perforemed to bank, then map, then warp for current game\n *  3) Several read8s are performed to bank, then map, then warp \n *  4) Exit animation is played (i.e walking through a door) and screen fades to black\n *  5) A write32 is done to the last bank address\n *  6) New map is loaded and fades in then enterance animation is played \n * \n * \n *  Warp flow:\n * \n *  Within game:\n *  Wait for write to warp address -> switch to warping state -> wait for next read from warp address -> make save state -> before reading overwrite it -> continue  \n * \n *  To another game:\n *  Wait for write to warp address -> switch to warping state -> wait for next read from warp address -> take a save state -> increment game state -> resume playing ->\n *  wait for write to previous warp address (player exit map in first game) -> load state from different game (copying data accross) that was take just before warp ->\n *  make screen black -> overwrite next warp location -> increment warp state ->  wait for write to previous warp address (player exit map in load state from second game) -> \n *  make screen visible -> continue\n */\nconst FIRE_RED_LAST_BANK = 0x2031DB4;\n\nconst FIRE_RED_CURRENT_BANK = 0x2031dbc;\nconst FIRE_RED_CURRENT_MAP  = 0x2031dbd;\nconst FIRE_RED_CURRENT_WARP = 0x2031dbe;\n\nconst EMERALD_LAST_BANK = 0x020322DC;\n\nconst EMERALD_CURRENT_BANK = 0x20322e4;\nconst EMERALD_CURRENT_MAP  = 0x20322e5;\nconst EMERALD_CURRENT_WARP = 0x20322e6;\n\nconst EMERALD_MAP_TYPE = 0x203732F; // Used for enabling teleports/fly anywhere (0x2 for city, 0x4 for underground) \nconst FIRE_RED_MAP_TYPE = 0x2036E13; \n\nconst EMERALD_gMapHeader = 0x02037318;\nconst FIRE_RED_gMapHeader = 0x02036dfc;\n\nvar flagManager; // only global to help debugging\nvar isInSafari = false;\nvar volumeBeforeWarp = null;\nvar originalBeforeWarpId = null;\nGameBoyAdvanceCPU.prototype.write32WithoutIntercept = GameBoyAdvanceCPU.prototype.write32;\nGameBoyAdvanceCPU.prototype.write32 = function (address, data) { \n\n    if (switchingGameState != 0) {\n\n        if (switchingGameState == 1) {\n\n            if (((address == FIRE_RED_LAST_BANK) &&  IodineGUI.Iodine.IOCore.cartridge.romCode === \"FR\") || \n                ((address == EMERALD_LAST_BANK && (IodineGUI.Iodine.IOCore.cartridge.romCode === \"E\" || IodineGUI.Iodine.IOCore.cartridge.romCode === \"C\"))))  {\n\n                    IodineGUI.Iodine.pause();\n                    let beforeRomCode = IodineGUI.Iodine.IOCore.cartridge.romCode;\n                    let partySlice = readWRAMSlice(beforeRomCode == \"E\" || beforeRomCode == \"C\" ? EMERALD_PARTY_OFFSET : FIRE_RED_PARTY_OFFSET, PLAYER_PARTY_LENGTH);\n                    let playerNameAndState = dynamicMemorySlice(beforeRomCode == \"E\" || beforeRomCode == \"C\" ? EMERALD_SAVE_2_PTR : FIRE_RED_SAVE_2_PTR, NAME_STATE_OFFSET, NAME_STATE_LENGTH);\n                    let idAndPlayTime = dynamicMemorySlice(beforeRomCode == \"E\" || beforeRomCode == \"C\" ? EMERALD_SAVE_2_PTR : FIRE_RED_SAVE_2_PTR, ID_TIME_OFFSET, ID_TIME_LENGTH);\n                    let box1 = dynamicMemorySlice(beforeRomCode == \"E\" || beforeRomCode == \"C\" ? EMERALD_SAVE_3_PTR : FIRE_RED_SAVE_3_PTR, 4, BOX_LENGTH);\n\n                    let bagStoreage = new BagStoreage();\n                    bagStoreage.readData(beforeRomCode);\n\n                    flagManager = new FlagManager(bagStoreage.hasBike(), bagStoreage.hasFlute());\n                    flagManager.readFlags(beforeRomCode);\n        \n                    IodineGUI.Iodine.saveStateManager.loadState(gameSwitchingWarp.toRomCode);\n        \n                    if (gameSwitchingWarp.toRomCode == \"E\" || gameSwitchingWarp.toRomCode == \"C\") {\n\n                        originalBeforeWarpId = getDesitnation();\n\n                        this.write8(EMERALD_CURRENT_BANK, gameSwitchingWarp.toBank);\n                        this.write8(EMERALD_CURRENT_MAP, gameSwitchingWarp.toMap);\n                        this.write8(EMERALD_CURRENT_WARP, gameSwitchingWarp.toWarpNo);\n                    } else {\n\n                        originalBeforeWarpId = getDesitnation();\n\n                        this.write8(FIRE_RED_CURRENT_BANK, gameSwitchingWarp.toBank);\n                        this.write8(FIRE_RED_CURRENT_MAP, gameSwitchingWarp.toMap);\n                        this.write8(FIRE_RED_CURRENT_WARP, gameSwitchingWarp.toWarpNo);\n                    }\n                    let currentRomCode = IodineGUI.Iodine.IOCore.cartridge.romCode; // Changed becuase of load state\n                    spliceWRAM(currentRomCode == \"E\" || currentRomCode == \"C\" ? EMERALD_PARTY_OFFSET : FIRE_RED_PARTY_OFFSET, PLAYER_PARTY_LENGTH, partySlice);\n                    dynamicMemorySplice(currentRomCode == \"E\" || currentRomCode == \"C\" ? EMERALD_SAVE_2_PTR : FIRE_RED_SAVE_2_PTR, NAME_STATE_OFFSET, NAME_STATE_LENGTH, playerNameAndState);\n                    dynamicMemorySplice(currentRomCode == \"E\" || currentRomCode == \"C\" ? EMERALD_SAVE_2_PTR : FIRE_RED_SAVE_2_PTR, ID_TIME_OFFSET, ID_TIME_LENGTH, idAndPlayTime);\n                    dynamicMemorySplice(currentRomCode == \"E\" || currentRomCode == \"C\" ? EMERALD_SAVE_3_PTR : FIRE_RED_SAVE_3_PTR, 4, BOX_LENGTH, box1)\n\n                    bagStoreage.writeData(currentRomCode, beforeRomCode, true);\n                    flagManager.writeFlags(currentRomCode, beforeRomCode, true)\n        \n                    IodineGUI.mixerInput.volume = 0.0;\n                    switchingGameState = 2;\n                    let elmnt = document.getElementById(\"emulator_target\");\n                    elmnt.classList.add(\"faded\")\n                    IodineGUI.Iodine.play();\n                    return;\n\n            }\n\n        }\n\n        if (switchingGameState == 2) {\n            if (((address == FIRE_RED_LAST_BANK) &&  IodineGUI.Iodine.IOCore.cartridge.romCode === \"FR\") || \n            ((address == EMERALD_LAST_BANK && (IodineGUI.Iodine.IOCore.cartridge.romCode === \"E\" || IodineGUI.Iodine.IOCore.cartridge.romCode === \"C\"))))  {\n\n                switchingGameState = 3;\n                isWarping = false;\n                gameSwitchingWarp = null;\n            }\n        }\n\n        if ((switchingGameState == 3 || switchingGameState == 4) && (address == FIRE_RED_gMapHeader) &&  IodineGUI.Iodine.IOCore.cartridge.romCode === \"FR\") {\n    \n            if (switchingGameState == 4) {\n                fixPlayerPositionInWarp();\n                switchingGameState = 0;\n                IodineGUI.mixerInput.volume = volumeBeforeWarp;\n                let elmnt = document.getElementById(\"emulator_target\");\n                elmnt.classList.remove(\"faded\");\n            } else {\n                switchingGameState = 4;\n            }\n    \n        } else if ((switchingGameState == 3 || switchingGameState == 4) && (address == EMERALD_gMapHeader && (IodineGUI.Iodine.IOCore.cartridge.romCode === \"E\" || IodineGUI.Iodine.IOCore.cartridge.romCode === \"C\"))) {\n    \n            if (switchingGameState == 4) {\n                fixPlayerPositionInWarp();\n                switchingGameState = 0;\n                IodineGUI.mixerInput.volume = volumeBeforeWarp;\n                let elmnt = document.getElementById(\"emulator_target\");\n                elmnt.classList.remove(\"faded\");\n            } else {\n                switchingGameState = 4;\n            }\n        }\n    \n    }\n\n\n\n    if (address == FIRE_RED_LAST_BANK &&  IodineGUI.Iodine.IOCore.cartridge.romCode === \"FR\") {\n\n        isInSafari = new FlagManager().getFlag(IodineGUI.Iodine.IOCore.cpu.read32(FIRE_RED_SAVE_1_PTR), FIRE_RED_SYS_FLAGS_OFFSET, 0);\n        specialPostWarpHandling();\n\n    } else if (address == EMERALD_LAST_BANK && (IodineGUI.Iodine.IOCore.cartridge.romCode === \"E\"))  {\n\n        isInSafari = new FlagManager().getFlag(IodineGUI.Iodine.IOCore.cpu.read32(EMERALD_SAVE_1_PTR), EMERALD_SYS_FLAGS_OFFSET, 0x2C)\n        specialPostWarpHandling();\n    } else if (address == EMERALD_LAST_BANK && (IodineGUI.Iodine.IOCore.cartridge.romCode === \"C\"))  {\n\n        specialPostWarpHandling();\n    }\n\n\n    this.write32WithoutIntercept(address, data);\n}\n\nfunction getDesitnation() {\n\n\n    if (IodineGUI.Iodine.IOCore.cartridge.romCode === \"FR\") {\n        let bank = IodineGUI.Iodine.IOCore.cpu.read8WithoutIntercept(FIRE_RED_CURRENT_BANK);\n        let map = IodineGUI.Iodine.IOCore.cpu.read8WithoutIntercept(FIRE_RED_CURRENT_BANK + 1);\n        let warpNo = IodineGUI.Iodine.IOCore.cpu.read8WithoutIntercept(FIRE_RED_CURRENT_BANK + 2);\n\n        return \"FR\" + \",\" + bank + \",\" + map + \",\" + warpNo;\n    } else if (IodineGUI.Iodine.IOCore.cartridge.romCode === \"E\") {\n\n        let bank = IodineGUI.Iodine.IOCore.cpu.read8WithoutIntercept(EMERALD_CURRENT_BANK);\n        let map = IodineGUI.Iodine.IOCore.cpu.read8WithoutIntercept(EMERALD_CURRENT_BANK + 1);\n        let warpNo = IodineGUI.Iodine.IOCore.cpu.read8WithoutIntercept(EMERALD_CURRENT_BANK + 2);\n    \n        return destination = \"E\" + \",\" + bank + \",\" + map + \",\" + warpNo;\n\n    } else if (IodineGUI.Iodine.IOCore.cartridge.romCode === \"C\") {\n\n        let bank = IodineGUI.Iodine.IOCore.cpu.read8WithoutIntercept(EMERALD_CURRENT_BANK);\n        let map = IodineGUI.Iodine.IOCore.cpu.read8WithoutIntercept(EMERALD_CURRENT_BANK + 1);\n        let warpNo = IodineGUI.Iodine.IOCore.cpu.read8WithoutIntercept(EMERALD_CURRENT_BANK + 2);\n    \n        return destination = \"C\" + \",\" + bank + \",\" + map + \",\" + warpNo;\n\n    }\n\n    return null;\n\n}\n\nfunction fixPlayerPositionInWarp() {\n\n    let positionForcing = warpsNeedingPositionForces.get(getDesitnation()) || null;\n    let fromEscalator = escalatorTriggers.has(originalBeforeWarpId);\n\n    if (!(positionForcing != null || fromEscalator)) {\n        return;\n    } \n\n    let xAddress = null;\n    let yAddress = null;\n\n    if (IodineGUI.Iodine.IOCore.cartridge.romCode === \"FR\") {\n\n        let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(FIRE_RED_SAVE_1_PTR);\n        xAddress = save1Start;\n        yAddress = save1Start + 2;\n\n    } else {\n\n        let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(EMERALD_SAVE_1_PTR);\n        xAddress = save1Start;\n        yAddress = save1Start + 2;\n    }\n\n    let updatedXPos = null;\n    let updatedYPos = null;\n\n    if (positionForcing != null) {\n        updatedXPos = positionForcing[0];\n        updatedYPos = positionForcing[1];\n    } else {\n        updatedXPos = IodineGUI.Iodine.IOCore.cpu.read16(xAddress);\n        updatedYPos = IodineGUI.Iodine.IOCore.cpu.read16(yAddress);\n    }\n\n    if (fromEscalator) {\n        updatedXPos = updatedXPos - 1;\n    }\n\n    // set the new x/y;\n    IodineGUI.Iodine.IOCore.cpu.write16(xAddress, updatedXPos);\n    IodineGUI.Iodine.IOCore.cpu.write16(yAddress, updatedYPos);\n\n    originalBeforeWarpId = null;\n}\n\nvar warpsNeedingPositionForces = new Map();\nwarpsNeedingPositionForces.set(\"E,0,1,5\"    , [0x1E, 0x1B]);\nwarpsNeedingPositionForces.set(\"E,0,5,0\"    , [0x1B, 0x07]);\nwarpsNeedingPositionForces.set(\"E,0,2,0\"    , [0x08, 0x06]);\nwarpsNeedingPositionForces.set(\"E,0,7,5\"    , [0x2D, 0x07]);\nwarpsNeedingPositionForces.set(\"E,0,7,9\"    , [0x35, 0x1D]);\nwarpsNeedingPositionForces.set(\"E,0,7,4\"    , [0x09, 0x07]);\nwarpsNeedingPositionForces.set(\"E,0,8,2\"    , [0x12, 0x2A]);\nwarpsNeedingPositionForces.set(\"E,0,11,3\"   , [0x11, 0x0E]);\nwarpsNeedingPositionForces.set(\"E,0,12,5\"   , [0x09, 0x02]);\nwarpsNeedingPositionForces.set(\"E,0,14,4\"   , [0x08, 0x02]);\nwarpsNeedingPositionForces.set(\"E,0,15,0\"   , [0x08, 0x10]);\nwarpsNeedingPositionForces.set(\"E,0,26,0\"   , [0x0D, 0x72]);\nwarpsNeedingPositionForces.set(\"E,11,0,2\"   , [0x0E, 0x02]);\nwarpsNeedingPositionForces.set(\"E,14,9,2\"   , [0x0D, 0x02]);\nwarpsNeedingPositionForces.set(\"E,14,10,2\"  , [0x0d, 0x02]);\nwarpsNeedingPositionForces.set(\"E,16,10,2\"  , [0x09, 0x02]);\nwarpsNeedingPositionForces.set(\"E,24,8,2\"   , [0x1D, 0x0D]);\nwarpsNeedingPositionForces.set(\"E,24,8,3\"   , [0x1C, 0x15]);\nwarpsNeedingPositionForces.set(\"E,24,9,0\"   , [0x1D, 0x0D]);\nwarpsNeedingPositionForces.set(\"E,24,9,1\"   , [0x1C, 0x15]);\nwarpsNeedingPositionForces.set(\"E,24,13,4\"  , [0x10, 0x13]);\nwarpsNeedingPositionForces.set(\"E,24,16,4\"  , [0x0B, 0x09]);\nwarpsNeedingPositionForces.set(\"E,24,16,2\"  , [0x0A, 0x0C]);\nwarpsNeedingPositionForces.set(\"E,24,17,5\"  , [0x06, 0x0C]);\nwarpsNeedingPositionForces.set(\"E,24,17,4\"  , [0x0A, 0x0C]);\nwarpsNeedingPositionForces.set(\"E,24,18,2\"  , [0x0C, 0x0A]);\nwarpsNeedingPositionForces.set(\"E,24,18,3\"  , [0x0C, 0x0C]);\nwarpsNeedingPositionForces.set(\"E,24,19,3\"  , [0x0C, 0x0A]);\nwarpsNeedingPositionForces.set(\"E,24,19,4\"  , [0x0C, 0x0C]);\nwarpsNeedingPositionForces.set(\"E,24,24,10\" , [0x20, 0x13]);\nwarpsNeedingPositionForces.set(\"E,24,25,5\"  , [0x05, 0x08]);\nwarpsNeedingPositionForces.set(\"E,24,25,9\"  , [0x20, 0x14]);\nwarpsNeedingPositionForces.set(\"E,24,29,2\"  , [0x06, 0x01]);\nwarpsNeedingPositionForces.set(\"E,24,78,0\"  , [0x11, 0x0D]);\nwarpsNeedingPositionForces.set(\"E,24,81,0\"  , [0x03, 0x01]);\nwarpsNeedingPositionForces.set(\"E,24,82,1\"  , [0x07, 0x01]);\nwarpsNeedingPositionForces.set(\"E,24,95,0\"  , [0x12, 0x0C]);\nwarpsNeedingPositionForces.set(\"E,24,96,0\"  , [0x12, 0x0C]);\nwarpsNeedingPositionForces.set(\"E,26,74,1\"  , [0x05, 0x05]);\nwarpsNeedingPositionForces.set(\"E,26,87,0\"  , [0x0E, 0x13]);\nwarpsNeedingPositionForces.set(\"E,0,10,5\"   , [0x0A, 0x09]);\nwarpsNeedingPositionForces.set(\"E,16,0,1\"   , [0x06, 0x03]);\nwarpsNeedingPositionForces.set(\"E,16,1,1\"   , [0x06, 0x03]);\nwarpsNeedingPositionForces.set(\"E,16,2,1\"   , [0x06, 0x03]);\nwarpsNeedingPositionForces.set(\"E,16,3,1\"   , [0x06, 0x03]);\n\nwarpsNeedingPositionForces.set(\"FR,3,3,7\"   , [0x01, 0x0D]);\nwarpsNeedingPositionForces.set(\"FR,3,10,3\"  , [0x2E, 0x0D]);\nwarpsNeedingPositionForces.set(\"FR,3,10,1\"  , [0x16, 0x0F]);\nwarpsNeedingPositionForces.set(\"FR,3,10,4\"  , [0x1B, 0x16]);\n\nwarpsNeedingPositionForces.set(\"C,0,11,2\"   , [0x11, 0x12]);\nwarpsNeedingPositionForces.set(\"C,0,11,6\"   , [0x25, 0x0A]);\nwarpsNeedingPositionForces.set(\"C,0,13,1\"   , [0x07, 0x0E]);\nwarpsNeedingPositionForces.set(\"C,0,5,7\"    , [0x16, 0x04]);\nwarpsNeedingPositionForces.set(\"C,0,5,1\"    , [0x15, 0x0F]);\n\nvar escalatorTriggers = new Set();\nescalatorTriggers.add(\"E,8,5,0\"  );\nescalatorTriggers.add(\"E,9,12,0\" );\nescalatorTriggers.add(\"E,10,6,0\" );\nescalatorTriggers.add(\"E,11,6,0\" );\nescalatorTriggers.add(\"E,12,3,0\" );\nescalatorTriggers.add(\"E,13,7,0\" );\nescalatorTriggers.add(\"E,14,4,0\" );\nescalatorTriggers.add(\"E,15,3,0\" );\nescalatorTriggers.add(\"E,16,13,0\");\nescalatorTriggers.add(\"E,16,14,0\");\nescalatorTriggers.add(\"E,2,3,0\"  );\nescalatorTriggers.add(\"E,3,2,0\"  );\nescalatorTriggers.add(\"E,4,6,0\"  );\nescalatorTriggers.add(\"E,5,5,0\"  );\nescalatorTriggers.add(\"E,6,5,0\"  );\nescalatorTriggers.add(\"E,7,1,0\"  );\n\nescalatorTriggers.add(\"FR,5,5,0\");\nescalatorTriggers.add(\"FR,6,6,0\");\nescalatorTriggers.add(\"FR,7,4,0\");\nescalatorTriggers.add(\"FR,8,1,0\");\nescalatorTriggers.add(\"FR,10,13,0\");\nescalatorTriggers.add(\"FR,11,6,0\");\nescalatorTriggers.add(\"FR,12,6,0\");\nescalatorTriggers.add(\"FR,13,1,0\");\nescalatorTriggers.add(\"FR,16,1,0\");\nescalatorTriggers.add(\"FR,21,1,0\");\n\nescalatorTriggers.add(\"C,8,5,0\");\nescalatorTriggers.add(\"C,24,94,0\");\nescalatorTriggers.add(\"C,3,2,0\");\nescalatorTriggers.add(\"C,11,6,0\");\nescalatorTriggers.add(\"C,9,12,0\");\nescalatorTriggers.add(\"C,10,6,0\");\nescalatorTriggers.add(\"C,4,6,0\");\nescalatorTriggers.add(\"C,5,5,0\");\nescalatorTriggers.add(\"C,13,7,0\");\nescalatorTriggers.add(\"C,16,14,0\");\n\n\n// GameBoyAdvanceCPU.prototype.write16WithoutIntercept = GameBoyAdvanceCPU.prototype.write16;\n// GameBoyAdvanceCPU.prototype.write16 = function (address, data) { \n\n//     if (address == EMERALD_LAST_BANK) {\n//         console.log(\"writing 16\");\n//     }\n\n//     this.write16WithoutIntercept(address, data);\n// }\n\n GameBoyAdvanceCPU.prototype.write8WithoutIntercept = GameBoyAdvanceCPU.prototype.write8;\n GameBoyAdvanceCPU.prototype.write8 = function (address, data) { \n\n    if ((address == FIRE_RED_CURRENT_WARP) && IodineGUI.Iodine.IOCore.cartridge.romCode === \"FR\" )\n    {\n        isWarping = randomWarpsEnabled || forceNextWarp;\n    } \n    else if ((address == EMERALD_CURRENT_WARP) && (IodineGUI.Iodine.IOCore.cartridge.romCode === \"E\" || IodineGUI.Iodine.IOCore.cartridge.romCode === \"C\")) \n    {\n        isWarping = randomWarpsEnabled || forceNextWarp;\n    } \n    \n    this.write8WithoutIntercept(address, data);\n\n }\n\n\nconst EMERALD_MOVEMENT_MODE_OFFSET = 0x02037590;\nconst FIRE_RED_MOVEMENT_MODE_OFFSET = 0x02037078;\nconst MOVEMENT_MODE_WALK = 0x01;\nconst MOVEMENT_MODE_BIKE = 0x02;\nconst MOVEMENT_MODE_SURF = 0x08;\nvar autoBike = false; \nvar teleportAnywhere = false;\n\nGameBoyAdvanceCPU.prototype.read8WithoutIntercept = GameBoyAdvanceCPU.prototype.read8;\nGameBoyAdvanceCPU.prototype.read8 = function (address) {\n\n    if (autoBike) {\n        if (address == FIRE_RED_MOVEMENT_MODE_OFFSET && IodineGUI.Iodine.IOCore.cartridge.romCode === \"FR\"){\n            let current = this.read8WithoutIntercept(address);\n            return current <= MOVEMENT_MODE_WALK ? MOVEMENT_MODE_BIKE : current;\n        } else if (address == EMERALD_MOVEMENT_MODE_OFFSET){\n            let current = this.read8WithoutIntercept(address);\n            return current <= MOVEMENT_MODE_WALK ? MOVEMENT_MODE_BIKE : current;\n        }\n    }\n\n    if (teleportAnywhere) {\n        if (address == FIRE_RED_MAP_TYPE && IodineGUI.Iodine.IOCore.cartridge.romCode === \"FR\") {\n            return 2;\n        } else if (address == EMERALD_MAP_TYPE){\n            return 2;\n        }\n    }\n\n    if (!isWarping) return this.read8WithoutIntercept(address);\n\n    if (address == FIRE_RED_CURRENT_BANK && IodineGUI.Iodine.IOCore.cartridge.romCode === \"FR\")\n    {\n        // Base game FR/LG\n        address = this.handleWarpRedirection(address, IodineGUI.Iodine.IOCore.cartridge.romCode);\n    } \n    else if (address == EMERALD_CURRENT_BANK && (IodineGUI.Iodine.IOCore.cartridge.romCode === \"E\" || IodineGUI.Iodine.IOCore.cartridge.romCode === \"C\")) \n    {\n        // Base game Emerald\n        address = this.handleWarpRedirection(address, IodineGUI.Iodine.IOCore.cartridge.romCode);\n    }\n\n    return this.read8WithoutIntercept(address);\n}\n\nvar gameSwitchingWarp = null;\nvar reverseNextWarp = false; // Set true when loading a save state that was going through a warp\nvar forceNextWarp = null;\nGameBoyAdvanceCPU.prototype.handleWarpRedirection = function (address, romCode) {\n\n    let bank = this.read8WithoutIntercept(address);\n    let map = this.read8WithoutIntercept(address + 1);\n    let warpNo = this.read8WithoutIntercept(address + 2);\n    \n\n    let usingHomeWarp = this.handelHomeWarp(romCode, bank, map, warpNo);\n    \n    if (warpNo == 255 && !usingHomeWarp) { \n\n        // Special Fix for norman after the tutorial\n        if (romCode + \",\" + bank + \",\" + map + \",\" + warpNo == \"E,8,1,255\") {\n            writeGameVar(\"E\", 0x4085, 6);\n            modifyBaseFlag(\"E\", 0x2D6, 1);\n            modifyBaseFlag(\"E\", 0x362, 1);\n        }\n\n        originalBeforeWarpId = null;\n\n        // Avoid scripted warps, route connections without zone e.t.c\n        return address; \n    }\n\n    if (switchingGameState == 2 || switchingGameState==1) { return address }\n\n    volumeBeforeWarp = IodineGUI.mixerInput.volume; \n    let pkWarp = null;\n    let trigger = romCode + \",\" + bank + \",\" + map + \",\" + warpNo;\n\n    if (forceNextWarp) {\n        let toParts = forceNextWarp.split(\",\");\n        pkWarp = new PKWarp(trigger, toParts[0], toParts[1], toParts[2], toParts[3], forceNextWarp)\n        reverseNextWarp = false;\n        forceNextWarp = null;\n        originalBeforeWarpId = null;\n    } else if(reverseNextWarp && warpList.get(trigger)) {\n        let source = warpList.get(trigger).source;\n        let toParts = source.split(\",\");\n        pkWarp = new PKWarp(trigger, toParts[0], toParts[1], toParts[2], toParts[3], source)\n        reverseNextWarp = false;\n    } else {\n        pkWarp = warpList.get(trigger);\n        console.log(\"Warping triggered for \" + trigger); \n    }\n\n    if (pkWarp) {\n\n        pkWarp = specialPreWarpHandling(pkWarp);\n\n        IodineGUI.Iodine.pause();\n\n        IodineGUI.Iodine.saveStateManager.saveState(romCode, true);\n        if (pkWarp.toRomCode[0] != pkWarp.trigger[0]) {\n            // Switching Games\n            switchingGameState = 1;\n            gameSwitchingWarp = pkWarp;\n            address = pkWarp.toRomCode == \"E\" || pkWarp.toRomCode == \"C\" ? EMERALD_CURRENT_BANK : FIRE_RED_CURRENT_BANK;\n        } else {\n\n            if (pkWarp.toRomCode == \"E\" || pkWarp.toRomCode == \"C\") {\n\n                originalBeforeWarpId = getDesitnation();\n\n                this.write8(EMERALD_CURRENT_BANK, pkWarp.toBank);\n                this.write8(EMERALD_CURRENT_MAP, pkWarp.toMap);\n                this.write8(EMERALD_CURRENT_WARP, pkWarp.toWarpNo);\n                address = EMERALD_CURRENT_BANK;\n            } else {\n\n                originalBeforeWarpId = getDesitnation();\n\n                this.write8(FIRE_RED_CURRENT_BANK, pkWarp.toBank);\n                this.write8(FIRE_RED_CURRENT_MAP, pkWarp.toMap);\n                this.write8(FIRE_RED_CURRENT_WARP, pkWarp.toWarpNo);\n                address = FIRE_RED_CURRENT_BANK;\n            }\n\n            switchingGameState = 3;\n\n        }\n\n        specialDuringWarpHandling(pkWarp);\n\n        IodineGUI.Iodine.play();\n\n        console.log(\"Warping sending to \" + pkWarp.toRomCode + \",\" + pkWarp.toBank + \",\" + pkWarp.toMap + \",\" + pkWarp.toWarpNo); \n    } else {\n        console.log(\"Warping sending to vanilla\"); \n    }\n    \n    isWarping = false;\n\n    return address;\n}\n\n// Home Warp function use the same script as the safari zone \n// If we are currently in the safari zone we run the script normally otherwise we modify the location to send us home\nGameBoyAdvanceCPU.prototype.handelHomeWarp = function(romCode, bank, map, warpNo) {\n\n    if (romCode == \"FR\" && bank == 11 && map == 0 && warpNo == 255) {\n\n        if (!isInSafari) {\n            forceNextWarp = forceNextWarp || \"FR,4,1,0\";\n            writeGameVar(\"FR\", 0x406E, 0);\n            return true;\n        }\n\n    } else if (romCode == \"E\" && bank == 23 && map == 0 && warpNo == 255) {\n\n        if (!isInSafari) {\n            forceNextWarp = forceNextWarp || \"E,1,3,0\";\n            writeGameVar(\"E\", 0x40A4, 0);\n            return true;\n        }\n        \n    } else if (romCode == \"C\" && bank == 23 && map == 0 && warpNo == 255) {\n\n        // No Safari, I don't think the bug catching contest retirement works the same\n        forceNextWarp = forceNextWarp || \"C,1,1,0\";\n        return true;\n\n    }\n\n    return false;\n}\n\n// Some warps may need special handling to avoid bugs\n/*\n*   PreWarp handling takes place as soon as a warps has been triggered. This is useful if you need to alter the location\n*   that a warp would be going to\n*/\nfunction specialPreWarpHandling(pkwarp) {\n\n    // let destination = pkwarp.toRomCode + \",\" + pkwarp.toBank + \",\" + pkwarp.toMap + \",\" + pkwarp.toWarpNo;\n\n    return pkwarp;\n}\n\n/*\n*   DuringWarp handling takes place before the warp had happened but after the new rom has been loaded\n*   This is useful for when you need to set a flag/var in  a game you are loading before the new map loads\n*/\nfunction specialDuringWarpHandling(pkwarp) {\n    \n    let destination = pkwarp.toRomCode + \",\" + pkwarp.toBank + \",\" + pkwarp.toMap + \",\" + pkwarp.toWarpNo;\n\n    if (pkwarp.toRomCode == \"E\") {\n        // Open Regi Caves\n\n        // Show Mirage Tower\n\n        // Make sure it dosn't think we are on cycling road\n\n        // Make sure guy is moved from from devon corp floor one\n        \n        // If trickmaster reached end state we need to reset him\n\n        // If muesum defeated we need to open up that warp in slateport\n\n        // If Petalburg Gym make either catch tutorial or battle\n        if (destination == \"E,8,1,0\") {\n            // If catch tutorial hasn't been done we set to that\n            // otherwise we set to battle state\n            let petalburgState = readGameVar(\"E\", 0x4057);\n            if (petalburgState < 1) {\n                writeGameVar(\"E\", 0x4085, 0)\n            } else {\n                writeGameVar(\"E\", 0x4085, 6)\n            }\n    \n            // Unlock left of petalburg\n            writeGameVar(\"E\", 0x4057, 1);\n        } \n\n        // If Mauville Gym make battle\n        if (destination == \"E,10,0,0\") {\n            new FlagManager().setFlag(IodineGUI.Iodine.IOCore.cpu.read32(EMERALD_SAVE_1_PTR), 0x1270, 0x391, 0);\n        }\n\n        // Make Sure the trick master won't crash the game\n        if (destination == \"E,29,1,0\" || destination == \"E,29,1,1\") {\n            if (readGameVar(\"E\", 0x4044) > 7) {\n                writeGameVar(\"E\", 0x4044, 7);\n            }\n        } else if (destination == \"E,14,7,0\") {\n            if (readGameVar(\"E\", 0x40C6) == 0) {\n                writeGameVar(\"E\", 0x40C6, 1);\n                modifyBaseFlag(\"E\", 0x3C7, 0);\n            }\n        }\n\n        // Make sure we can get waterfall\n    }\n\n}\n\n/*\n*   PostWarp handling takes place after the warp has finished\n*   This is useful for when you need to trigger an event after the new map has loaded\n*/\nfunction specialPostWarpHandling() {\n\n    // Need to pass in the current warp address\n    // Fix the \"Jesus warps\" in seafloor cavern for emerald\n\n    if (IodineGUI.Iodine.IOCore.cartridge.romCode === \"E\") {\n        let bank = IodineGUI.Iodine.IOCore.cpu.read8WithoutIntercept(EMERALD_CURRENT_BANK);\n        let map = IodineGUI.Iodine.IOCore.cpu.read8WithoutIntercept(EMERALD_CURRENT_BANK + 1);\n        let warpNo = IodineGUI.Iodine.IOCore.cpu.read8WithoutIntercept(EMERALD_CURRENT_BANK + 2);\n\n        let destination = \"E\" + \",\" + bank + \",\" + map + \",\" + warpNo;\n\n        if (destination == \"E,24,33,2\") {\n            // Seafloor caven stop walking on water\n            forceStateAfterDelay(MOVEMENT_MODE_SURF, 1000);\n        } else if (destination == \"E,0,4,1\" || destination == \"E,0,4,4\" || destination == \"E,0,4,5\" || destination == \"E,0,4,6\" || destination == \"E,0,4,7\" || destination == \"E,0,4,8\" || \n                   destination == \"E,0,15,0\" || destination == \"E,0,15,1\" || destination == \"E,0,15,2\" || destination == \"E,0,15,3\" || destination == \"E,0,15,4\" || destination == \"E,0,15,\") {\n            if (document.getElementById(\"autoBike\").checked) {\n                M.toast({html: 'Auto Bike Off', displayLength:1000 });\n                document.getElementById(\"autoBike\").click();\n            }\n            // Somewhere we can't use a bike (fortree or pacifidlog)\n            forceStateAfterDelay(MOVEMENT_MODE_WALK, 1000);\n        } else if (destination == \"E,16,0,0\") {\n            // E4 rooms needs to walk fowards when entering\n            writeGameVar(\"E\", 0x409C, 0);\n        } else if (destination == \"E,16,0,1\")  {\n            writeGameVar(\"E\", 0x409C, 1);\n        } else if (destination == \"E,16,1,0\") {\n            writeGameVar(\"E\", 0x409C, 1);\n        } else if (destination == \"E,16,1,1\") {\n            writeGameVar(\"E\", 0x409C, 2);\n        } else if (destination == \"E,16,2,0\") {\n            writeGameVar(\"E\", 0x409C, 2);\n        } else if (destination == \"E,16,2,1\") {\n            writeGameVar(\"E\", 0x409C, 3);\n        } else if (destination == \"E,16,3,0\") {\n            writeGameVar(\"E\", 0x409C, 3);\n        } else if (destination == \"E,16,3,1\") {\n            writeGameVar(\"E\", 0x409C, 4);\n        }\n\n    }\n\n    if (IodineGUI.Iodine.IOCore.cartridge.romCode === \"C\") {\n        let bank = IodineGUI.Iodine.IOCore.cpu.read8WithoutIntercept(EMERALD_CURRENT_BANK);\n        let map = IodineGUI.Iodine.IOCore.cpu.read8WithoutIntercept(EMERALD_CURRENT_BANK + 1);\n        let warpNo = IodineGUI.Iodine.IOCore.cpu.read8WithoutIntercept(EMERALD_CURRENT_BANK + 2);\n\n        let destination = \"C\" + \",\" + bank + \",\" + map + \",\" + warpNo;\n\n        if (destination == \"C,16,0,0\") {\n            // E4 rooms needs to walk fowards when entering\n            writeGameVar(\"C\", 0x409C, 1);\n        } else if (destination == \"C,16,0,1\")  {\n            writeGameVar(\"C\", 0x409C, 1);\n        } else if (destination == \"C,16,1,0\") {\n            writeGameVar(\"C\", 0x409C, 2);\n        } else if (destination == \"C,16,1,1\") {\n            writeGameVar(\"C\", 0x409C, 2);\n        } else if (destination == \"C,16,2,0\") {\n            writeGameVar(\"C\", 0x409C, 3);\n        } else if (destination == \"C,16,2,1\") {\n            writeGameVar(\"C\", 0x409C, 3);\n        } else if (destination == \"C,16,3,0\") {\n            writeGameVar(\"C\", 0x409C, 4);\n        } else if (destination == \"C,16,3,1\") {\n            writeGameVar(\"C\", 0x409C, 4);\n        }\n\n    }\n\n    if (IodineGUI.Iodine.IOCore.cartridge.romCode === \"FR\") {\n        let bank = IodineGUI.Iodine.IOCore.cpu.read8WithoutIntercept(FIRE_RED_CURRENT_BANK);\n        let map = IodineGUI.Iodine.IOCore.cpu.read8WithoutIntercept(FIRE_RED_CURRENT_BANK + 1);\n        let warpNo = IodineGUI.Iodine.IOCore.cpu.read8WithoutIntercept(FIRE_RED_CURRENT_BANK + 2);\n\n        let destination = \"FR\" + \",\" + bank + \",\" + map + \",\" + warpNo;\n        if (destination == \"FR,1,86,6\" || destination == \"FR,1,86,5\" || destination == \"FR,1,87,2\" || destination == \"FR,1,87,3\") {\n            // Seafoam islands stop walking on water\n            forceStateAfterDelay(MOVEMENT_MODE_SURF, 3800);\n        } else if (destination == \"FR,1,75,0\") {\n            // E4 rooms needs to walk fowards when entering\n            writeGameVar(\"FR\", 0x4068, 0);\n        } else if (destination == \"FR,1,75,1\")  {\n            writeGameVar(\"FR\", 0x4068, 1);\n        } else if (destination == \"FR,1,76,0\") {\n            writeGameVar(\"FR\", 0x4068, 1);\n        } else if (destination == \"FR,1,76,1\") {\n            writeGameVar(\"FR\", 0x4068, 2);\n        } else if (destination == \"FR,1,77,0\") {\n            writeGameVar(\"FR\", 0x4068, 2);\n        } else if (destination == \"FR,1,77,1\") {\n            writeGameVar(\"FR\", 0x4068, 3);\n        } else if (destination == \"FR,1,78,0\") {\n            writeGameVar(\"FR\", 0x4068, 3);\n        } else if (destination == \"FR,1,78,1\") {\n            writeGameVar(\"FR\", 0x4068, 4);\n        } else if (destination == \"FR,1,79,0\") {\n            writeGameVar(\"FR\", 0x4068, 4);\n        }\n    }\n}\n\nasync function forceStateAfterDelay(movementMode, delayTime) {\n    await delay(delayTime/IodineGUI.Iodine.getSpeed());\n    forcePlayerState(movementMode);\n}\n\nasync function quickSpeedUp(duration) {\n    let currentSpeed = IodineGUI.Iodine.getSpeed();\n    IodineGUI.Iodine.setSpeed(4);\n    let volumeBefore = IodineGUI.mixerInput.volume;\n    IodineGUI.mixerInput.volume = 0.0\n    await delay(duration);\n    IodineGUI.Iodine.setSpeed(currentSpeed);\n    IodineGUI.mixerInput.volume = volumeBefore\n}\n\nfunction quickHideScreen() {\n    let elmnt = document.getElementById(\"emulator_target\");\n    elmnt.classList.remove(\"quick-hide\");\n    elmnt.offsetWidth\n    elmnt.classList.add(\"quick-hide\")\n}\n\nfunction readWRAMSlice(address, length) {\n    let startAddress = (address - 0x02000000);\n    let endAddress = startAddress + length;\n    return IodineGUI.Iodine.IOCore.memory.externalRAM.slice(startAddress, endAddress);\n}\nfunction spliceWRAM(address, length, data) {\n    let startAddress = (address - 0x02000000);\n    for (let i = 0; i<length; i++) {\n        IodineGUI.Iodine.IOCore.memory.externalRAM[startAddress + i] = data[i];\n    }\n}\n\n\n/***********************/\n/* Dynamic rom patches */  \n/***********************/\n/**\n * Patches out an area in the ROM \n */\nvar walkThroughWalls = false;\nvar runIndoors = true;\nvar frWallsOffset = 364078; // set to 364098 for 1.1 version\nvar frRunIndoorsOffset = 0xBD494; //  set to 0xBD4A8 for 1.1 version\n\nGameBoyAdvanceMultiCartridge.prototype.initializeWithoutIntercept = GameBoyAdvanceMultiCartridge.prototype.initialize;\nGameBoyAdvanceMultiCartridge.prototype.initialize = function (startingRom) {\n    this.initializeWithoutIntercept(startingRom);\n\n    // if 0x(80000)BC == 1 then we have US 1.1 instead of US 1.0\n    if (this.cartriges.get(\"FR\") && this.cartriges.get(\"FR\").ROM[0xBC]) {\n        frWallsOffset = 364098\n        frRunIndoorsOffset = 0xBD4A8;\n    }\n} \n\nGameBoyAdvanceMultiCartridge.prototype.readROM16WithoutIntercept = GameBoyAdvanceMultiCartridge.prototype.readROM16;\nGameBoyAdvanceMultiCartridge.prototype.readROM16 = function (address) {\n\n    if (!walkThroughWalls && !runIndoors) { return this.readROM16WithoutIntercept(address); }\n\n    if (walkThroughWalls) {\n        if (address == frWallsOffset && this.romCode == \"FR\") { \n            return 0x2100; \n        } else if (address == 601094 && this.romCode == \"C\") {\n            return 0x2000; \n        } else if (address == 601094 && this.romCode == \"E\") {\n            return 0x2000;\n        }\n    }\n\n    if (runIndoors) {\n        if (address == frRunIndoorsOffset && this.romCode == \"FR\") { \n            return 0x00; \n        } else if (address == 0x11A1E8 && this.romCode == \"C\") {\n            return 0x00; \n        } else if (address == 0x11A1E8 && this.romCode == \"E\") {\n            return 0x00;\n        }\n    }\n\n    return this.readROM16WithoutIntercept(address);\n}\n\nvar currentlySaving = false;\nGameBoyAdvanceMultiCartridge.prototype.readROM8WithoutIntercept = GameBoyAdvanceMultiCartridge.prototype.readROM8;\nGameBoyAdvanceMultiCartridge.prototype.readROM8 = function (address) {\n\n    if (currentlySaving) {\n\n        if (this.cartriges.get(\"FR\") && this.cartriges.get(\"FR\").ROM[0xBC] &&  ((address == 1857210 || address == 4305130 || address == 4306233 || address == 0x0416138))) {\n            syncSaveStateSaves();\n        } else if (this.cartriges.get(\"FR\") && (address == 1857098 || address == 4305018 || address == 4306121 || address == 0x0416138)) {\n            syncSaveStateSaves();\n        } else if ((address == 2681225 || address == 2918453 || address == 6214600)) {\n            syncSaveStateSaves();\n        } else if (address == 0x05e8c14) {\n            saveAfterDelay();\n        }\n    }\n\n    return this.readROM8WithoutIntercept(address);\n}\n\nasync function saveAfterDelay() {\n    currentlySaving = true;\n    await delay(3000);\n    syncSaveStateSaves();\n}\n\n// FIRE RED - isSurfing 0x02036e40 (0x33 = on land, 0x11 on water)\n// EMERALD -            0x0203735B\nconst FIRE_RED_CURRENT_GROUND_OFFSET = 0x02036e43;\nconst EMERALD_CURRENT_GROUND_OFFSET = 0x0203735B;\nconst CURRENT_GROUND_LAND = 0x33;\nconst CURRENT_GROUND_WATER = 0x11;\nconst CURRENT_GROUND_LADDER = 0x30;\nconst CURRENT_GROUND_ELEVATED = 0x44;\n\nconst EMERALD_STATE_OFFSET = 0x02037591;\nconst FIRE_RED_STATE_OFFSET = 0x02037079;\nfunction forcePlayerState(state) {\n\n    if(!IodineGUI.Iodine.IOCore) return;\n\n    if (IodineGUI.Iodine.IOCore.cartridge.romCode === \"FR\") { \n        //IodineGUI.Iodine.IOCore.cpu.write8(FIRE_RED_MOVEMENT_MODE_OFFSET, state);\n        IodineGUI.Iodine.IOCore.cpu.write8(FIRE_RED_STATE_OFFSET, state); \n        if (state == MOVEMENT_MODE_SURF) {\n            IodineGUI.Iodine.IOCore.cpu.write8(FIRE_RED_CURRENT_GROUND_OFFSET, CURRENT_GROUND_WATER); \n        } else {\n            IodineGUI.Iodine.IOCore.cpu.write8(FIRE_RED_CURRENT_GROUND_OFFSET, CURRENT_GROUND_LAND); \n        }\n    } else if (IodineGUI.Iodine.IOCore.cartridge.romCode === \"C\") {\n        IodineGUI.Iodine.IOCore.cpu.write8(EMERALD_MOVEMENT_MODE_OFFSET, state);\n        IodineGUI.Iodine.IOCore.cpu.write8(EMERALD_STATE_OFFSET, state); \n        if (state == MOVEMENT_MODE_SURF) {\n            IodineGUI.Iodine.IOCore.cpu.write8(EMERALD_CURRENT_GROUND_OFFSET, CURRENT_GROUND_WATER); \n        } else {\n            IodineGUI.Iodine.IOCore.cpu.write8(EMERALD_CURRENT_GROUND_OFFSET, CURRENT_GROUND_LAND); \n        }\n    } else if (IodineGUI.Iodine.IOCore.cartridge.romCode === \"E\") {\n        IodineGUI.Iodine.IOCore.cpu.write8(EMERALD_MOVEMENT_MODE_OFFSET, state);\n        IodineGUI.Iodine.IOCore.cpu.write8(EMERALD_STATE_OFFSET, state); \n        if (state == MOVEMENT_MODE_SURF) {\n            IodineGUI.Iodine.IOCore.cpu.write8(EMERALD_CURRENT_GROUND_OFFSET, CURRENT_GROUND_WATER); \n        } else if (IodineGUI.Iodine.IOCore.cpu.read8(EMERALD_CURRENT_GROUND_OFFSET) == CURRENT_GROUND_ELEVATED) {\n            IodineGUI.Iodine.IOCore.cpu.write8(EMERALD_CURRENT_GROUND_OFFSET, CURRENT_GROUND_ELEVATED); \n        } else {\n            IodineGUI.Iodine.IOCore.cpu.write8(EMERALD_CURRENT_GROUND_OFFSET, CURRENT_GROUND_LADDER); \n        }\n    }\n}\n\nfunction whiteoutTeam() {\n    if (IodineGUI.Iodine.IOCore.cartridge.romCode === \"FR\") { \n        // Poison First Mon\n        IodineGUI.Iodine.IOCore.cpu.write8(FIRE_RED_PARTY_OFFSET + 80, 0x08);\n        // Set First Mon HP to 1 \n        IodineGUI.Iodine.IOCore.cpu.write16(FIRE_RED_PARTY_OFFSET + 86, 0x01);\n        // Set other mons fainted\n        IodineGUI.Iodine.IOCore.cpu.write16(FIRE_RED_PARTY_OFFSET + 86 + 100, 0x00);\n        IodineGUI.Iodine.IOCore.cpu.write16(FIRE_RED_PARTY_OFFSET + 86 + 200, 0x00);\n        IodineGUI.Iodine.IOCore.cpu.write16(FIRE_RED_PARTY_OFFSET + 86 + 300, 0x00);\n        IodineGUI.Iodine.IOCore.cpu.write16(FIRE_RED_PARTY_OFFSET + 86 + 400, 0x00);\n        IodineGUI.Iodine.IOCore.cpu.write16(FIRE_RED_PARTY_OFFSET + 86 + 500, 0x00);\n    } else if (IodineGUI.Iodine.IOCore.cartridge.romCode === \"C\" || IodineGUI.Iodine.IOCore.cartridge.romCode === \"E\") {\n       // Poison First Mon\n       IodineGUI.Iodine.IOCore.cpu.write8(EMERALD_PARTY_OFFSET + 80, 0x08);\n       // Set First Mon HP to 1 \n       IodineGUI.Iodine.IOCore.cpu.write16(EMERALD_PARTY_OFFSET + 86, 0x01);\n       // Set other mons fainted\n       IodineGUI.Iodine.IOCore.cpu.write16(EMERALD_PARTY_OFFSET + 86 + 100, 0x00);\n       IodineGUI.Iodine.IOCore.cpu.write16(EMERALD_PARTY_OFFSET + 86 + 200, 0x00);\n       IodineGUI.Iodine.IOCore.cpu.write16(EMERALD_PARTY_OFFSET + 86 + 300, 0x00);\n       IodineGUI.Iodine.IOCore.cpu.write16(EMERALD_PARTY_OFFSET + 86 + 400, 0x00);\n       IodineGUI.Iodine.IOCore.cpu.write16(EMERALD_PARTY_OFFSET + 86 + 500, 0x00);\n    }\n}\n\nfunction dynamicMemorySlice(dynamicPointer, offsetInDynamic, length) {\n    let dynamicBlock = IodineGUI.Iodine.IOCore.cpu.read32(dynamicPointer);\n    let startAddress = (dynamicBlock + offsetInDynamic - 0x02000000);\n    let endAddress = startAddress + length;\n    return IodineGUI.Iodine.IOCore.memory.externalRAM.slice(startAddress, endAddress);    \n}\n\nfunction dynamicMemorySplice(dynamicPointer, offsetInDynamic, length, data) {\n    let dynamicBlock = IodineGUI.Iodine.IOCore.cpu.read32(dynamicPointer);\n    let startAddress = (dynamicBlock + offsetInDynamic - 0x02000000);\n    for (let i = 0; i<length; i++) {\n        IodineGUI.Iodine.IOCore.memory.externalRAM[startAddress + i] = data[i];\n    }\n}\n\n\n/******************/\n/* Data Addresses */\n/******************/\n/**\n *  Addresses for save data, Team is not copied here because we use where it is statically stored in memory\n *  Addresses are offsets from the 32bit addresses that can be found using the pointers (ptr locations are static)\n *  Money is xor'd against 32bit xor key, item quantity is xor'd against the first 2 bytes of that key.\n *  \n *  Dynamicly Addressed memory means the three sections of data move in memory (hence we need to look the up with ptrs)\n *  These change each time the bag is accessed or a warp is triggered (and at various other times)\n * \n *  There are 3 dynamic sections. SAV1 (mostly relating to team and items)\n *  SAV2 (storing the xor key, and trainer data, play time, settings, seen mons e.t.c)\n *  We don't deal with SAV3 but it's mostly boxed pokemon / box config   \n */\n\nconst EMERALD_PARTY_OFFSET = 0x020244EC;\nconst FIRE_RED_PARTY_OFFSET = 0x02024284;\nconst PLAYER_PARTY_LENGTH = 0x258;\n\n// DYNAMIC SAV1 PTRs\nconst FIRE_RED_SAVE_1_PTR = 0x03005008;\nconst EMERALD_SAVE_1_PTR = 0x03005D8C;\n// MONEY \nconst FIRE_RED_OBSF_MONEY_OFFSET = 0x0290; //(0x0218)???\nconst FIRE_RED_OBSF_MONEY_LENGTH = 4;\nconst EMERALD_OBSF_MONEY_OFFSET = 0x0490; //(0x0494)???\nconst EMERALD_OBSF_MONEY_LENGTH = 4;\n\n// DYNAMIC SAV2 PTRs\nconst FIRE_RED_SAVE_2_PTR = 0x0300500C;\nconst EMERALD_SAVE_2_PTR = 0x03005d90;\n// Name + Gender / If on bike or surfing\nconst NAME_STATE_OFFSET = 0;\nconst NAME_STATE_LENGTH = 9;\n// Trainer id and time (last 3 bytes button mode + text speed + sound/battle scene)\nconst ID_TIME_OFFSET = 10;\nconst ID_TIME_LENGTH = 12;\n// XOR Key\nconst FIRE_RED_XOR_KEY_OFFSET = 0x0F20;\nconst FIRE_RED_XOR_KEY_LENGTH = 4;\nconst EMERALD_XOR_KEY_OFFSET = 0xAC;\nconst EMERALD_XOR_KEY_LENGTH = 4;\n\n// ITEM POCKET\nconst FIRE_RED_ITEM_OFFSET = 0x0310;\nconst FIRE_RED_ITEM_LENGTH = 168;\nconst EMERALD_ITEM_OFFSET = 0x0560;\nconst EMERALD_ITEM_LENGTH = 120;\n\n// KEY ITEM POCKET\nconst FIRE_RED_KEY_ITEM_OFFSET = 0x03B8;\nconst FIRE_RED_KEY_ITEM_LENGTH = 120;\nconst EMERALD_KEY_ITEM_OFFSET = 0x05D8;\nconst EMERALD_KEY_ITEM_LENGTH = 120;\n\n// BALLS\nconst FIRE_RED_BALL_OFFSET = 0x0430;\nconst FIRE_RED_BALL_LENGTH = 52;\nconst EMERALD_BALL_OFFSET = 0x0650;\nconst EMERALD_BALL_LENGTH = 64;\n\n// TM Case\nconst FIRE_RED_TM_OFFSET = 0x0464;\nconst FIRE_RED_TM_LENGTH = 232;\nconst EMERALD_TM_OFFSET = 0x0690;\nconst EMERALD_TM_LENGTH = 256;\n\n// Berry Pocket\nconst FIRE_RED_BERRIES_OFFSET = 0x054C;\nconst FIRE_RED_BERRIES_LENGTH = 172;\nconst EMERALD_BERRIES_OFFSET = 0x0790;\nconst EMERALD_BERRIES_LENGTH = 184;\n\n// DYNAMIC SAV3 PTRs\nconst FIRE_RED_SAVE_3_PTR = 0x03005010;\nconst EMERALD_SAVE_3_PTR = 0x03005d94;\n\nconst BOX_LENGTH = 2400;\n\n/**************************/\n/* Bag Storage Management */\n/**************************/\n/**\n * \n *  Bag storeage requires special handling as quantities are xor'd with a special key \n *  that changes and will be different for each game\n * \n *  Additionally, storage size differs between games for now excess items will just be \n *  lost so we don't have to worry about storing additional item data outside the games\n * \n *  Additionally, additionally we do some special handling like, give the berry pouch if \n *  berries are already collected, or give a bike if they have one in the other game\n *\n */\n\nfunction BagStoreage() {\n    this.money = null;\n    //this.coins = null;\n\n    //this.pcItems = new Map();\n    this.itemPocket = new Map();\n    this.keyItemsPocket = new Map();\n    this.ballItemPocket = new Map();\n    this.tmCase = new Map();\n    this.berryPocket = new Map();\n}\n\nBagStoreage.prototype.readData = function (game) {\n    if (game == \"E\" || game == \"C\") {\n        this.readEmeraldData();\n    } else {\n        this.readFireRedData();\n    }\n}\n\nBagStoreage.prototype.readFireRedData = function () {\n    this.itemPocket.clear();\n    this.keyItemsPocket.clear();\n    this.ballItemPocket.clear();\n    this.tmCase.clear();\n    this.berryPocket.clear();\n\n    let save2Start = IodineGUI.Iodine.IOCore.cpu.read32(FIRE_RED_SAVE_2_PTR);\n    let xorKey32 = IodineGUI.Iodine.IOCore.cpu.read32(save2Start + FIRE_RED_XOR_KEY_OFFSET);\n    let xorKey16 = IodineGUI.Iodine.IOCore.cpu.read16(save2Start + FIRE_RED_XOR_KEY_OFFSET);\n\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(FIRE_RED_SAVE_1_PTR);\n    this.money = IodineGUI.Iodine.IOCore.cpu.read32(save1Start + FIRE_RED_OBSF_MONEY_OFFSET) ^ xorKey32;\n\n    // read items\n    this.readItemSection(save1Start, FIRE_RED_ITEM_OFFSET, FIRE_RED_ITEM_LENGTH, this.itemPocket, xorKey16);\n\n    // read key items\n    this.readItemSection(save1Start, FIRE_RED_KEY_ITEM_OFFSET, FIRE_RED_KEY_ITEM_LENGTH, this.keyItemsPocket, xorKey16);\n\n    // read balls\n    this.readItemSection(save1Start, FIRE_RED_BALL_OFFSET, FIRE_RED_BALL_LENGTH, this.ballItemPocket, xorKey16);\n\n    // read tms\n    this.readItemSection(save1Start, FIRE_RED_TM_OFFSET, FIRE_RED_TM_LENGTH, this.tmCase, xorKey16);\n\n    // read berries\n    this.readItemSection(save1Start, FIRE_RED_BERRIES_OFFSET, FIRE_RED_BERRIES_LENGTH, this.berryPocket, xorKey16);\n}\n\nBagStoreage.prototype.readEmeraldData = function () {\n    this.itemPocket.clear();\n    this.keyItemsPocket.clear();\n    this.ballItemPocket.clear();\n    this.tmCase.clear();\n    this.berryPocket.clear();\n\n    let save2Start = IodineGUI.Iodine.IOCore.cpu.read32(EMERALD_SAVE_2_PTR);\n    let xorKey32 = IodineGUI.Iodine.IOCore.cpu.read32(save2Start + EMERALD_XOR_KEY_OFFSET);\n    let xorKey16 = IodineGUI.Iodine.IOCore.cpu.read16(save2Start + EMERALD_XOR_KEY_OFFSET);\n\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(EMERALD_SAVE_1_PTR);\n    this.money = IodineGUI.Iodine.IOCore.cpu.read32(save1Start + EMERALD_OBSF_MONEY_OFFSET) ^ xorKey32;\n\n    // read items\n    this.readItemSection(save1Start, EMERALD_ITEM_OFFSET, EMERALD_ITEM_LENGTH, this.itemPocket, xorKey16);\n\n    // read key items\n    this.readItemSection(save1Start, EMERALD_KEY_ITEM_OFFSET, EMERALD_KEY_ITEM_LENGTH, this.keyItemsPocket, xorKey16);\n\n    // read balls\n    this.readItemSection(save1Start, EMERALD_BALL_OFFSET, EMERALD_BALL_LENGTH, this.ballItemPocket, xorKey16);\n\n    // read tms\n    this.readItemSection(save1Start, EMERALD_TM_OFFSET, EMERALD_TM_LENGTH, this.tmCase, xorKey16);\n\n    // read berries\n    this.readItemSection(save1Start, EMERALD_BERRIES_OFFSET, EMERALD_BERRIES_LENGTH, this.berryPocket, xorKey16);\n}\n\nBagStoreage.prototype.writeData = function (game, lastGame, isLoadingScreen) {\n    if (game == \"E\" || game == \"C\") {\n        this.writeDataToEmerald(game, lastGame, isLoadingScreen);\n    } else {\n        this.writeDataToFireRed(game, lastGame, isLoadingScreen);\n    }\n}\n\n\nBagStoreage.prototype.writeDataToFireRed = function (game, lastGame, isLoadingScreen) {\n    let save2Start = IodineGUI.Iodine.IOCore.cpu.read32(FIRE_RED_SAVE_2_PTR);\n    let xorKey32 = IodineGUI.Iodine.IOCore.cpu.read32(save2Start + FIRE_RED_XOR_KEY_OFFSET);\n    let xorKey16 = IodineGUI.Iodine.IOCore.cpu.read16(save2Start + FIRE_RED_XOR_KEY_OFFSET);\n\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(FIRE_RED_SAVE_1_PTR);\n\n    IodineGUI.Iodine.IOCore.cpu.write32(save1Start + FIRE_RED_OBSF_MONEY_OFFSET, this.money ^ xorKey32);\n\n    // We need to give the player the berry pocket or tm case if they have some \n    if (this.berryPocket.size >= 1) {\n        this.keyItemsPocket.set(365, 1); // one berry pouch\n    }\n    if (this.tmCase.size >= 1) {\n        this.keyItemsPocket.set(364, 1); // one tm case\n    }\n\n    // If we have blue flute give pokeflute\n    if (this.itemPocket.get(39)) {\n        this.keyItemsPocket.set(350, 1);\n    }\n\n    if (lastGame == \"C\") {\n        // Going from crystal to firered\n        let hasRocksmash = this.tmCase.get(296);\n        let hasWhirldpool = this.tmCase.get(344);\n        let hasBodyslam = this.keyItemsPocket.get(347);\n\n        this.tmCase.delete(296);\n        this.tmCase.delete(344);\n        this.keyItemsPocket.delete(347);\n\n        if(hasRocksmash) this.tmCase.set(344, 1);\n        if(hasWhirldpool) this.keyItemsPocket.set(347, 1); // Unused TM to represent whirldpool\n        if(hasBodyslam) this.tmCase.set(296, 1); \n    } \n\n    // write items\n    this.writeItemSection(save1Start, FIRE_RED_ITEM_OFFSET, FIRE_RED_ITEM_LENGTH, this.itemPocket, xorKey16, true);\n\n    // write key items\n    this.writeItemSection(save1Start, FIRE_RED_KEY_ITEM_OFFSET, FIRE_RED_KEY_ITEM_LENGTH, this.keyItemsPocket, xorKey16, true);\n\n    // write balls\n    this.writeItemSection(save1Start, FIRE_RED_BALL_OFFSET, FIRE_RED_BALL_LENGTH, this.ballItemPocket, xorKey16, true);\n\n    // write tms\n    this.writeItemSection(save1Start, FIRE_RED_TM_OFFSET, FIRE_RED_TM_LENGTH, this.tmCase, xorKey16, true);\n\n    // write berries\n    this.writeItemSection(save1Start, FIRE_RED_BERRIES_OFFSET, FIRE_RED_BERRIES_LENGTH, this.berryPocket, xorKey16, true);\n}\n\nBagStoreage.prototype.writeDataToEmerald = function (game, lastGame, isLoadingScreen) {\n    let save2Start = IodineGUI.Iodine.IOCore.cpu.read32(EMERALD_SAVE_2_PTR);\n    let xorKey32 = IodineGUI.Iodine.IOCore.cpu.read32(save2Start + EMERALD_XOR_KEY_OFFSET);\n    let xorKey16 = IodineGUI.Iodine.IOCore.cpu.read16(save2Start + EMERALD_XOR_KEY_OFFSET);\n\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(EMERALD_SAVE_1_PTR);\n\n    IodineGUI.Iodine.IOCore.cpu.write32(save1Start + EMERALD_OBSF_MONEY_OFFSET, this.money ^ xorKey32);\n\n    // If we have a bike from fire red but not a mach/acro bike from emerald we should get a mach bike \n    if (this.keyItemsPocket.get(360) && !this.keyItemsPocket.get(259) && !this.keyItemsPocket.get(272)) {\n        this.keyItemsPocket.set(259, 1);\n        this.keyItemsPocket.get(272, 1);\n    }\n\n    // If we have HM06/TM08 we need to make sure it's the right hm\n    // In Crystal HM06 is whirlpool and TM08 is Rocksmash\n    // In Emerald and FireRed HM06 is  Rocksmash and TM08 is 'Bulk Up'\n    if (game == \"E\" && lastGame == \"C\") {\n        // Going from crystal to emerald\n\n        let hasRocksmash = this.tmCase.get(296);\n        let hasWhirldpool = this.tmCase.get(344);\n        let hasBodyslam = this.keyItemsPocket.get(347);\n\n        this.tmCase.delete(296);\n        this.tmCase.delete(344);\n        this.keyItemsPocket.delete(347);\n\n        if(hasRocksmash) this.tmCase.set(344, 1);\n        if(hasWhirldpool) this.keyItemsPocket.set(347, 1); // Unused TM to represent whirldpool\n        if(hasBodyslam) this.tmCase.set(296, 1); \n\n    } else if (game == \"C\" && lastGame && lastGame != \"C\") {\n\n        // Going from firered or emerald into crystal\n        let hasRocksmash = this.tmCase.get(344);\n        let hasWhirldpool = this.keyItemsPocket.get(347);\n        let hasBodyslam = this.tmCase.get(296);\n\n        this.tmCase.delete(296);\n        this.tmCase.delete(344);\n        this.keyItemsPocket.delete(347);\n\n        if(hasRocksmash) this.tmCase.set(296, 1);\n        if(hasWhirldpool) this.tmCase.set(344, 1); // Unused TM to represent bodyslam\n        if(hasBodyslam) this.keyItemsPocket.set(347, 1); \n\n    }\n\n    // write items\n    this.writeItemSection(save1Start, EMERALD_ITEM_OFFSET, EMERALD_ITEM_LENGTH, this.itemPocket, xorKey16, true);\n\n    // write key items\n    this.writeItemSection(save1Start, EMERALD_KEY_ITEM_OFFSET, EMERALD_KEY_ITEM_LENGTH, this.keyItemsPocket, xorKey16, true);\n\n    // write balls\n    this.writeItemSection(save1Start, EMERALD_BALL_OFFSET, EMERALD_BALL_LENGTH, this.ballItemPocket, xorKey16, true);\n\n    // write tms\n    this.writeItemSection(save1Start, EMERALD_TM_OFFSET, EMERALD_TM_LENGTH, this.tmCase, xorKey16, true);\n\n    // write berries\n    this.writeItemSection(save1Start, EMERALD_BERRIES_OFFSET, EMERALD_BERRIES_LENGTH, this.berryPocket, xorKey16, true);\n}\n\nBagStoreage.prototype.readItemSection = function(save1Start, offset, length, storeTo, xorKey16) {\n    for (let i = 0;  i < (length/4); i++) {\n        let item = IodineGUI.Iodine.IOCore.cpu.read16(save1Start + offset + (i*4));\n\n        if (item != 0) {\n\n            let quantity = IodineGUI.Iodine.IOCore.cpu.read16(save1Start + offset + (i*4) + 2) ^ xorKey16;\n            storeTo.set(item, quantity);\n\n        }\n    }\n}\n\nBagStoreage.prototype.writeItemSection = function(save1Start, offset, length, store, xorKey16, clear) {\n\n    var storeArr = [...store];\n\n    for (let i = 0;  i < (length/4); i++) {\n\n        if (storeArr.length > i) {\n\n            let item = (storeArr[i])[0];\n            let quantity = (storeArr[i])[1] ^ xorKey16;\n\n            IodineGUI.Iodine.IOCore.cpu.write16(save1Start + offset + (i*4), item);\n            IodineGUI.Iodine.IOCore.cpu.write16(save1Start + offset + (i*4) + 2, quantity);\n\n        } else {\n\n            // No more items to copy\n            if(clear) {\n                let item = ITEM_DATA.Nothing.number;\n                let quantity = 0 ^ xorKey16;\n                \n                IodineGUI.Iodine.IOCore.cpu.write16(save1Start + offset + (i*4), item);\n                IodineGUI.Iodine.IOCore.cpu.write16(save1Start + offset + (i*4) + 2, quantity);\n            } else {\n                break;\n            }\n        }\n    }\n}\n\nBagStoreage.prototype.hasBike = function () {\n    // Add up quantities of any bikes\n    return ((this.keyItemsPocket.get(259) || 0) + (this.keyItemsPocket.get(272) || 0) + (this.keyItemsPocket.get(360) || 0)) > 0\n}\n\nBagStoreage.prototype.hasFlute = function () {\n    // Add up quantities of any flutes\n    return ((this.keyItemsPocket.get(36) || 0) + (this.keyItemsPocket.get(350) || 0)) > 0\n}\n\n/*******************/\n/* Flag Management */\n/*******************/\nvar badgeSync = true;\n\n// This handles any general vars/flags that need to be transfered when switching games\n\n// IN DYNAMIC SAV1\n// The equations are so the offsets line up the the flags defined in the decomp projects\n// https://github.com/pret/pokefirered/blob/master/include/constants/flags.h\n// https://github.com/pret/pokeemerald/blob/master/include/constants/flags.h\n// https://github.com/pret/pokefirered/blob/master/include/constants/vars.h\n// https://github.com/pret/pokeemerald/blob/master/include/constants/vars.h\nconst FIRE_RED_BASE_FLAG_OFFSET    = 0xEE0;\nconst FIRE_RED_SYS_FLAGS_OFFSET    = 0xFE0;\nconst FIRE_RED_BADGE1_OFFSET       = 0x20;\nconst FIRE_RED_BADGE2_OFFSET       = 0x21;\nconst FIRE_RED_BADGE3_OFFSET       = 0x22;\nconst FIRE_RED_BADGE4_OFFSET       = 0x23;\nconst FIRE_RED_BADGE5_OFFSET       = 0x24;\nconst FIRE_RED_BADGE6_OFFSET       = 0x25;\nconst FIRE_RED_BADGE7_OFFSET       = 0x26;\nconst FIRE_RED_BADGE8_OFFSET       = 0x27;\nconst FIRE_RED_RUNNING_SHOE_OFFSET = 0x2F;\nconst FIRE_RED_POKEDEX_OFFSET      = 0x29; \nconst FIRE_RED_NATIONAL_DEX_OFFSET = 0x40;\nconst FIRE_RED_BADGE_OFFSETS = [FIRE_RED_BADGE1_OFFSET, \n                                FIRE_RED_BADGE2_OFFSET, \n                                FIRE_RED_BADGE3_OFFSET, \n                                FIRE_RED_BADGE4_OFFSET, \n                                FIRE_RED_BADGE5_OFFSET, \n                                FIRE_RED_BADGE6_OFFSET, \n                                FIRE_RED_BADGE7_OFFSET, \n                                FIRE_RED_BADGE8_OFFSET];\nconst FIRE_RED_BIKE_OBTAINED_OFFSET = 0x271;\nconst FIRE_RED_FLUTE_OBTAINED_OFFSET = 0x23D;\n\nconst EMERALD_BASE_FLAGS_OFFSET   = 0x1270;\nconst EMERALD_SYS_FLAGS_OFFSET    = 0x137C;\nconst EMERALD_BADGE1_OFFSET       = 0x7;\nconst EMERALD_BADGE2_OFFSET       = 0x8;\nconst EMERALD_BADGE3_OFFSET       = 0x9;\nconst EMERALD_BADGE4_OFFSET       = 0xA;\nconst EMERALD_BADGE5_OFFSET       = 0xB;\nconst EMERALD_BADGE6_OFFSET       = 0xC;\nconst EMERALD_BADGE7_OFFSET       = 0xD;\nconst EMERALD_BADGE8_OFFSET       = 0xE;\nconst EMERALD_RUNNING_SHOE_OFFSET = 0x60;\nconst EMERALD_POKEDEX_OFFSET      = 0x1; \nconst EMERALD_NATIONAL_DEX_OFFSET = 0x36;\nconst EMERALD_BADGE_OFFSETS = [EMERALD_BADGE1_OFFSET, \n                               EMERALD_BADGE2_OFFSET, \n                               EMERALD_BADGE3_OFFSET, \n                               EMERALD_BADGE4_OFFSET, \n                               EMERALD_BADGE5_OFFSET, \n                               EMERALD_BADGE6_OFFSET, \n                               EMERALD_BADGE7_OFFSET, \n                               EMERALD_BADGE8_OFFSET];\n\nconst EMERALD_BASE_VAR_OFFSET = 0x139c;\nconst FIRE_RED_BASE_VAR_OFFSET = 0x1000;\n\nconst EMERALD_REPEL_STEPS_OFFSET = 0x4021;\nconst FIRE_RED_REPEL_STEPS_OFFSET = 0x4020;\n\nconst EMERALD_STARTER_CHOICE_OFFSET = 0x4023;\nconst FIRE_RED_STARTER_CHOICE_OFFSET = 0x4031;\n\nfunction FlagManager(hasBike, hasFlute) {\n    this.badge1 = null;\n    this.badge2 = null;\n    this.badge3 = null;\n    this.badge4 = null;\n    this.badge5 = null;\n    this.badge6 = null;\n    this.badge7 = null;\n    this.badge8 = null;\n    this.hasRunningShoes = null;\n    this.hasFlute = hasFlute;\n    this.HMState = null;\n    this.hasBike = hasBike;\n    this.repelSteps = null;\n    this.starterChoice = null;\n}\n\nFlagManager.prototype.getFlag = function (saveOffset, sectionOffset, flagOffset) {\n\n    let flagByte = IodineGUI.Iodine.IOCore.cpu.read8(saveOffset + sectionOffset + Math.ceil((flagOffset + 1) / 8) - 1);\n    let flagBit = flagOffset % 8;\n\n    return !!+flagByte.toString(2).padStart(8, 0).split(\"\").reverse()[flagBit];\n}\n\nFlagManager.prototype.setFlag = function (saveOffset, sectionOffset, flagOffset, value) {\n\n    let flagByte = IodineGUI.Iodine.IOCore.cpu.read8(saveOffset + sectionOffset + Math.ceil((flagOffset + 1) / 8) - 1);\n    let flagBit = flagOffset % 8;\n\n    let byteArr = flagByte.toString(2).padStart(8, 0).split(\"\").reverse();\n    byteArr[flagBit] = value;\n\n    IodineGUI.Iodine.IOCore.cpu.write8(saveOffset + sectionOffset + Math.ceil((flagOffset + 1) / 8) - 1, parseInt(byteArr.reverse().join(\"\"), 2));\n\n}\n\nFlagManager.prototype.readFlags = function (game) {\n    if (game == \"E\") {\n        this.readEmeraldFlags();\n    } \n    else if (game == \"C\") {\n        this.readCrystalFlags();\n    } else {\n        this.readFireRedFlags();\n    }\n}\n\nFlagManager.prototype.readEmeraldFlags = function () {\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(EMERALD_SAVE_1_PTR);\n\n    this.badge1          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE1_OFFSET);\n    this.badge2          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE2_OFFSET);\n    this.badge3          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE3_OFFSET);\n    this.badge4          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE4_OFFSET);\n    this.badge5          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE5_OFFSET);\n    this.badge6          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE6_OFFSET);\n    this.badge7          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE7_OFFSET);\n    this.badge8          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE8_OFFSET);\n    this.hasRunningShoes = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_RUNNING_SHOE_OFFSET);\n    \n    this.HMState = new HMState();\n    this.HMState.evaluate(\"E\", this.badge1, this.badge2, this.badge3, this.badge4, this.badge5, this.badge6, this.badge7, this.badge8);\n\n    this.repelSteps = readGameVar(\"E\", EMERALD_REPEL_STEPS_OFFSET);\n    //this.starterChoice = readGameVar(\"E\", EMERALD_STARTER_CHOICE_OFFSET);\n}\n\nFlagManager.prototype.readCrystalFlags = function () {\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(EMERALD_SAVE_1_PTR);\n\n    this.badge1          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE1_OFFSET);\n    this.badge2          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE2_OFFSET);\n    this.badge3          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE3_OFFSET);\n    this.badge4          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE4_OFFSET);\n    this.badge5          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE5_OFFSET);\n    this.badge6          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE6_OFFSET);\n    this.badge7          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE7_OFFSET);\n    this.badge8          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE8_OFFSET);\n    this.hasRunningShoes = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_RUNNING_SHOE_OFFSET);\n\n    this.HMState = new HMState();\n    this.HMState.evaluate(\"C\", this.badge1, this.badge2, this.badge3, this.badge4, this.badge5, this.badge6, this.badge7, this.badge8);\n\n    this.repelSteps = readGameVar(\"C\", EMERALD_REPEL_STEPS_OFFSET);\n    //this.starterChoice = readGameVar(\"C\", EMERALD_STARTER_CHOICE_OFFSET);\n}\n\nFlagManager.prototype.readFireRedFlags = function () {\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(FIRE_RED_SAVE_1_PTR);\n    \n    this.badge1          = this.getFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE1_OFFSET);\n    this.badge2          = this.getFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE2_OFFSET);\n    this.badge3          = this.getFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE3_OFFSET);\n    this.badge4          = this.getFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE4_OFFSET);\n    this.badge5          = this.getFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE5_OFFSET);\n    this.badge6          = this.getFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE6_OFFSET);\n    this.badge7          = this.getFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE7_OFFSET);\n    this.badge8          = this.getFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE8_OFFSET);\n    this.hasRunningShoes = this.getFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_RUNNING_SHOE_OFFSET);\n\n    this.HMState = new HMState();\n    this.HMState.evaluate(\"FR\", this.badge1, this.badge2, this.badge3, this.badge4, this.badge5, this.badge6, this.badge7, this.badge8);\n\n    this.repelSteps = readGameVar(\"FR\", FIRE_RED_REPEL_STEPS_OFFSET);\n    this.starterChoice = readGameVar(\"FR\", FIRE_RED_STARTER_CHOICE_OFFSET);\n}\n\nFlagManager.prototype.writeFlags = function (game, lastGame) {\n    if (game == \"E\") {\n        this.writeEmeraldFlags();\n    } \n    else if (game == \"C\") {\n        this.writeCrystalFlags();\n    } else {\n        this.writeFireRedFlags();\n    }\n}\n\nFlagManager.prototype.writeEmeraldFlags = function () {\n\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(EMERALD_SAVE_1_PTR);\n\n    this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_RUNNING_SHOE_OFFSET, +this.hasRunningShoes);\n\n    // Enable national dex\n    this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_NATIONAL_DEX_OFFSET, 1);\n    writeGameVar(\"E\", 0x404E, 0x0302);\n    let save2Start = IodineGUI.Iodine.IOCore.cpu.read32(EMERALD_SAVE_2_PTR);\n    IodineGUI.Iodine.IOCore.cpu.write8(save2Start + 26, 0xDA);\n\n    // Open regi doors\n    this.setFlag(save1Start, EMERALD_BASE_FLAGS_OFFSET, 0xE4, 1);\n\n    // Open Devon Corp F1\n    this.setFlag(save1Start, EMERALD_BASE_FLAGS_OFFSET, 0x90, 1);\n\n    // Not On Bike Path\n    modifySystemFlag(\"E\", 0x2B, 0);\n\n    // Open Sootopolis Gym Door\n    this.setFlag(save1Start, EMERALD_BASE_FLAGS_OFFSET, 0x9E, 1);\n\n    // Sootopolis always in nice state\n    // We need to prevent locked doors, people standing around and lilycove dept roof being locked off\n    writeGameVar(\"E\", EMERALD_BASE_FLAGS_OFFSET, 0x405E, 0);\n    this.setFlag(save1Start, EMERALD_BASE_FLAGS_OFFSET, 0x81, 1);\n\n    // Hide Steven and wallace in sootopolis\n    this.setFlag(save1Start, EMERALD_BASE_FLAGS_OFFSET, 0x3CD, 1);\n    this.setFlag(save1Start, EMERALD_BASE_FLAGS_OFFSET, 0x330, 1);\n\n    // RRAQUAZA always available\n    writeGameVar(\"E\", EMERALD_BASE_FLAGS_OFFSET, 0x40D7, 0);\n    this.setFlag(save1Start, EMERALD_BASE_FLAGS_OFFSET, 0x50, 0);\n\n    // Show steven on the bridge if we don't have the devon scope\n    this.setFlag(save1Start, EMERALD_BASE_FLAGS_OFFSET, 0x3CC, 0);\n    \n    // Make sure the magma embelem can always be got\n    // Hide Jagged Pass Magma guard\n    this.setFlag(save1Start, EMERALD_BASE_FLAGS_OFFSET, 0x34F, 1);\n    writeGameVar(\"E\", EMERALD_BASE_FLAGS_OFFSET, 0x40B9, 0);\n\n    // Unblock Tunnlers rest house \n    this.setFlag(save1Start, EMERALD_BASE_FLAGS_OFFSET, 0x8F, 1);\n\n    // Unblock Devon corp f1\n    this.setFlag(save1Start, EMERALD_BASE_FLAGS_OFFSET, 0x90, 1);\n\n    // Remove the brigde Kecleon so we can ride up from lilycove\n    this.setFlag(save1Start, EMERALD_BASE_FLAGS_OFFSET, 0x3CA, 1);\n\n    // Change Slateport state to 0 (to work around a glitch where game loops exiting the pokecenter)\n    // This was needed for the IodineGBA scripted version it might not be needed in the rom hack\n    writeGameVar(\"E\", EMERALD_BASE_FLAGS_OFFSET, 0x4058, 0);\n\n    // Remove Team Aqua from slateport and above slateport\n    this.setFlag(save1Start, EMERALD_BASE_FLAGS_OFFSET, 0x372, 1);\n    this.setFlag(save1Start, EMERALD_BASE_FLAGS_OFFSET, 0x384, 1);\n\n    if (badgeSync) {\n        \n        let badge1 = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE1_OFFSET);\n        let badge2 = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE2_OFFSET);\n        let badge3 = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE3_OFFSET);\n        let badge4 = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE4_OFFSET);\n        let badge5 = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE5_OFFSET);\n        let badge6 = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE6_OFFSET);\n        let badge7 = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE7_OFFSET);\n        let badge8 = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE8_OFFSET);\n\n        let updatedBadges = this.HMState.updateBadges(\"E\", badge1, badge2, badge3, badge4, badge5, badge6, badge7, badge8);\n\n        this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE1_OFFSET, +(updatedBadges[0] || badge1));\n        this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE2_OFFSET, +(updatedBadges[1] || badge2));\n        this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE3_OFFSET, +(updatedBadges[2] || badge3));\n        this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE4_OFFSET, +(updatedBadges[3] || badge4));\n        this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE5_OFFSET, +(updatedBadges[4] || badge5));\n        this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE6_OFFSET, +(updatedBadges[5] || badge6));\n        this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE7_OFFSET, +(updatedBadges[6] || badge7));\n        this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE8_OFFSET, +(updatedBadges[7] || badge8));\n\n    }\n\n    writeGameVar(\"E\", EMERALD_REPEL_STEPS_OFFSET, this.repelSteps);\n\n    if (this.starterChoice) {\n        writeGameVar(\"E\", EMERALD_STARTER_CHOICE_OFFSET, this.starterChoice);\n    }\n}\n\nFlagManager.prototype.writeCrystalFlags = function () {\n\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(EMERALD_SAVE_1_PTR);\n\n    this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_RUNNING_SHOE_OFFSET, +this.hasRunningShoes);\n\n    // Enable national dex\n    this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_NATIONAL_DEX_OFFSET, 1);\n    writeGameVar(\"E\", 0x404E, 0x0302);\n    let save2Start = IodineGUI.Iodine.IOCore.cpu.read32(EMERALD_SAVE_2_PTR);\n    IodineGUI.Iodine.IOCore.cpu.write8(save2Start + 26, 0xDA);\n\n    if (badgeSync) {\n        \n        let badge1 = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE1_OFFSET);\n        let badge2 = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE2_OFFSET);\n        let badge3 = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE3_OFFSET);\n        let badge4 = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE4_OFFSET);\n        let badge5 = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE5_OFFSET);\n        let badge6 = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE6_OFFSET);\n        let badge7 = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE7_OFFSET);\n        let badge8 = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE8_OFFSET);\n\n        let updatedBadges = this.HMState.updateBadges(\"C\", badge1, badge2, badge3, badge4, badge5, badge6, badge7, badge8);\n\n        this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE1_OFFSET, +(updatedBadges[0] || badge1));\n        this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE2_OFFSET, +(updatedBadges[1] || badge2));\n        this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE3_OFFSET, +(updatedBadges[2] || badge3));\n        this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE4_OFFSET, +(updatedBadges[3] || badge4));\n        this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE5_OFFSET, +(updatedBadges[4] || badge5));\n        this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE6_OFFSET, +(updatedBadges[5] || badge6));\n        this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE7_OFFSET, +(updatedBadges[6] || badge7));\n        this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE8_OFFSET, +(updatedBadges[7] || badge8));\n        \n    }\n\n    writeGameVar(\"C\", EMERALD_REPEL_STEPS_OFFSET, this.repelSteps);\n    // Enabling this disables all the battle with Silver\n    //writeGameVar(\"C\", EMERALD_STARTER_CHOICE_OFFSET, this.starterChoice);\n}\n\nFlagManager.prototype.writeFireRedFlags = function () {\n\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(FIRE_RED_SAVE_1_PTR);\n\n    this.setFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_RUNNING_SHOE_OFFSET, +this.hasRunningShoes);\n\n    // Enable national dex\n    this.setFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_NATIONAL_DEX_OFFSET, 1);\n    writeGameVar(\"FR\", 0x404E, 0x6258);\n    let save2Start = IodineGUI.Iodine.IOCore.cpu.read32(FIRE_RED_SAVE_2_PTR);\n    IodineGUI.Iodine.IOCore.cpu.write8(save2Start + 27, 0xB9);\n\n    // Not On Bike Path\n    modifySystemFlag(\"FR\", 0x30, 0);\n\n    if (this.hasBike) {\n        this.setFlag(save1Start, FIRE_RED_BASE_FLAG_OFFSET, FIRE_RED_BIKE_OBTAINED_OFFSET, 1);\n    }\n\n    if (this.hasFlute) {\n        this.setFlag(save1Start, FIRE_RED_BASE_FLAG_OFFSET, FIRE_RED_FLUTE_OBTAINED_OFFSET, 1);\n    }\n\n    if (badgeSync) {\n        \n        let badge1 = this.getFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE1_OFFSET);\n        let badge2 = this.getFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE2_OFFSET);\n        let badge3 = this.getFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE3_OFFSET);\n        let badge4 = this.getFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE4_OFFSET);\n        let badge5 = this.getFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE5_OFFSET);\n        let badge6 = this.getFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE6_OFFSET);\n        let badge7 = this.getFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE7_OFFSET);\n        let badge8 = this.getFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE8_OFFSET);\n\n        let updatedBadges = this.HMState.updateBadges(\"FR\", badge1, badge2, badge3, badge4, badge5, badge6, badge7, badge8);\n\n        this.setFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE1_OFFSET, +(updatedBadges[0] || badge1));\n        this.setFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE2_OFFSET, +(updatedBadges[1] || badge2));\n        this.setFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE3_OFFSET, +(updatedBadges[2] || badge3));\n        this.setFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE4_OFFSET, +(updatedBadges[3] || badge4));\n        this.setFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE5_OFFSET, +(updatedBadges[4] || badge5));\n        this.setFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE6_OFFSET, +(updatedBadges[5] || badge6));\n        this.setFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE7_OFFSET, +(updatedBadges[6] || badge7));\n        this.setFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE8_OFFSET, +(updatedBadges[7] || badge8));\n        \n    }\n    \n    writeGameVar(\"FR\", FIRE_RED_REPEL_STEPS_OFFSET, this.repelSteps);\n    //writeGameVar(\"FR\", FIRE_RED_STARTER_CHOICE_OFFSET, this.starterChoice);\n}\n\nfunction modifyBadge(game, badgeNumber, shouldGiveOrRemoveBit) {\n\n    let badgeOffsets = game == \"FR\" ? FIRE_RED_BADGE_OFFSETS : EMERALD_BADGE_OFFSETS\n    modifySystemFlag(game, badgeOffsets[badgeNumber - 1], shouldGiveOrRemoveBit);\n\n}\n\nfunction modifyRunningShoes(game, shouldGiveOrRemoveBit) {\n\n    let offset = game == \"FR\" ? FIRE_RED_RUNNING_SHOE_OFFSET : EMERALD_RUNNING_SHOE_OFFSET\n    modifySystemFlag(game, offset, shouldGiveOrRemoveBit);\n\n}\n\nfunction modifySystemFlag(game, offset, shouldGiveOrRemoveBit) {\n\n    let manager = new FlagManager();\n    manager.readFlags(game);\n\n    let savePtr = game == \"FR\" ? FIRE_RED_SAVE_1_PTR : EMERALD_SAVE_1_PTR;\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(savePtr);\n\n    let sysFlagOffset = game == \"FR\" ? FIRE_RED_SYS_FLAGS_OFFSET : EMERALD_SYS_FLAGS_OFFSET;\n\n    manager.setFlag(save1Start, sysFlagOffset, offset, shouldGiveOrRemoveBit);\n\n}\n\nfunction modifyBaseFlag(game, offset, shouldGiveOrRemoveBit) {\n\n    let manager = new FlagManager();\n    manager.readFlags(game);\n\n    let savePtr = game == \"FR\" ? FIRE_RED_SAVE_1_PTR : EMERALD_SAVE_1_PTR;\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(savePtr);\n\n    let sysFlagOffset = game == \"FR\" ? FIRE_RED_BASE_FLAG_OFFSET : EMERALD_BASE_FLAGS_OFFSET;\n\n    manager.setFlag(save1Start, sysFlagOffset, offset, shouldGiveOrRemoveBit);\n\n}\n\nfunction readSystemFlag(game, offset) {\n\n    let manager = new FlagManager();\n    manager.readFlags(game);\n\n    let savePtr = game == \"FR\" ? FIRE_RED_SAVE_1_PTR : EMERALD_SAVE_1_PTR;\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(savePtr);\n\n    let sysFlagOffset = game == \"FR\" ? FIRE_RED_SYS_FLAGS_OFFSET : EMERALD_SYS_FLAGS_OFFSET;\n\n    return manager.getFlag(save1Start, sysFlagOffset, offset);\n\n}\nfunction writeGameVar(game, offset, data) {\n\n    let savePtr = game == \"FR\" ? FIRE_RED_SAVE_1_PTR : EMERALD_SAVE_1_PTR;\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(savePtr);\n\n    let baseVarOffset = game == \"FR\" ? FIRE_RED_BASE_VAR_OFFSET : EMERALD_BASE_VAR_OFFSET;\n\n    IodineGUI.Iodine.IOCore.cpu.write16(save1Start + baseVarOffset + ((offset - 0x4000) * 2), data);\n}\n\nfunction readGameVar(game, offset) {\n\n    let savePtr = game == \"FR\" ? FIRE_RED_SAVE_1_PTR : EMERALD_SAVE_1_PTR;\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(savePtr);\n\n    let baseVarOffset = game == \"FR\" ? FIRE_RED_BASE_VAR_OFFSET : EMERALD_BASE_VAR_OFFSET;\n\n    return IodineGUI.Iodine.IOCore.cpu.read16(save1Start + baseVarOffset + ((offset - 0x4000) * 2));\n}\n\n// EQUIVILENT BADGE UNLOCKS\n/*           | FR    | C     | E     |\n| Flash      | GYM 1 | GYM 1 | GYM 2 |   \n| Cut        | GYM 2 | GYM 2 | GYM 1 |\n| Fly        | GYM 3 | GYM 5 | GYM 6 |\n| Strength   | GYM 4 | GYM 3 | GYM 4 |\n| Surf       | GYM 5 | GYM 4 | GYM 5 |\n| Rock Smash | GYM 6 |       | GYM 3 |\n| Waterfall  | GYM 7 | GYM 8 | GYM 8 |\n| Dive       |       |       | GYM 7 | \n| Whirlpool  |       | GYM 7 |       |\n*/\nfunction HMState() {\n    this.canFlash     = false;\n    this.canCut       = false;\n    this.canFly       = false;\n    this.canStrength  = false;\n    this.canSurf      = false;\n    this.canSmash     = false;\n    this.canWaterfall = false;\n    this.canDive      = false;\n    this.canWhirlpool = false;\n}\n\nHMState.prototype.evaluate = function (game, badge1, badge2, badge3, badge4, badge5, badge6, badge7, badge8) {\n    if (game == \"E\") {\n        this.canFlash     = badge2;\n        this.canCut       = badge1;\n        this.canFly       = badge6;\n        this.canStrength  = badge4;\n        this.canSurf      = badge5;\n        this.canSmash     = badge3;\n        this.canWaterfall = badge8;\n        this.canDive      = badge7;\n        this.canWhirlpool = false;\n    } \n    else if (game == \"C\") {\n        this.canFlash     = badge1;\n        this.canCut       = badge2;\n        this.canFly       = badge5;\n        this.canStrength  = badge3;\n        this.canSurf      = badge4;\n        this.canSmash     = false; // because there is no badge requirement\n        this.canWaterfall = badge8;\n        this.canDive      = false;\n        this.canWhirlpool = badge7;\n    } else {\n        this.canFlash     = badge1;\n        this.canCut       = badge2;\n        this.canFly       = badge3;\n        this.canStrength  = badge4;\n        this.canSurf      = badge5;\n        this.canSmash     = badge6;\n        this.canWaterfall = badge7;\n        this.canDive      = false;\n        this.canWhirlpool = false;\n    }\n}\n\nHMState.prototype.updateBadges = function (game, badge1, badge2, badge3, badge4, badge5, badge6, badge7, badge8) {\n\n    let badges = [];\n\n    if (game == \"E\") {\n        badges[1 - 1] = +(badge1  || this.canCut);\n        badges[2 - 1] = +(badge2  || this.canFlash);\n        badges[3 - 1] = +(badge3  || this.canSmash);\n        badges[4 - 1] = +(badge4  || this.canStrength);\n        badges[5 - 1] = +(badge5  || this.canSurf);\n        badges[6 - 1] = +(badge6  || this.canFly);\n        badges[7 - 1] = +(badge7  || this.canDive);\n        badges[8 - 1] = +(badge8  || this.canWaterfall);\n    } \n    else if (game == \"C\") {\n        badges[1 - 1] = +(badge1 || this.canFlash);\n        badges[2 - 1] = +(badge2 || this.canCut);\n        badges[3 - 1] = +(badge3 || this.canStrength);\n        badges[4 - 1] = +(badge4 || this.canSurf);\n        badges[5 - 1] = +(badge5 || this.canFly);\n        badges[8 - 1] = +(badge8 || this.canWaterfall);\n    } else {\n        badges[1 - 1] = +(badge1  || this.canFlash);\n        badges[2 - 1] = +(badge2  || this.canCut);\n        badges[3 - 1] = +(badge3  || this.canFly);\n        badges[4 - 1] = +(badge4  || this.canStrength);\n        badges[5 - 1] = +(badge5  || this.canSurf);\n        badges[6 - 1] = +(badge6  || this.canSmash);\n        badges[7 - 1] = +(badge7  || this.canWaterfall);\n    }\n\n    return badges;\n}"],"names":["isWarping","switchingGameState","randomWarpsEnabled","FIRE_RED_LAST_BANK","FIRE_RED_CURRENT_BANK","FIRE_RED_CURRENT_MAP","FIRE_RED_CURRENT_WARP","EMERALD_LAST_BANK","EMERALD_CURRENT_BANK","EMERALD_CURRENT_MAP","EMERALD_CURRENT_WARP","EMERALD_MAP_TYPE","FIRE_RED_MAP_TYPE","EMERALD_gMapHeader","FIRE_RED_gMapHeader","flagManager","isInSafari","volumeBeforeWarp","originalBeforeWarpId","getDesitnation","IodineGUI","Iodine","IOCore","cartridge","romCode","cpu","read8WithoutIntercept","bank1","map1","warpNo1","destination","bank2","map2","warpNo2","fixPlayerPositionInWarp","positionForcing","warpsNeedingPositionForces","get","fromEscalator","escalatorTriggers","has","xAddress","yAddress","save1Start","read32","FIRE_RED_SAVE_1_PTR","save1Start1","EMERALD_SAVE_1_PTR","updatedXPos","updatedYPos","read16","write16","GameBoyAdvanceCPU","prototype","write32WithoutIntercept","write32","address","data","pause","beforeRomCode","partySlice","readWRAMSlice","EMERALD_PARTY_OFFSET","FIRE_RED_PARTY_OFFSET","PLAYER_PARTY_LENGTH","playerNameAndState","dynamicMemorySlice","EMERALD_SAVE_2_PTR","FIRE_RED_SAVE_2_PTR","NAME_STATE_OFFSET","NAME_STATE_LENGTH","idAndPlayTime","ID_TIME_OFFSET","ID_TIME_LENGTH","box1","EMERALD_SAVE_3_PTR","FIRE_RED_SAVE_3_PTR","BOX_LENGTH","bagStoreage","BagStoreage","readData","FlagManager","hasBike","hasFlute","readFlags","saveStateManager","loadState","gameSwitchingWarp","toRomCode","this","write8","toBank","toMap","toWarpNo","currentRomCode","spliceWRAM","dynamicMemorySplice","writeData","writeFlags","mixerInput","volume","document","getElementById","classList","add","play","remove","getFlag","FIRE_RED_SYS_FLAGS_OFFSET","specialPostWarpHandling","EMERALD_SYS_FLAGS_OFFSET","Map","set","Set","write8WithoutIntercept","forceNextWarp","EMERALD_MOVEMENT_MODE_OFFSET","FIRE_RED_MOVEMENT_MODE_OFFSET","MOVEMENT_MODE_WALK","MOVEMENT_MODE_BIKE","MOVEMENT_MODE_SURF","autoBike","teleportAnywhere","read8","current","current1","handleWarpRedirection","reverseNextWarp","specialPreWarpHandling","pkwarp","specialDuringWarpHandling","destination1","writeGameVar","readGameVar","setFlag","modifyBaseFlag","forceStateAfterDelay","checked","M","toast","html","displayLength","click","destination2","destination3","async","movementMode","delayTime","delay","getSpeed","forcePlayerState","quickSpeedUp","duration","currentSpeed","setSpeed","volumeBefore","quickHideScreen","elmnt","offsetWidth","length","startAddress","endAddress","memory","externalRAM","slice","i","bank","map","warpNo","usingHomeWarp","handelHomeWarp","pkWarp","trigger","toParts","split","PKWarp","warpList","source","toParts1","console","log","saveState","walkThroughWalls","runIndoors","frWallsOffset","frRunIndoorsOffset","GameBoyAdvanceMultiCartridge","initializeWithoutIntercept","initialize","startingRom","cartriges","ROM","readROM16WithoutIntercept","readROM16","currentlySaving","saveAfterDelay","syncSaveStateSaves","readROM8WithoutIntercept","readROM8","FIRE_RED_CURRENT_GROUND_OFFSET","EMERALD_CURRENT_GROUND_OFFSET","CURRENT_GROUND_LAND","CURRENT_GROUND_WATER","CURRENT_GROUND_LADDER","CURRENT_GROUND_ELEVATED","EMERALD_STATE_OFFSET","FIRE_RED_STATE_OFFSET","state","whiteoutTeam","dynamicPointer","offsetInDynamic","FIRE_RED_OBSF_MONEY_OFFSET","FIRE_RED_OBSF_MONEY_LENGTH","EMERALD_OBSF_MONEY_OFFSET","EMERALD_OBSF_MONEY_LENGTH","FIRE_RED_XOR_KEY_OFFSET","FIRE_RED_XOR_KEY_LENGTH","EMERALD_XOR_KEY_OFFSET","EMERALD_XOR_KEY_LENGTH","FIRE_RED_ITEM_OFFSET","FIRE_RED_ITEM_LENGTH","EMERALD_ITEM_OFFSET","EMERALD_ITEM_LENGTH","FIRE_RED_KEY_ITEM_OFFSET","FIRE_RED_KEY_ITEM_LENGTH","EMERALD_KEY_ITEM_OFFSET","EMERALD_KEY_ITEM_LENGTH","FIRE_RED_BALL_OFFSET","FIRE_RED_BALL_LENGTH","EMERALD_BALL_OFFSET","EMERALD_BALL_LENGTH","FIRE_RED_TM_OFFSET","FIRE_RED_TM_LENGTH","EMERALD_TM_OFFSET","EMERALD_TM_LENGTH","FIRE_RED_BERRIES_OFFSET","FIRE_RED_BERRIES_LENGTH","EMERALD_BERRIES_OFFSET","EMERALD_BERRIES_LENGTH","money","itemPocket","keyItemsPocket","ballItemPocket","tmCase","berryPocket","game","readEmeraldData","readFireRedData","clear","save2Start","xorKey32","xorKey16","readItemSection","lastGame","isLoadingScreen","writeDataToEmerald","writeDataToFireRed","size","hasRocksmash","hasWhirldpool","hasBodyslam","delete","writeItemSection","hasRocksmash1","hasWhirldpool1","hasBodyslam1","offset","storeTo","item","quantity","store","storeArr","item1","ITEM_DATA","Nothing","number","quantity1","badgeSync","FIRE_RED_BASE_FLAG_OFFSET","FIRE_RED_BADGE1_OFFSET","FIRE_RED_BADGE2_OFFSET","FIRE_RED_BADGE3_OFFSET","FIRE_RED_BADGE4_OFFSET","FIRE_RED_BADGE5_OFFSET","FIRE_RED_BADGE6_OFFSET","FIRE_RED_BADGE7_OFFSET","FIRE_RED_BADGE8_OFFSET","FIRE_RED_RUNNING_SHOE_OFFSET","FIRE_RED_POKEDEX_OFFSET","FIRE_RED_NATIONAL_DEX_OFFSET","FIRE_RED_BADGE_OFFSETS","FIRE_RED_BIKE_OBTAINED_OFFSET","FIRE_RED_FLUTE_OBTAINED_OFFSET","EMERALD_BASE_FLAGS_OFFSET","EMERALD_BADGE1_OFFSET","EMERALD_BADGE2_OFFSET","EMERALD_BADGE3_OFFSET","EMERALD_BADGE4_OFFSET","EMERALD_BADGE5_OFFSET","EMERALD_BADGE6_OFFSET","EMERALD_BADGE7_OFFSET","EMERALD_BADGE8_OFFSET","EMERALD_RUNNING_SHOE_OFFSET","EMERALD_POKEDEX_OFFSET","EMERALD_NATIONAL_DEX_OFFSET","EMERALD_BADGE_OFFSETS","EMERALD_BASE_VAR_OFFSET","FIRE_RED_BASE_VAR_OFFSET","EMERALD_REPEL_STEPS_OFFSET","FIRE_RED_REPEL_STEPS_OFFSET","EMERALD_STARTER_CHOICE_OFFSET","FIRE_RED_STARTER_CHOICE_OFFSET","badge1","badge2","badge3","badge4","badge5","badge6","badge7","badge8","hasRunningShoes","HMState","repelSteps","starterChoice","modifyBadge","badgeNumber","shouldGiveOrRemoveBit","modifySystemFlag","modifyRunningShoes","manager","savePtr","sysFlagOffset","readSystemFlag","baseVarOffset","canFlash","canCut","canFly","canStrength","canSurf","canSmash","canWaterfall","canDive","canWhirlpool","saveOffset","sectionOffset","flagOffset","flagBit","Math","ceil","toString","padStart","reverse","value","byteArr","parseInt","join","readEmeraldFlags","readCrystalFlags","readFireRedFlags","evaluate","writeEmeraldFlags","writeCrystalFlags","writeFireRedFlags","updatedBadges","updateBadges","badges"],"version":3,"file":"build-index.897e72a5.js.map"}