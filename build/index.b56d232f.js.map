{"mappings":"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","sources":["dist/CoreHacks/EmulationCoreHacks.js"],"sourcesContent":["/**\n * Random Warp Script\n */\n\n// Ruby/Saphire (0x020297f0) where to find current warp\n\nvar isWarping = false;\nvar switchingGameState = 0; // 0 - Not Switching Game, \n                            // 1 - Playing exit transition before switch\n                            // 2 - Playing enterance after switch \nvar randomWarpsEnabled = true;\n\n/******************/\n/* Warp Addresses */\n/******************/\n/**\n *  Order of events for a warp script\n * \n *  1) A player steps on a warp tile\n *  2) A write8 is perforemed to bank, then map, then warp for current game\n *  3) Several read8s are performed to bank, then map, then warp \n *  4) Exit animation is played (i.e walking through a door) and screen fades to black\n *  5) A write32 is done to the last bank address\n *  6) New map is loaded and fades in then enterance animation is played \n * \n * \n *  Warp flow:\n * \n *  Within game:\n *  Wait for write to warp address -> switch to warping state -> wait for next read from warp address -> make save state -> before reading overwrite it -> continue  \n * \n *  To another game:\n *  Wait for write to warp address -> switch to warping state -> wait for next read from warp address -> take a save state -> increment game state -> resume playing ->\n *  wait for write to previous warp address (player exit map in first game) -> load state from different game (copying data accross) that was take just before warp ->\n *  make screen black -> overwrite next warp location -> increment warp state ->  wait for write to previous warp address (player exit map in load state from second game) -> \n *  make screen visible -> continue\n */\nconst FIRE_RED_LAST_BANK = 0x2031DB4;\n\nconst FIRE_RED_CURRENT_BANK = 0x2031dbc;\nconst FIRE_RED_CURRENT_MAP  = 0x2031dbd;\nconst FIRE_RED_CURRENT_WARP = 0x2031dbe;\n\nconst EMERALD_LAST_BANK = 0x020322DC;\n\nconst EMERALD_CURRENT_BANK = 0x20322e4;\nconst EMERALD_CURRENT_MAP  = 0x20322e5;\nconst EMERALD_CURRENT_WARP = 0x20322e6;\n\nconst EMERALD_MAP_TYPE = 0x203732F; // Used for enabling teleports/fly anywhere (0x2 for city, 0x4 for underground) \nconst FIRE_RED_MAP_TYPE = 0x2036E13; \n\n\nvar flagManager; // only global to help debugging\nGameBoyAdvanceCPU.prototype.write32WithoutIntercept = GameBoyAdvanceCPU.prototype.write32;\nGameBoyAdvanceCPU.prototype.write32 = function (address, data) { \n\n    if (switchingGameState != 0) {\n\n        if (switchingGameState == 1) {\n\n            if (((address == FIRE_RED_LAST_BANK) &&  IodineGUI.Iodine.IOCore.cartridge.romCode === \"FR\") || \n                ((address == EMERALD_LAST_BANK && (IodineGUI.Iodine.IOCore.cartridge.romCode === \"E\" || IodineGUI.Iodine.IOCore.cartridge.romCode === \"C\"))))  {\n\n                    IodineGUI.Iodine.pause();\n                    let beforeRomCode = IodineGUI.Iodine.IOCore.cartridge.romCode;\n                    let partySlice = readWRAMSlice(beforeRomCode == \"E\" || beforeRomCode == \"C\" ? EMERALD_PARTY_OFFSET : FIRE_RED_PARTY_OFFSET, PLAYER_PARTY_LENGTH);\n                    let playerNameAndState = dynamicMemorySlice(beforeRomCode == \"E\" || beforeRomCode == \"C\" ? EMERALD_SAVE_2_PTR : FIRE_RED_SAVE_2_PTR, NAME_STATE_OFFSET, NAME_STATE_LENGTH);\n                    let idAndPlayTime = dynamicMemorySlice(beforeRomCode == \"E\" || beforeRomCode == \"C\" ? EMERALD_SAVE_2_PTR : FIRE_RED_SAVE_2_PTR, ID_TIME_OFFSET, ID_TIME_LENGTH);\n\n                    let bagStoreage = new BagStoreage();\n                    bagStoreage.readData(beforeRomCode);\n\n                    flagManager = new FlagManager(bagStoreage.hasBike());\n                    flagManager.readFlags(beforeRomCode);\n        \n                    IodineGUI.Iodine.saveStateManager.loadState(gameSwitchingWarp.toRomCode);\n        \n                    if (gameSwitchingWarp.toRomCode == \"E\" || gameSwitchingWarp.toRomCode == \"C\") {\n                        this.write8(EMERALD_CURRENT_BANK, gameSwitchingWarp.toBank);\n                        this.write8(EMERALD_CURRENT_MAP, gameSwitchingWarp.toMap);\n                        this.write8(EMERALD_CURRENT_WARP, gameSwitchingWarp.toWarpNo);\n                    } else {\n                        this.write8(FIRE_RED_CURRENT_BANK, gameSwitchingWarp.toBank);\n                        this.write8(FIRE_RED_CURRENT_MAP, gameSwitchingWarp.toMap);\n                        this.write8(FIRE_RED_CURRENT_WARP, gameSwitchingWarp.toWarpNo);\n                    }\n                    let currentRomCode = IodineGUI.Iodine.IOCore.cartridge.romCode; // Changed becuase of load state\n                    spliceWRAM(currentRomCode == \"E\" || currentRomCode == \"C\" ? EMERALD_PARTY_OFFSET : FIRE_RED_PARTY_OFFSET, PLAYER_PARTY_LENGTH, partySlice);\n                    dynamicMemorySplice(currentRomCode == \"E\" || currentRomCode == \"C\" ? EMERALD_SAVE_2_PTR : FIRE_RED_SAVE_2_PTR, NAME_STATE_OFFSET, NAME_STATE_LENGTH, playerNameAndState);\n                    dynamicMemorySplice(currentRomCode == \"E\" || currentRomCode == \"C\" ? EMERALD_SAVE_2_PTR : FIRE_RED_SAVE_2_PTR, ID_TIME_OFFSET, ID_TIME_LENGTH, idAndPlayTime);\n\n                    bagStoreage.writeData(currentRomCode, beforeRomCode);\n                    flagManager.writeFlags(currentRomCode, beforeRomCode)\n        \n                    IodineGUI.mixerInput.volume = 0.0\n                    switchingGameState = 2;\n                    let elmnt = document.getElementById(\"emulator_target\");\n                    elmnt.classList.add(\"faded\")\n                    IodineGUI.Iodine.play();\n                    return;\n\n            }\n\n        }\n\n\n        if (switchingGameState == 2) {\n            if (((address == FIRE_RED_LAST_BANK) &&  IodineGUI.Iodine.IOCore.cartridge.romCode === \"FR\") || \n            ((address == EMERALD_LAST_BANK && (IodineGUI.Iodine.IOCore.cartridge.romCode === \"E\" || IodineGUI.Iodine.IOCore.cartridge.romCode === \"C\"))))  {\n\n                IodineGUI.mixerInput.volume = 0.1;\n                let elmnt = document.getElementById(\"emulator_target\");\n                elmnt.classList.remove(\"faded\");\n                switchingGameState = 0;\n                isWarping = false;\n                gameSwitchingWarp = null;\n\n            }\n        }\n\n    }\n\n    this.write32WithoutIntercept(address, data);\n}\n\n// GameBoyAdvanceCPU.prototype.write16WithoutIntercept = GameBoyAdvanceCPU.prototype.write16;\n// GameBoyAdvanceCPU.prototype.write16 = function (address, data) { \n\n//     if (address == EMERALD_LAST_BANK) {\n//         console.log(\"writing 16\");\n//     }\n\n//     this.write16WithoutIntercept(address, data);\n// }\n\n GameBoyAdvanceCPU.prototype.write8WithoutIntercept = GameBoyAdvanceCPU.prototype.write8;\n GameBoyAdvanceCPU.prototype.write8 = function (address, data) { \n\n    if ((address == FIRE_RED_CURRENT_WARP) && IodineGUI.Iodine.IOCore.cartridge.romCode === \"FR\" )\n    {\n        isWarping = randomWarpsEnabled;\n    } \n    else if ((address == EMERALD_CURRENT_WARP) && (IodineGUI.Iodine.IOCore.cartridge.romCode === \"E\" || IodineGUI.Iodine.IOCore.cartridge.romCode === \"C\")) \n    {\n        isWarping = randomWarpsEnabled;\n    } \n    \n    this.write8WithoutIntercept(address, data);\n\n }\n\n\nconst EMERALD_MOVEMENT_MODE_OFFSET = 0x02037590;\nconst FIRE_RED_MOVEMENT_MODE_OFFSET = 0x02037078;\nconst MOVEMENT_MODE_WALK = 0x01;\nconst MOVEMENT_MODE_BIKE = 0x02;\nconst MOVEMENT_MODE_SURF = 0x08;\nvar autoBike = false; \nvar teleportAnywhere = false;\nGameBoyAdvanceCPU.prototype.read8WithoutIntercept = GameBoyAdvanceCPU.prototype.read8;\nGameBoyAdvanceCPU.prototype.read8 = function (address) {\n\n    if (autoBike) {\n        if (address == FIRE_RED_MOVEMENT_MODE_OFFSET && IodineGUI.Iodine.IOCore.cartridge.romCode === \"FR\"){\n            let current = this.read8WithoutIntercept(address);\n            return current <= MOVEMENT_MODE_WALK ? MOVEMENT_MODE_BIKE : current;\n        } else if (address == EMERALD_MOVEMENT_MODE_OFFSET){\n            let current = this.read8WithoutIntercept(address);\n            return current <= MOVEMENT_MODE_WALK ? MOVEMENT_MODE_BIKE : current;\n        }\n    }\n\n    if (teleportAnywhere) {\n        if (address == FIRE_RED_MAP_TYPE && IodineGUI.Iodine.IOCore.cartridge.romCode === \"FR\") {\n            return 2;\n        } else if (address == EMERALD_MAP_TYPE){\n            return 2;\n        }\n    }\n\n    if (!isWarping) return this.read8WithoutIntercept(address);\n\n    if (address == FIRE_RED_CURRENT_BANK && IodineGUI.Iodine.IOCore.cartridge.romCode === \"FR\")\n    {\n        // Base game FR/LG\n        address = this.handleWarpRedirection(address, IodineGUI.Iodine.IOCore.cartridge.romCode);\n    } \n    else if (address == EMERALD_CURRENT_BANK && (IodineGUI.Iodine.IOCore.cartridge.romCode === \"E\" || IodineGUI.Iodine.IOCore.cartridge.romCode === \"C\")) \n    {\n        // Base game Emerald\n        address = this.handleWarpRedirection(address, IodineGUI.Iodine.IOCore.cartridge.romCode);\n    }\n\n    return this.read8WithoutIntercept(address);\n}\n\nvar gameSwitchingWarp = null;\nvar reverseNextWarp = false; // Set true when loading a save state that was going through a warp\nvar forceNextWarp = null;\nGameBoyAdvanceCPU.prototype.handleWarpRedirection = function (address, romCode) {\n\n    let bank = this.read8WithoutIntercept(address);\n    let map = this.read8WithoutIntercept(address + 1);\n    let warpNo = this.read8WithoutIntercept(address + 2);\n\n    // Avoid scripted warps, route connections without zone e.t.c\n    if (warpNo == 255) { return address; }\n    if (switchingGameState == 2 || switchingGameState==1) { return address }\n\n\n    let pkWarp = null;\n    let trigger = romCode + \",\" + bank + \",\" + map + \",\" + warpNo;\n\n    if (forceNextWarp) {\n        let toParts = forceNextWarp.split(\",\");\n        pkWarp = new PKWarp(trigger, toParts[0], toParts[1], toParts[2], toParts[3], forceNextWarp)\n        reverseNextWarp = false;\n        forceNextWarp = null;\n    } else if(reverseNextWarp && warpList.get(trigger)) {\n        let source = warpList.get(trigger).source;\n        let toParts = source.split(\",\");\n        pkWarp = new PKWarp(trigger, toParts[0], toParts[1], toParts[2], toParts[3], source)\n        reverseNextWarp = false;\n    } else {\n        pkWarp = warpList.get(trigger);\n        console.log(\"Warping triggered for \" + trigger); \n    }\n\n    if (pkWarp) {\n\n        IodineGUI.Iodine.pause();\n\n        IodineGUI.Iodine.saveStateManager.saveState(romCode, true);\n        if (pkWarp.toRomCode[0] != pkWarp.trigger[0]) {\n            // Switching Games\n            switchingGameState = 1;\n            gameSwitchingWarp = pkWarp;\n            address = pkWarp.toRomCode == \"E\" || pkWarp.toRomCode == \"C\" ? EMERALD_CURRENT_BANK : FIRE_RED_CURRENT_BANK;\n        } else {\n\n            if (pkWarp.toRomCode == \"E\" || pkWarp.toRomCode == \"C\") {\n                this.write8(EMERALD_CURRENT_BANK, pkWarp.toBank);\n                this.write8(EMERALD_CURRENT_MAP, pkWarp.toMap);\n                this.write8(EMERALD_CURRENT_WARP, pkWarp.toWarpNo);\n                address = EMERALD_CURRENT_BANK;\n            } else {\n                this.write8(FIRE_RED_CURRENT_BANK, pkWarp.toBank);\n                this.write8(FIRE_RED_CURRENT_MAP, pkWarp.toMap);\n                this.write8(FIRE_RED_CURRENT_WARP, pkWarp.toWarpNo);\n                address = FIRE_RED_CURRENT_BANK;\n            }\n\n        }\n\n        IodineGUI.Iodine.play();\n\n        console.log(\"Warping sending to \" + pkWarp.toRomCode + \",\" + pkWarp.toBank + \",\" + pkWarp.toMap + \",\" + pkWarp.toWarpNo); \n    } else {\n        console.log(\"Warping sending to vanilla\"); \n    }\n    \n    isWarping = false;\n\n    return address;\n}\n\nasync function quickSpeedUp(duration) {\n    let currentSpeed = IodineGUI.Iodine.getSpeed();\n    IodineGUI.Iodine.setSpeed(4);\n    IodineGUI.mixerInput.volume = 0.0\n    await delay(duration);\n    IodineGUI.Iodine.setSpeed(currentSpeed);\n    IodineGUI.mixerInput.volume = 0.1\n}\n\nfunction quickHideScreen() {\n    let elmnt = document.getElementById(\"emulator_target\");\n    elmnt.classList.remove(\"quick-hide\");\n    elmnt.offsetWidth\n    elmnt.classList.add(\"quick-hide\")\n}\n\nfunction readWRAMSlice(address, length) {\n    let startAddress = (address - 0x02000000);\n    let endAddress = startAddress + length;\n    return IodineGUI.Iodine.IOCore.memory.externalRAM.slice(startAddress, endAddress);\n}\nfunction spliceWRAM(address, length, data) {\n    let startAddress = (address - 0x02000000);\n    for (let i = 0; i<length; i++) {\n        IodineGUI.Iodine.IOCore.memory.externalRAM[startAddress + i] = data[i];\n    }\n}\n\n\n/***********************/\n/* Dynamic rom patches */  \n/***********************/\n/**\n * Patches out an area in the ROM \n */\nvar walkThroughWalls = false;\nvar runIndoors = false;\nvar frWallsOffset = 364078; // set to 364098 for 1.1 version\nvar frRunIndoorsOffset = 0xBD494; //  set to 0xBD4A8 for 1.1 version\n\nGameBoyAdvanceMultiCartridge.prototype.initializeWithoutIntercept = GameBoyAdvanceMultiCartridge.prototype.initialize;\nGameBoyAdvanceMultiCartridge.prototype.initialize = function (startingRom) {\n    this.initializeWithoutIntercept(startingRom);\n\n    // if 0x(80000)BC == 1 then we have US 1.1 instead of US 1.0\n    if (this.cartriges.get(\"FR\") && this.cartriges.get(\"FR\").ROM[0xBC]) {\n        frWallsOffset = 364098\n        frRunIndoorsOffset = 0xBD4A8;\n    }\n} \n\nGameBoyAdvanceMultiCartridge.prototype.readROM16WithoutIntercept = GameBoyAdvanceMultiCartridge.prototype.readROM16;\nGameBoyAdvanceMultiCartridge.prototype.readROM16 = function (address) {\n\n    if (!walkThroughWalls && !runIndoors) { return this.readROM16WithoutIntercept(address); }\n\n\n    if (walkThroughWalls) {\n        if (address == frWallsOffset && this.romCode == \"FR\") { \n            return 0x2100; \n        } else if (address == 601094 && this.romCode == \"C\") {\n            return 0x2000; \n        } else if (address == 601094 && this.romCode == \"E\") {\n            return 0x2000;\n        }\n    }\n\n    if (runIndoors) {\n        if (address == frRunIndoorsOffset && this.romCode == \"FR\") { \n            return 0x00; \n        } else if (address == 0x11A1E8 && this.romCode == \"C\") {\n            return 0x00; \n        } else if (address == 0x11A1E8 && this.romCode == \"E\") {\n            return 0x00;\n        }\n    }\n\n    return this.readROM16WithoutIntercept(address);\n}\n\n// FIRE RED - isSurfing 0x02036e40 (0x33 = on land, 0x11 on water)\n// EMERALD -            0x0203735B\nconst FIRE_RED_CURRENT_GROUND_OFFSET = 0x02036e43;\nconst EMERALD_CURRENT_GROUND_OFFSET = 0x0203735B;\nconst CURRENT_GROUND_LAND = 0x33;\nconst CURRENT_GROUND_WATER = 0x11;\nconst CURRENT_GROUND_LADDER = 0x30;\nconst CURRENT_GROUND_ELEVATED = 0x44;\n\nconst EMERALD_STATE_OFFSET = 0x02037591;\nconst FIRE_RED_STATE_OFFSET = 0x02037079;\nfunction forcePlayerState(state) {\n\n    if(!IodineGUI.Iodine.IOCore) return;\n\n    if (IodineGUI.Iodine.IOCore.cartridge.romCode === \"FR\") { \n        //IodineGUI.Iodine.IOCore.cpu.write8(FIRE_RED_MOVEMENT_MODE_OFFSET, state);\n        IodineGUI.Iodine.IOCore.cpu.write8(FIRE_RED_STATE_OFFSET, state); \n        if (state == MOVEMENT_MODE_SURF) {\n            IodineGUI.Iodine.IOCore.cpu.write8(FIRE_RED_CURRENT_GROUND_OFFSET, CURRENT_GROUND_WATER); \n        } else {\n            IodineGUI.Iodine.IOCore.cpu.write8(FIRE_RED_CURRENT_GROUND_OFFSET, CURRENT_GROUND_LAND); \n        }\n    } else if (IodineGUI.Iodine.IOCore.cartridge.romCode === \"C\") {\n        IodineGUI.Iodine.IOCore.cpu.write8(EMERALD_MOVEMENT_MODE_OFFSET, state);\n        IodineGUI.Iodine.IOCore.cpu.write8(EMERALD_STATE_OFFSET, state); \n        if (state == MOVEMENT_MODE_SURF) {\n            IodineGUI.Iodine.IOCore.cpu.write8(EMERALD_CURRENT_GROUND_OFFSET, CURRENT_GROUND_WATER); \n        } else {\n            IodineGUI.Iodine.IOCore.cpu.write8(EMERALD_CURRENT_GROUND_OFFSET, CURRENT_GROUND_LAND); \n        }\n    } else if (IodineGUI.Iodine.IOCore.cartridge.romCode === \"E\") {\n        IodineGUI.Iodine.IOCore.cpu.write8(EMERALD_MOVEMENT_MODE_OFFSET, state);\n        IodineGUI.Iodine.IOCore.cpu.write8(EMERALD_STATE_OFFSET, state); \n        if (state == MOVEMENT_MODE_SURF) {\n            IodineGUI.Iodine.IOCore.cpu.write8(EMERALD_CURRENT_GROUND_OFFSET, CURRENT_GROUND_WATER); \n        } else if (IodineGUI.Iodine.IOCore.cpu.read8(EMERALD_CURRENT_GROUND_OFFSET) == CURRENT_GROUND_ELEVATED) {\n            IodineGUI.Iodine.IOCore.cpu.write8(EMERALD_CURRENT_GROUND_OFFSET, CURRENT_GROUND_ELEVATED); \n        } else {\n            IodineGUI.Iodine.IOCore.cpu.write8(EMERALD_CURRENT_GROUND_OFFSET, CURRENT_GROUND_LADDER); \n        }\n    }\n}\n\nfunction whiteoutTeam() {\n    if (IodineGUI.Iodine.IOCore.cartridge.romCode === \"FR\") { \n        // Poison First Mon\n        IodineGUI.Iodine.IOCore.cpu.write8(FIRE_RED_PARTY_OFFSET + 80, 0x08);\n        // Set First Mon HP to 1 \n        IodineGUI.Iodine.IOCore.cpu.write16(FIRE_RED_PARTY_OFFSET + 86, 0x01);\n        // Set other mons fainted\n        IodineGUI.Iodine.IOCore.cpu.write16(FIRE_RED_PARTY_OFFSET + 86 + 100, 0x00);\n        IodineGUI.Iodine.IOCore.cpu.write16(FIRE_RED_PARTY_OFFSET + 86 + 200, 0x00);\n        IodineGUI.Iodine.IOCore.cpu.write16(FIRE_RED_PARTY_OFFSET + 86 + 300, 0x00);\n        IodineGUI.Iodine.IOCore.cpu.write16(FIRE_RED_PARTY_OFFSET + 86 + 400, 0x00);\n        IodineGUI.Iodine.IOCore.cpu.write16(FIRE_RED_PARTY_OFFSET + 86 + 500, 0x00);\n    } else if (IodineGUI.Iodine.IOCore.cartridge.romCode === \"C\" || IodineGUI.Iodine.IOCore.cartridge.romCode === \"E\") {\n       // Poison First Mon\n       IodineGUI.Iodine.IOCore.cpu.write8(EMERALD_PARTY_OFFSET + 80, 0x08);\n       // Set First Mon HP to 1 \n       IodineGUI.Iodine.IOCore.cpu.write16(EMERALD_PARTY_OFFSET + 86, 0x01);\n       // Set other mons fainted\n       IodineGUI.Iodine.IOCore.cpu.write16(EMERALD_PARTY_OFFSET + 86 + 100, 0x00);\n       IodineGUI.Iodine.IOCore.cpu.write16(EMERALD_PARTY_OFFSET + 86 + 200, 0x00);\n       IodineGUI.Iodine.IOCore.cpu.write16(EMERALD_PARTY_OFFSET + 86 + 300, 0x00);\n       IodineGUI.Iodine.IOCore.cpu.write16(EMERALD_PARTY_OFFSET + 86 + 400, 0x00);\n       IodineGUI.Iodine.IOCore.cpu.write16(EMERALD_PARTY_OFFSET + 86 + 500, 0x00);\n    }\n}\n\nfunction dynamicMemorySlice(dynamicPointer, offsetInDynamic, length) {\n    let dynamicBlock = IodineGUI.Iodine.IOCore.cpu.read32(dynamicPointer);\n    let startAddress = (dynamicBlock + offsetInDynamic - 0x02000000);\n    let endAddress = startAddress + length;\n    return IodineGUI.Iodine.IOCore.memory.externalRAM.slice(startAddress, endAddress);    \n}\n\nfunction dynamicMemorySplice(dynamicPointer, offsetInDynamic, length, data) {\n    let dynamicBlock = IodineGUI.Iodine.IOCore.cpu.read32(dynamicPointer);\n    let startAddress = (dynamicBlock + offsetInDynamic - 0x02000000);\n    for (let i = 0; i<length; i++) {\n        IodineGUI.Iodine.IOCore.memory.externalRAM[startAddress + i] = data[i];\n    }\n}\n\n\n/******************/\n/* Data Addresses */\n/******************/\n/**\n *  Addresses for save data, Team is not copied here because we use where it is statically stored in memory\n *  Addresses are offsets from the 32bit addresses that can be found using the pointers (ptr locations are static)\n *  Money is xor'd against 32bit xor key, item quantity is xor'd against the first 2 bytes of that key.\n *  \n *  Dynamicly Addressed memory means the three sections of data move in memory (hence we need to look the up with ptrs)\n *  These change each time the bag is accessed or a warp is triggered (and at various other times)\n * \n *  There are 3 dynamic sections. SAV1 (mostly relating to team and items)\n *  SAV2 (storing the xor key, and trainer data, play time, settings, seen mons e.t.c)\n *  We don't deal with SAV3 but it's mostly boxed pokemon / box config   \n */\n\nconst EMERALD_PARTY_OFFSET = 0x020244EC;\nconst FIRE_RED_PARTY_OFFSET = 0x02024284;\nconst PLAYER_PARTY_LENGTH = 0x258;\n\n// DYNAMIC SAV1 PTRs\nconst FIRE_RED_SAVE_1_PTR = 0x03005008;\nconst EMERALD_SAVE_1_PTR = 0x03005D8C;\n// MONEY \nconst FIRE_RED_OBSF_MONEY_OFFSET = 0x0290; //(0x0218)???\nconst FIRE_RED_OBSF_MONEY_LENGTH = 4;\nconst EMERALD_OBSF_MONEY_OFFSET = 0x0490; //(0x0494)???\nconst EMERALD_OBSF_MONEY_LENGTH = 4;\n\n// DYNAMIC SAV2 PTRs\nconst FIRE_RED_SAVE_2_PTR = 0x0300500C;\nconst EMERALD_SAVE_2_PTR = 0x03005d90;\n// Name + Gender / If on bike or surfing\nconst NAME_STATE_OFFSET = 0;\nconst NAME_STATE_LENGTH = 9;\n// Trainer id and time (last 3 bytes button mode + text speed + sound/battle scene)\nconst ID_TIME_OFFSET = 10;\nconst ID_TIME_LENGTH = 12;\n// XOR Key\nconst FIRE_RED_XOR_KEY_OFFSET = 0x0F20;\nconst FIRE_RED_XOR_KEY_LENGTH = 4;\nconst EMERALD_XOR_KEY_OFFSET = 0xAC;\nconst EMERALD_XOR_KEY_LENGTH = 4;\n\n// ITEM POCKET\nconst FIRE_RED_ITEM_OFFSET = 0x0310;\nconst FIRE_RED_ITEM_LENGTH = 168;\nconst EMERALD_ITEM_OFFSET = 0x0560;\nconst EMERALD_ITEM_LENGTH = 120;\n\n// KEY ITEM POCKET\nconst FIRE_RED_KEY_ITEM_OFFSET = 0x03B8;\nconst FIRE_RED_KEY_ITEM_LENGTH = 120;\nconst EMERALD_KEY_ITEM_OFFSET = 0x05D8;\nconst EMERALD_KEY_ITEM_LENGTH = 120;\n\n// BALLS\nconst FIRE_RED_BALL_OFFSET = 0x0430;\nconst FIRE_RED_BALL_LENGTH = 52;\nconst EMERALD_BALL_OFFSET = 0x0650;\nconst EMERALD_BALL_LENGTH = 64;\n\n// TM Case\nconst FIRE_RED_TM_OFFSET = 0x0464;\nconst FIRE_RED_TM_LENGTH = 232;\nconst EMERALD_TM_OFFSET = 0x0690;\nconst EMERALD_TM_LENGTH = 256;\n\n// Berry Pocket\nconst FIRE_RED_BERRIES_OFFSET = 0x054C;\nconst FIRE_RED_BERRIES_LENGTH = 172;\nconst EMERALD_BERRIES_OFFSET = 0x0790;\nconst EMERALD_BERRIES_LENGTH = 184;\n\n/**************************/\n/* Bag Storage Management */\n/**************************/\n/**\n * \n *  Bag storeage requires special handling as quantities are xor'd with a special key \n *  that changes and will be different for each game\n * \n *  Additionally, storage size differs between games for now excess items will just be \n *  lost so we don't have to worry about storing additional item data outside the games\n * \n *  Additionally, additionally we do some special handling like, give the berry pouch if \n *  berries are already collected, or give a bike if they have one in the other game\n *\n */\n\nfunction BagStoreage() {\n    this.money = null;\n    //this.coins = null;\n\n    //this.pcItems = new Map();\n    this.itemPocket = new Map();\n    this.keyItemsPocket = new Map();\n    this.ballItemPocket = new Map();\n    this.tmCase = new Map();\n    this.berryPocket = new Map();\n}\n\nBagStoreage.prototype.readData = function (game) {\n    if (game == \"E\" || game == \"C\") {\n        this.readEmeraldData();\n    } else {\n        this.readFireRedData();\n    }\n}\n\nBagStoreage.prototype.readFireRedData = function () {\n    this.itemPocket.clear();\n    this.keyItemsPocket.clear();\n    this.ballItemPocket.clear();\n    this.tmCase.clear();\n    this.berryPocket.clear();\n\n    let save2Start = IodineGUI.Iodine.IOCore.cpu.read32(FIRE_RED_SAVE_2_PTR);\n    let xorKey32 = IodineGUI.Iodine.IOCore.cpu.read32(save2Start + FIRE_RED_XOR_KEY_OFFSET);\n    let xorKey16 = IodineGUI.Iodine.IOCore.cpu.read16(save2Start + FIRE_RED_XOR_KEY_OFFSET);\n\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(FIRE_RED_SAVE_1_PTR);\n    this.money = IodineGUI.Iodine.IOCore.cpu.read32(save1Start + FIRE_RED_OBSF_MONEY_OFFSET) ^ xorKey32;\n\n    // read items\n    this.readItemSection(save1Start, FIRE_RED_ITEM_OFFSET, FIRE_RED_ITEM_LENGTH, this.itemPocket, xorKey16);\n\n    // read key items\n    this.readItemSection(save1Start, FIRE_RED_KEY_ITEM_OFFSET, FIRE_RED_KEY_ITEM_LENGTH, this.keyItemsPocket, xorKey16);\n\n    // read balls\n    this.readItemSection(save1Start, FIRE_RED_BALL_OFFSET, FIRE_RED_BALL_LENGTH, this.ballItemPocket, xorKey16);\n\n    // read tms\n    this.readItemSection(save1Start, FIRE_RED_TM_OFFSET, FIRE_RED_TM_LENGTH, this.tmCase, xorKey16);\n\n    // read berries\n    this.readItemSection(save1Start, FIRE_RED_BERRIES_OFFSET, FIRE_RED_BERRIES_LENGTH, this.berryPocket, xorKey16);\n}\n\nBagStoreage.prototype.readEmeraldData = function () {\n    this.itemPocket.clear();\n    this.keyItemsPocket.clear();\n    this.ballItemPocket.clear();\n    this.tmCase.clear();\n    this.berryPocket.clear();\n\n    let save2Start = IodineGUI.Iodine.IOCore.cpu.read32(EMERALD_SAVE_2_PTR);\n    let xorKey32 = IodineGUI.Iodine.IOCore.cpu.read32(save2Start + EMERALD_XOR_KEY_OFFSET);\n    let xorKey16 = IodineGUI.Iodine.IOCore.cpu.read16(save2Start + EMERALD_XOR_KEY_OFFSET);\n\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(EMERALD_SAVE_1_PTR);\n    this.money = IodineGUI.Iodine.IOCore.cpu.read32(save1Start + EMERALD_OBSF_MONEY_OFFSET) ^ xorKey32;\n\n    // read items\n    this.readItemSection(save1Start, EMERALD_ITEM_OFFSET, EMERALD_ITEM_LENGTH, this.itemPocket, xorKey16);\n\n    // read key items\n    this.readItemSection(save1Start, EMERALD_KEY_ITEM_OFFSET, EMERALD_KEY_ITEM_LENGTH, this.keyItemsPocket, xorKey16);\n\n    // read balls\n    this.readItemSection(save1Start, EMERALD_BALL_OFFSET, EMERALD_BALL_LENGTH, this.ballItemPocket, xorKey16);\n\n    // read tms\n    this.readItemSection(save1Start, EMERALD_TM_OFFSET, EMERALD_TM_LENGTH, this.tmCase, xorKey16);\n\n    // read berries\n    this.readItemSection(save1Start, EMERALD_BERRIES_OFFSET, EMERALD_BERRIES_LENGTH, this.berryPocket, xorKey16);\n}\n\nBagStoreage.prototype.writeData = function (game, lastGame) {\n    if (game == \"E\" || game == \"C\") {\n        this.writeDataToEmerald(game, lastGame);\n    } else {\n        this.writeDataToFireRed(game, lastGame);\n    }\n}\n\n\nBagStoreage.prototype.writeDataToFireRed = function (game, lastGame) {\n    let save2Start = IodineGUI.Iodine.IOCore.cpu.read32(FIRE_RED_SAVE_2_PTR);\n    let xorKey32 = IodineGUI.Iodine.IOCore.cpu.read32(save2Start + FIRE_RED_XOR_KEY_OFFSET);\n    let xorKey16 = IodineGUI.Iodine.IOCore.cpu.read16(save2Start + FIRE_RED_XOR_KEY_OFFSET);\n\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(FIRE_RED_SAVE_1_PTR);\n\n    IodineGUI.Iodine.IOCore.cpu.write32(save1Start + FIRE_RED_OBSF_MONEY_OFFSET, this.money ^ xorKey32);\n\n    // We need to give the player the berry pocket or tm case if they have some \n    if (this.berryPocket.size >= 1) {\n        this.keyItemsPocket.set(365, 1); // one berry pouch\n    }\n    if (this.tmCase.size >= 1) {\n        this.keyItemsPocket.set(364, 1); // one tm case\n    }\n\n    if (lastGame == \"C\") {\n        // Going from crystal to firered\n        let hasRocksmash = this.tmCase.get(296);\n        let hasWhirldpool = this.tmCase.get(344);\n        let hasBodyslam = this.keyItemsPocket.get(347);\n\n        this.tmCase.delete(296);\n        this.tmCase.delete(344);\n        this.keyItemsPocket.delete(347);\n\n        if(hasRocksmash) this.tmCase.set(344, 1);\n        if(hasWhirldpool) this.keyItemsPocket.set(347, 1); // Unused TM to represent whirldpool\n        if(hasBodyslam) this.tmCase.set(296, 1); \n    } \n\n    // write items\n    this.writeItemSection(save1Start, FIRE_RED_ITEM_OFFSET, FIRE_RED_ITEM_LENGTH, this.itemPocket, xorKey16, true);\n\n    // write key items\n    this.writeItemSection(save1Start, FIRE_RED_KEY_ITEM_OFFSET, FIRE_RED_KEY_ITEM_LENGTH, this.keyItemsPocket, xorKey16, false);\n\n    // write balls\n    this.writeItemSection(save1Start, FIRE_RED_BALL_OFFSET, FIRE_RED_BALL_LENGTH, this.ballItemPocket, xorKey16, true);\n\n    // write tms\n    this.writeItemSection(save1Start, FIRE_RED_TM_OFFSET, FIRE_RED_TM_LENGTH, this.tmCase, xorKey16, true);\n\n    // write berries\n    this.writeItemSection(save1Start, FIRE_RED_BERRIES_OFFSET, FIRE_RED_BERRIES_LENGTH, this.berryPocket, xorKey16, true);\n}\n\nBagStoreage.prototype.writeDataToEmerald = function (game, lastGame) {\n    let save2Start = IodineGUI.Iodine.IOCore.cpu.read32(EMERALD_SAVE_2_PTR);\n    let xorKey32 = IodineGUI.Iodine.IOCore.cpu.read32(save2Start + EMERALD_XOR_KEY_OFFSET);\n    let xorKey16 = IodineGUI.Iodine.IOCore.cpu.read16(save2Start + EMERALD_XOR_KEY_OFFSET);\n\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(EMERALD_SAVE_1_PTR);\n\n    IodineGUI.Iodine.IOCore.cpu.write32(save1Start + EMERALD_OBSF_MONEY_OFFSET, this.money ^ xorKey32);\n\n    // If we have a bike from fire red but not a mach/acro bike from emerald we should get a mach bike \n    if (this.keyItemsPocket.get(360) && !this.keyItemsPocket.get(259) && !this.keyItemsPocket.get(272)) {\n        this.keyItemsPocket.set(259, 1);\n        this.keyItemsPocket.get(272, 1);\n    }\n\n    // If we have HM06/TM08 we need to make sure it's the right hm\n    // In Crystal HM06 is whirlpool and TM08 is Rocksmash\n    // In Emerald and FireRed HM06 is  Rocksmash and TM08 is 'Bulk Up'\n    if (game == \"E\" && lastGame == \"C\") {\n        // Going from crystal to emerald\n\n        let hasRocksmash = this.tmCase.get(296);\n        let hasWhirldpool = this.tmCase.get(344);\n        let hasBodyslam = this.keyItemsPocket.get(347);\n\n        this.tmCase.delete(296);\n        this.tmCase.delete(344);\n        this.keyItemsPocket.delete(347);\n\n        if(hasRocksmash) this.tmCase.set(344, 1);\n        if(hasWhirldpool) this.keyItemsPocket.set(347, 1); // Unused TM to represent whirldpool\n        if(hasBodyslam) this.tmCase.set(296, 1); \n\n    } else if (game == \"C\" && lastGame && lastGame != \"C\") {\n\n        // Going from firered or emerald into crystal\n        let hasRocksmash = this.tmCase.get(344);\n        let hasWhirldpool = this.keyItemsPocket.get(347);\n        let hasBodyslam = this.tmCase.get(296);\n\n        this.tmCase.delete(296);\n        this.tmCase.delete(344);\n        this.keyItemsPocket.delete(347);\n\n        if(hasRocksmash) this.tmCase.set(296, 1);\n        if(hasWhirldpool) this.tmCase.set(344, 1); // Unused TM to represent bodyslam\n        if(hasBodyslam) this.keyItemsPocket.set(347, 1); \n\n    }\n\n    // write items\n    this.writeItemSection(save1Start, EMERALD_ITEM_OFFSET, EMERALD_ITEM_LENGTH, this.itemPocket, xorKey16, true);\n\n    // write key items\n    this.writeItemSection(save1Start, EMERALD_KEY_ITEM_OFFSET, EMERALD_KEY_ITEM_LENGTH, this.keyItemsPocket, xorKey16, false);\n\n    // write balls\n    this.writeItemSection(save1Start, EMERALD_BALL_OFFSET, EMERALD_BALL_LENGTH, this.ballItemPocket, xorKey16, true);\n\n    // write tms\n    this.writeItemSection(save1Start, EMERALD_TM_OFFSET, EMERALD_TM_LENGTH, this.tmCase, xorKey16, true);\n\n    // write berries\n    this.writeItemSection(save1Start, EMERALD_BERRIES_OFFSET, EMERALD_BERRIES_LENGTH, this.berryPocket, xorKey16, true);\n}\n\nBagStoreage.prototype.readItemSection = function(save1Start, offset, length, storeTo, xorKey16) {\n    for (let i = 0;  i < offset + length; i+=4) {\n        let item = IodineGUI.Iodine.IOCore.cpu.read16(save1Start + offset + i);\n\n        if (item == 0) { break; }\n\n        let ballQuantity = IodineGUI.Iodine.IOCore.cpu.read16(save1Start + offset + i + 2) ^ xorKey16;\n        storeTo.set(item, ballQuantity);\n    }\n}\n\nBagStoreage.prototype.writeItemSection = function(save1Start, offset, length, store, xorKey16, clear) {\n\n    var storeArr = [...store];\n\n    for (let i = 0;  i < offset + length; i+=4) {\n\n        let index = i / 4;\n        if (storeArr.length > index) {\n\n            let item = (storeArr[i / 4])[0];\n            let quantity = (storeArr[i / 4])[1] ^ xorKey16;\n\n            IodineGUI.Iodine.IOCore.cpu.write16(save1Start + offset + i, item);\n            IodineGUI.Iodine.IOCore.cpu.write16(save1Start + offset + i + 2, quantity);\n\n        } else {\n\n            // No more items to copy\n            if(clear) {\n                let item = ITEM_DATA.Nothing.number;\n                let quantity = 0 ^ xorKey16;\n                \n                IodineGUI.Iodine.IOCore.cpu.write16(save1Start + offset + i, item);\n                IodineGUI.Iodine.IOCore.cpu.write16(save1Start + offset + i + 2, quantity);\n            } else {\n                break;\n            }\n        }\n    }\n}\n\nBagStoreage.prototype.hasBike = function () {\n    // Add up quantities of any bikes\n    return ((this.keyItemsPocket.get(259) || 0) + (this.keyItemsPocket.get(272) || 0) + (this.keyItemsPocket.get(360) || 0)) > 0\n}\n\n/*******************/\n/* Flag Management */\n/*******************/\nvar badgeSync = true;\n\n// TODO: General read flag / set flag / clear flag function \n\n// IN DYNAMIC SAV1\n// The equations are so the offsets line up the the flags defined in the decomp projects\n// https://github.com/pret/pokefirered/blob/master/include/constants/flags.h\n// https://github.com/pret/pokeemerald/blob/master/include/constants/flags.h\nconst FIRE_RED_BASE_FLAG_OFFSET    = 0xEE0;\nconst FIRE_RED_SYS_FLAGS_OFFSET    = 0xFE0;\nconst FIRE_RED_BADGE1_OFFSET       = 0x20;\nconst FIRE_RED_BADGE2_OFFSET       = 0x21;\nconst FIRE_RED_BADGE3_OFFSET       = 0x22;\nconst FIRE_RED_BADGE4_OFFSET       = 0x23;\nconst FIRE_RED_BADGE5_OFFSET       = 0x24;\nconst FIRE_RED_BADGE6_OFFSET       = 0x25;\nconst FIRE_RED_BADGE7_OFFSET       = 0x26;\nconst FIRE_RED_BADGE8_OFFSET       = 0x27;\nconst FIRE_RED_RUNNING_SHOE_OFFSET = 0x2F;\nconst FIRE_RED_BADGE_OFFSETS = [FIRE_RED_BADGE1_OFFSET, \n                                FIRE_RED_BADGE2_OFFSET, \n                                FIRE_RED_BADGE3_OFFSET, \n                                FIRE_RED_BADGE4_OFFSET, \n                                FIRE_RED_BADGE5_OFFSET, \n                                FIRE_RED_BADGE6_OFFSET, \n                                FIRE_RED_BADGE7_OFFSET, \n                                FIRE_RED_BADGE8_OFFSET];\nconst FIRE_RED_BIKE_OBTAINED_OFFSET = 0x271;\n\nconst EMERALD_SYS_FLAGS_OFFSET    = 0x137C;\nconst EMERALD_BADGE1_OFFSET       = 0x7;\nconst EMERALD_BADGE2_OFFSET       = 0x8;\nconst EMERALD_BADGE3_OFFSET       = 0x9;\nconst EMERALD_BADGE4_OFFSET       = 0xA;\nconst EMERALD_BADGE5_OFFSET       = 0xB;\nconst EMERALD_BADGE6_OFFSET       = 0xC;\nconst EMERALD_BADGE7_OFFSET       = 0xD;\nconst EMERALD_BADGE8_OFFSET       = 0xE;\nconst EMERALD_RUNNING_SHOE_OFFSET = 0x60;\nconst EMERALD_BADGE_OFFSETS = [EMERALD_BADGE1_OFFSET, \n                               EMERALD_BADGE2_OFFSET, \n                               EMERALD_BADGE3_OFFSET, \n                               EMERALD_BADGE4_OFFSET, \n                               EMERALD_BADGE5_OFFSET, \n                               EMERALD_BADGE6_OFFSET, \n                               EMERALD_BADGE7_OFFSET, \n                               EMERALD_BADGE8_OFFSET];\n\nfunction FlagManager(hasBike) {\n    this.badge1 = null;\n    this.badge2 = null;\n    this.badge3 = null;\n    this.badge4 = null;\n    this.badge5 = null;\n    this.badge6 = null;\n    this.badge7 = null;\n    this.badge8 = null;\n    this.hasRunningShoes = null;\n    this.HMState = null;\n    this.hasBike = hasBike;\n}\n\nFlagManager.prototype.getFlag = function (saveOffset, sectionOffset, flagOffset) {\n\n    let flagByte = IodineGUI.Iodine.IOCore.cpu.read8(saveOffset + sectionOffset + Math.ceil((flagOffset + 1) / 8) - 1);\n    let flagBit = flagOffset % 8;\n\n    return !!+flagByte.toString(2).padStart(8, 0).split(\"\").reverse()[flagBit];\n}\n\nFlagManager.prototype.setFlag = function (saveOffset, sectionOffset, flagOffset, value) {\n\n    let flagByte = IodineGUI.Iodine.IOCore.cpu.read8(saveOffset + sectionOffset + Math.ceil((flagOffset + 1) / 8) - 1);\n    let flagBit = flagOffset % 8;\n\n    let byteArr = flagByte.toString(2).padStart(8, 0).split(\"\").reverse();\n    byteArr[flagBit] = value;\n\n    IodineGUI.Iodine.IOCore.cpu.write8(saveOffset + sectionOffset + Math.ceil((flagOffset + 1) / 8) - 1, parseInt(byteArr.reverse().join(\"\"), 2));\n\n}\n\nFlagManager.prototype.readFlags = function (game) {\n    if (game == \"E\") {\n        this.readEmeraldFlags();\n    } \n    else if (game == \"C\") {\n        this.readCrystalFlags();\n    } else {\n        this.readFireRedFlags();\n    }\n}\n\nFlagManager.prototype.readEmeraldFlags = function () {\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(EMERALD_SAVE_1_PTR);\n\n    this.badge1          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE1_OFFSET);\n    this.badge2          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE2_OFFSET);\n    this.badge3          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE3_OFFSET);\n    this.badge4          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE4_OFFSET);\n    this.badge5          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE5_OFFSET);\n    this.badge6          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE6_OFFSET);\n    this.badge7          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE7_OFFSET);\n    this.badge8          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE8_OFFSET);\n    this.hasRunningShoes = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_RUNNING_SHOE_OFFSET);\n    \n    this.HMState = new HMState();\n    this.HMState.evaluate(\"E\", this.badge1, this.badge2, this.badge3, this.badge4, this.badge5, this.badge6, this.badge7, this.badge8);\n}\n\nFlagManager.prototype.readCrystalFlags = function () {\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(EMERALD_SAVE_1_PTR);\n\n    this.badge1          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE1_OFFSET);\n    this.badge2          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE2_OFFSET);\n    this.badge3          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE3_OFFSET);\n    this.badge4          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE4_OFFSET);\n    this.badge5          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE5_OFFSET);\n    this.badge6          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE6_OFFSET);\n    this.badge7          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE7_OFFSET);\n    this.badge8          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE8_OFFSET);\n    this.hasRunningShoes = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_RUNNING_SHOE_OFFSET);\n\n    this.HMState = new HMState();\n    this.HMState.evaluate(\"C\", this.badge1, this.badge2, this.badge3, this.badge4, this.badge5, this.badge6, this.badge7, this.badge8);\n}\n\nFlagManager.prototype.readFireRedFlags = function () {\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(FIRE_RED_SAVE_1_PTR);\n    \n    this.badge1          = this.getFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE1_OFFSET);\n    this.badge2          = this.getFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE2_OFFSET);\n    this.badge3          = this.getFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE3_OFFSET);\n    this.badge4          = this.getFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE4_OFFSET);\n    this.badge5          = this.getFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE5_OFFSET);\n    this.badge6          = this.getFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE6_OFFSET);\n    this.badge7          = this.getFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE7_OFFSET);\n    this.badge8          = this.getFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE8_OFFSET);\n    this.hasRunningShoes = this.getFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_RUNNING_SHOE_OFFSET);\n\n    this.HMState = new HMState();\n    this.HMState.evaluate(\"FR\", this.badge1, this.badge2, this.badge3, this.badge4, this.badge5, this.badge6, this.badge7, this.badge8);\n}\n\nFlagManager.prototype.writeFlags = function (game, lastGame) {\n    if (game == \"E\") {\n        this.writeEmeraldFlags();\n    } \n    else if (game == \"C\") {\n        this.writeCrystalFlags();\n    } else {\n        this.writeFireRedFlags();\n    }\n}\n\nFlagManager.prototype.writeEmeraldFlags = function () {\n\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(EMERALD_SAVE_1_PTR);\n\n    this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_RUNNING_SHOE_OFFSET, +this.hasRunningShoes);\n\n    if (badgeSync) {\n        \n        let badge1 = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE1_OFFSET);\n        let badge2 = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE2_OFFSET);\n        let badge3 = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE3_OFFSET);\n        let badge4 = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE4_OFFSET);\n        let badge5 = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE5_OFFSET);\n        let badge6 = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE6_OFFSET);\n        let badge7 = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE7_OFFSET);\n        let badge8 = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE8_OFFSET);\n\n        let updatedBadges = this.HMState.updateBadges(\"E\", badge1, badge2, badge3, badge4, badge5, badge6, badge7, badge8);\n\n        this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE1_OFFSET, +(updatedBadges[0] || badge1));\n        this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE2_OFFSET, +(updatedBadges[1] || badge2));\n        this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE3_OFFSET, +(updatedBadges[2] || badge3));\n        this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE4_OFFSET, +(updatedBadges[3] || badge4));\n        this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE5_OFFSET, +(updatedBadges[4] || badge5));\n        this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE6_OFFSET, +(updatedBadges[5] || badge6));\n        this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE7_OFFSET, +(updatedBadges[6] || badge7));\n        this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE8_OFFSET, +(updatedBadges[7] || badge8));\n\n    }\n}\n\nFlagManager.prototype.writeCrystalFlags = function () {\n\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(EMERALD_SAVE_1_PTR);\n\n    this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_RUNNING_SHOE_OFFSET, +this.hasRunningShoes);\n\n    if (badgeSync) {\n        \n        let badge1 = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE1_OFFSET);\n        let badge2 = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE2_OFFSET);\n        let badge3 = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE3_OFFSET);\n        let badge4 = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE4_OFFSET);\n        let badge5 = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE5_OFFSET);\n        let badge6 = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE6_OFFSET);\n        let badge7 = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE7_OFFSET);\n        let badge8 = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE8_OFFSET);\n\n        let updatedBadges = this.HMState.updateBadges(\"C\", badge1, badge2, badge3, badge4, badge5, badge6, badge7, badge8);\n\n        this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE1_OFFSET, +(updatedBadges[0] || badge1));\n        this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE2_OFFSET, +(updatedBadges[1] || badge2));\n        this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE3_OFFSET, +(updatedBadges[2] || badge3));\n        this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE4_OFFSET, +(updatedBadges[3] || badge4));\n        this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE5_OFFSET, +(updatedBadges[4] || badge5));\n        this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE6_OFFSET, +(updatedBadges[5] || badge6));\n        this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE7_OFFSET, +(updatedBadges[6] || badge7));\n        this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE8_OFFSET, +(updatedBadges[7] || badge8));\n        \n    }\n\n}\n\nFlagManager.prototype.writeFireRedFlags = function () {\n\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(FIRE_RED_SAVE_1_PTR);\n\n    this.setFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_RUNNING_SHOE_OFFSET, +this.hasRunningShoes);\n\n    if (this.hasBike) {\n        this.setFlag(save1Start, FIRE_RED_BASE_FLAG_OFFSET, FIRE_RED_BIKE_OBTAINED_OFFSET, 1);\n    }\n\n    if (badgeSync) {\n        \n        let badge1 = this.getFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE1_OFFSET);\n        let badge2 = this.getFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE2_OFFSET);\n        let badge3 = this.getFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE3_OFFSET);\n        let badge4 = this.getFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE4_OFFSET);\n        let badge5 = this.getFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE5_OFFSET);\n        let badge6 = this.getFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE6_OFFSET);\n        let badge7 = this.getFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE7_OFFSET);\n        let badge8 = this.getFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE8_OFFSET);\n\n        let updatedBadges = this.HMState.updateBadges(\"FR\", badge1, badge2, badge3, badge4, badge5, badge6, badge7, badge8);\n\n        this.setFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE1_OFFSET, +(updatedBadges[0] || badge1));\n        this.setFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE2_OFFSET, +(updatedBadges[1] || badge2));\n        this.setFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE3_OFFSET, +(updatedBadges[2] || badge3));\n        this.setFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE4_OFFSET, +(updatedBadges[3] || badge4));\n        this.setFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE5_OFFSET, +(updatedBadges[4] || badge5));\n        this.setFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE6_OFFSET, +(updatedBadges[5] || badge6));\n        this.setFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE7_OFFSET, +(updatedBadges[6] || badge7));\n        this.setFlag(save1Start, FIRE_RED_SYS_FLAGS_OFFSET, FIRE_RED_BADGE8_OFFSET, +(updatedBadges[7] || badge8));\n        \n    }\n    \n}\n\nfunction modifyBadge(game, badgeNumber, shouldGiveOrRemoveBit) {\n\n    let badgeOffsets = game == \"FR\" ? FIRE_RED_BADGE_OFFSETS : EMERALD_BADGE_OFFSETS\n    modifySystemFlag(game, badgeOffsets[badgeNumber - 1], shouldGiveOrRemoveBit);\n\n}\n\nfunction modifyRunningShoes(game, shouldGiveOrRemoveBit) {\n\n    let offset = game == \"FR\" ? FIRE_RED_RUNNING_SHOE_OFFSET : EMERALD_RUNNING_SHOE_OFFSET\n    modifySystemFlag(game, offset, shouldGiveOrRemoveBit);\n\n}\n\nfunction modifySystemFlag(game, offset, shouldGiveOrRemoveBit) {\n\n    let manager = new FlagManager();\n    manager.readFlags(game);\n\n    let savePtr = game == \"FR\" ? FIRE_RED_SAVE_1_PTR : EMERALD_SAVE_1_PTR;\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(savePtr);\n\n    let sysFlagOffset = game == \"FR\" ? FIRE_RED_SYS_FLAGS_OFFSET : EMERALD_SYS_FLAGS_OFFSET;\n\n    manager.setFlag(save1Start, sysFlagOffset, offset, shouldGiveOrRemoveBit);\n\n}\n\n// EQUIVILENT BADGE UNLOCKS\n/*           | FR    | C     | E     |\n| Flash      | GYM 1 | GYM 1 | GYM 2 |   \n| Cut        | GYM 2 | GYM 2 | GYM 1 |\n| Fly        | GYM 3 | GYM 5 | GYM 6 |\n| Strength   | GYM 4 | GYM 3 | GYM 4 |\n| Surf       | GYM 5 | GYM 4 | GYM 5 |\n| Rock Smash | GYM 6 |       | GYM 3 |\n| Waterfall  | GYM 7 | GYM 8 | GYM 8 |\n| Dive       |       |       | GYM 7 | \n| Whirlpool  |       | GYM 7 |       |\n*/\nfunction HMState() {\n    this.canFlash     = false;\n    this.canCut       = false;\n    this.canFly       = false;\n    this.canStrength  = false;\n    this.canSurf      = false;\n    this.canSmash     = false;\n    this.canWaterfall = false;\n    this.canDive      = false;\n    this.canWhirlpool = false;\n}\n\nHMState.prototype.evaluate = function (game, badge1, badge2, badge3, badge4, badge5, badge6, badge7, badge8) {\n    if (game == \"E\") {\n        this.canFlash     = badge2;\n        this.canCut       = badge1;\n        this.canFly       = badge6;\n        this.canStrength  = badge4;\n        this.canSurf      = badge5;\n        this.canSmash     = badge3;\n        this.canWaterfall = badge8;\n        this.canDive      = badge7;\n        this.canWhirlpool = false;\n    } \n    else if (game == \"C\") {\n        this.canFlash     = badge1;\n        this.canCut       = badge2;\n        this.canFly       = badge5;\n        this.canStrength  = badge3;\n        this.canSurf      = badge4;\n        this.canSmash     = false; // because there is no badge requirement\n        this.canWaterfall = badge8;\n        this.canDive      = false;\n        this.canWhirlpool = badge7;\n    } else {\n        this.canFlash     = badge1;\n        this.canCut       = badge2;\n        this.canFly       = badge3;\n        this.canStrength  = badge4;\n        this.canSurf      = badge5;\n        this.canSmash     = badge6;\n        this.canWaterfall = badge7;\n        this.canDive      = false;\n        this.canWhirlpool = false;\n    }\n}\n\nHMState.prototype.updateBadges = function (game, badge1, badge2, badge3, badge4, badge5, badge6, badge7, badge8) {\n\n    let badges = [];\n\n    if (game == \"E\") {\n        badges[1 - 1] = +(badge1  || this.canCut);\n        badges[2 - 1] = +(badge2  || this.canFlash);\n        badges[3 - 1] = +(badge3  || this.canSmash);\n        badges[4 - 1] = +(badge4  || this.canStrength);\n        badges[5 - 1] = +(badge5  || this.canSurf);\n        badges[6 - 1] = +(badge6  || this.canFly);\n        badges[7 - 1] = +(badge7  || this.canDive);\n        badges[8 - 1] = +(badge8  || this.canWaterfall);\n    } \n    else if (game == \"C\") {\n        badges[1 - 1] = +(badge1 || this.canFlash);\n        badges[2 - 1] = +(badge2 || this.canCut);\n        badges[3 - 1] = +(badge3 || this.canStrength);\n        badges[4 - 1] = +(badge4 || this.canSurf);\n        badges[5 - 1] = +(badge5 || this.canFly);\n        badges[8 - 1] = +(badge8 || this.canWaterfall);\n    } else {\n        badges[1 - 1] = +(badge1  || this.canFlash);\n        badges[2 - 1] = +(badge2  || this.canCut);\n        badges[3 - 1] = +(badge3  || this.canFly);\n        badges[4 - 1] = +(badge4  || this.canStrength);\n        badges[5 - 1] = +(badge5  || this.canSurf);\n        badges[6 - 1] = +(badge6  || this.canSmash);\n        badges[7 - 1] = +(badge7  || this.canWaterfall);\n    }\n\n    return badges;\n}"],"names":["isWarping","switchingGameState","randomWarpsEnabled","FIRE_RED_LAST_BANK","FIRE_RED_CURRENT_BANK","FIRE_RED_CURRENT_MAP","FIRE_RED_CURRENT_WARP","EMERALD_LAST_BANK","EMERALD_CURRENT_BANK","EMERALD_CURRENT_MAP","EMERALD_CURRENT_WARP","EMERALD_MAP_TYPE","FIRE_RED_MAP_TYPE","flagManager","GameBoyAdvanceCPU","prototype","write32WithoutIntercept","write32","address","data","IodineGUI","Iodine","IOCore","cartridge","romCode","pause","beforeRomCode","partySlice","readWRAMSlice","EMERALD_PARTY_OFFSET","FIRE_RED_PARTY_OFFSET","PLAYER_PARTY_LENGTH","playerNameAndState","dynamicMemorySlice","EMERALD_SAVE_2_PTR","FIRE_RED_SAVE_2_PTR","NAME_STATE_OFFSET","NAME_STATE_LENGTH","idAndPlayTime","ID_TIME_OFFSET","ID_TIME_LENGTH","bagStoreage","BagStoreage","readData","FlagManager","hasBike","readFlags","saveStateManager","loadState","gameSwitchingWarp","toRomCode","this","write8","toBank","toMap","toWarpNo","currentRomCode","spliceWRAM","dynamicMemorySplice","writeData","writeFlags","mixerInput","volume","document","getElementById","classList","add","play","remove","write8WithoutIntercept","EMERALD_MOVEMENT_MODE_OFFSET","FIRE_RED_MOVEMENT_MODE_OFFSET","MOVEMENT_MODE_WALK","MOVEMENT_MODE_BIKE","MOVEMENT_MODE_SURF","autoBike","teleportAnywhere","read8WithoutIntercept","read8","current","current1","handleWarpRedirection","reverseNextWarp","forceNextWarp","async","quickSpeedUp","duration","currentSpeed","getSpeed","setSpeed","delay","quickHideScreen","elmnt","offsetWidth","length","startAddress","endAddress","memory","externalRAM","slice","i","bank","map","warpNo","pkWarp","trigger","toParts","split","PKWarp","warpList","get","source","toParts1","console","log","saveState","walkThroughWalls","runIndoors","frWallsOffset","frRunIndoorsOffset","GameBoyAdvanceMultiCartridge","initializeWithoutIntercept","initialize","startingRom","cartriges","ROM","readROM16WithoutIntercept","readROM16","FIRE_RED_CURRENT_GROUND_OFFSET","EMERALD_CURRENT_GROUND_OFFSET","CURRENT_GROUND_LAND","CURRENT_GROUND_WATER","CURRENT_GROUND_LADDER","CURRENT_GROUND_ELEVATED","EMERALD_STATE_OFFSET","FIRE_RED_STATE_OFFSET","forcePlayerState","state","cpu","whiteoutTeam","write16","dynamicPointer","offsetInDynamic","read32","FIRE_RED_SAVE_1_PTR","EMERALD_SAVE_1_PTR","FIRE_RED_OBSF_MONEY_OFFSET","FIRE_RED_OBSF_MONEY_LENGTH","EMERALD_OBSF_MONEY_OFFSET","EMERALD_OBSF_MONEY_LENGTH","FIRE_RED_XOR_KEY_OFFSET","FIRE_RED_XOR_KEY_LENGTH","EMERALD_XOR_KEY_OFFSET","EMERALD_XOR_KEY_LENGTH","FIRE_RED_ITEM_OFFSET","FIRE_RED_ITEM_LENGTH","EMERALD_ITEM_OFFSET","EMERALD_ITEM_LENGTH","FIRE_RED_KEY_ITEM_OFFSET","FIRE_RED_KEY_ITEM_LENGTH","EMERALD_KEY_ITEM_OFFSET","EMERALD_KEY_ITEM_LENGTH","FIRE_RED_BALL_OFFSET","FIRE_RED_BALL_LENGTH","EMERALD_BALL_OFFSET","EMERALD_BALL_LENGTH","FIRE_RED_TM_OFFSET","FIRE_RED_TM_LENGTH","EMERALD_TM_OFFSET","EMERALD_TM_LENGTH","FIRE_RED_BERRIES_OFFSET","FIRE_RED_BERRIES_LENGTH","EMERALD_BERRIES_OFFSET","EMERALD_BERRIES_LENGTH","money","itemPocket","Map","keyItemsPocket","ballItemPocket","tmCase","berryPocket","game","readEmeraldData","readFireRedData","clear","save2Start","xorKey32","xorKey16","read16","save1Start","readItemSection","lastGame","writeDataToEmerald","writeDataToFireRed","size","set","hasRocksmash","hasWhirldpool","hasBodyslam","delete","writeItemSection","hasRocksmash1","hasWhirldpool1","hasBodyslam1","offset","storeTo","item","ballQuantity","store","storeArr","quantity","item1","ITEM_DATA","Nothing","number","quantity1","badgeSync","FIRE_RED_BASE_FLAG_OFFSET","FIRE_RED_SYS_FLAGS_OFFSET","FIRE_RED_BADGE1_OFFSET","FIRE_RED_BADGE2_OFFSET","FIRE_RED_BADGE3_OFFSET","FIRE_RED_BADGE4_OFFSET","FIRE_RED_BADGE5_OFFSET","FIRE_RED_BADGE6_OFFSET","FIRE_RED_BADGE7_OFFSET","FIRE_RED_BADGE8_OFFSET","FIRE_RED_RUNNING_SHOE_OFFSET","FIRE_RED_BADGE_OFFSETS","FIRE_RED_BIKE_OBTAINED_OFFSET","EMERALD_SYS_FLAGS_OFFSET","EMERALD_BADGE1_OFFSET","EMERALD_BADGE2_OFFSET","EMERALD_BADGE3_OFFSET","EMERALD_BADGE4_OFFSET","EMERALD_BADGE5_OFFSET","EMERALD_BADGE6_OFFSET","EMERALD_BADGE7_OFFSET","EMERALD_BADGE8_OFFSET","EMERALD_RUNNING_SHOE_OFFSET","EMERALD_BADGE_OFFSETS","badge1","badge2","badge3","badge4","badge5","badge6","badge7","badge8","hasRunningShoes","HMState","modifyBadge","badgeNumber","shouldGiveOrRemoveBit","modifySystemFlag","modifyRunningShoes","manager","savePtr","sysFlagOffset","setFlag","canFlash","canCut","canFly","canStrength","canSurf","canSmash","canWaterfall","canDive","canWhirlpool","getFlag","saveOffset","sectionOffset","flagOffset","flagBit","Math","ceil","toString","padStart","reverse","value","byteArr","parseInt","join","readEmeraldFlags","readCrystalFlags","readFireRedFlags","evaluate","writeEmeraldFlags","writeCrystalFlags","writeFireRedFlags","updatedBadges","updateBadges","badges"],"version":3,"file":"index.b56d232f.js.map"}