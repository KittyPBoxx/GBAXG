{"mappings":"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","sources":["dist/IodineGBA/core/CPU/SWI.js"],"sourcesContent":["\"use strict\";\n/*\n    Using implimentations from MGBA and GBA.js see:\n    https://github.com/endrift/gbajs/blob/master/js/irq.js\n    https://github.com/mgba-emu/mgba/blob/38299f397f97bf7a8381395f6fc8920e690844c7/src/gba/bios.c\n*/\n\nconst SWI_OP_CODE = {\n    GBA_SWI_SOFT_RESET                 : 0x00,\n\tGBA_SWI_REGISTER_RAM_RESET         : 0x01,\n\tGBA_SWI_HALT                       : 0x02,\n\tGBA_SWI_STOP                       : 0x03,\n\tGBA_SWI_INTR_WAIT                  : 0x04,\n\tGBA_SWI_VBLANK_INTR_WAIT           : 0x05,\n\tGBA_SWI_DIV                        : 0x06,\n\tGBA_SWI_DIV_ARM                    : 0x07,\n\tGBA_SWI_SQRT                       : 0x08,\n\tGBA_SWI_ARCTAN                     : 0x09,\n\tGBA_SWI_ARCTAN2                    : 0x0A,\n\tGBA_SWI_CPU_SET                    : 0x0B,\n\tGBA_SWI_CPU_FAST_SET               : 0x0C,\n\tGBA_SWI_GET_BIOS_CHECKSUM          : 0x0D,\n\tGBA_SWI_BG_AFFINE_SET              : 0x0E,\n\tGBA_SWI_OBJ_AFFINE_SET             : 0x0F,\n\tGBA_SWI_BIT_UNPACK                 : 0x10,\n\tGBA_SWI_LZ77_UNCOMP_WRAM           : 0x11,\n\tGBA_SWI_LZ77_UNCOMP_VRAM           : 0x12,\n\tGBA_SWI_HUFFMAN_UNCOMP             : 0x13,\n\tGBA_SWI_RL_UNCOMP_WRAM             : 0x14,\n\tGBA_SWI_RL_UNCOMP_VRAM             : 0x15,\n\tGBA_SWI_DIFF_8BIT_UNFILTER_WRAM    : 0x16,\n\tGBA_SWI_DIFF_8BIT_UNFILTER_VRAM    : 0x17,\n\tGBA_SWI_DIFF_16BIT_UNFILTER        : 0x18,\n\tGBA_SWI_SOUND_BIAS                 : 0x19,\n\tGBA_SWI_SOUND_DRIVER_INIT          : 0x1A,\n\tGBA_SWI_SOUND_DRIVER_MODE          : 0x1B,\n\tGBA_SWI_SOUND_DRIVER_MAIN          : 0x1C,\n\tGBA_SWI_SOUND_DRIVER_VSYNC         : 0x1D,\n\tGBA_SWI_SOUND_CHANNEL_CLEAR        : 0x1E,\n\tGBA_SWI_MIDI_KEY_2_FREQ            : 0x1F,\n\tGBA_SWI_MUSIC_PLAYER_OPEN          : 0x20,\n\tGBA_SWI_MUSIC_PLAYER_START         : 0x21,\n\tGBA_SWI_MUSIC_PLAYER_STOP          : 0x22,\n\tGBA_SWI_MUSIC_PLAYER_CONTINUE      : 0x23,\n\tGBA_SWI_MUSIC_PLAYER_FADE_OUT      : 0x24,\n\tGBA_SWI_MULTI_BOOT                 : 0x25,\n\tGBA_SWI_HARD_RESET                 : 0x26,\n\tGBA_SWI_CUSTOM_HALT                : 0x27,\n\tGBA_SWI_SOUND_DRIVER_VSYNC_OFF     : 0x28,\n\tGBA_SWI_SOUND_DRIVER_VSYNC_ON      : 0x29,\n\tGBA_SWI_SOUND_DRIVER_GET_JUMP_LIST : 0x2A\n};\n\nconst CPU_MODES = {\n    USER       : 0x10,\n\tFIQ        : 0x11,\n\tIRQ        : 0x12,\n\tSUPERVISOR : 0x13,\n\tABORT      : 0x17,\n\tUNDEFINED  : 0x1B,\n\tSYSTEM     : 0x1F\n} \n\nfunction GameBoyAdvanceSWI(IOCore, CPUCore, IRQ) {\n    this.IOCore = IOCore;\n    this.CPUCore = CPUCore;\n    this.IRQ = IRQ;\n    this.warnUnimplementedCalls = false;\n}\n\nGameBoyAdvanceSWI.prototype.execute = function (opcode) {\n    \n    switch (opcode) {\n        case SWI_OP_CODE.GBA_SWI_SOFT_RESET:\n        {    \n            //console.info(\"Calling GBA_SWI_SOFT_RESET...\");\n            let flag = this.CPUCore.memory.readInternalWRAM8(0x7FFA);\n            for (let i = 0x7E00; i < (0x8000 - 0x200); i += 4) { this.CPUCore.memory.writeInternalWRAM32(i, 0); }\n            this.resetSP();\n            this.CPUCore.THUMB.writeLR(!flag ? 0x08000000 : 0x02000000);\n            this.CPUCore.enterARM();\n            this.CPUCore.THUMB.writePC(this.CPUCore.THUMB.readLR());\n        }   break;\n        case SWI_OP_CODE.GBA_SWI_REGISTER_RAM_RESET:\n        {\n            //console.info(\"Calling GBA_SWI_REGISTER_RAM_RESET...\");\n            this.CPUCore.memory.gfxRenderer.writeDISPCNT8_0(0x0080);\n\n            let regions = this.CPUCore.ARM.readRegister(0);\n            if (regions & 0x01) {\n                this.CPUCore.memory.externalRAM.fill(0, 0, 0x40000);\n\t\t    }\n            if (regions & 0x02) {\n                this.CPUCore.memory.internalRAM.fill(0, 0, 0x8000 - 0x200);\n            }\n            if (regions & 0x04) {\n                this.CPUCore.memory.gfxRenderer.renderer.paletteRAM.fill(0, 0, 0x400);\n            }\n            if (regions & 0x08) {\n                this.CPUCore.memory.gfxRenderer.renderer.VRAM.fill(0, 0, 0x18000); \n            }\n            if (regions & 0x10) { \n                this.IOCore.gfxRenderer.renderer.objRenderer.OAMRAM.fill(0, 0x400)\n            } \n            if (regions & 0x1C) { this.warnUnimplementedCalls && console.warn(\"UNSUPPORTED GBA_SWI_REGISTER_RAM_RESET REGISTER: 0x1C\"); } // POSSIBLY ALSO VRAM\n            if (regions & 0x20) { this.warnUnimplementedCalls && console.warn(\"UNSUPPORTED GBA_SWI_REGISTER_RAM_RESET REGISTER: 0x20\"); } // INPUT DATA?\n            if (regions & 0x40) { this.warnUnimplementedCalls && console.warn(\"UNSUPPORTED GBA_SWI_REGISTER_RAM_RESET REGISTER: 0x40\"); } // SOUND STUFF\n            if (regions & 0x80) { this.warnUnimplementedCalls && console.warn(\"UNSUPPORTED GBA_SWI_REGISTER_RAM_RESET REGISTER: 0x80\"); } // VISUAL DATA?\n            if (regions & 0x9C) { this.warnUnimplementedCalls && console.warn(\"UNSUPPORTED GBA_SWI_REGISTER_RAM_RESET REGISTER: 0x9C\"); } // VIDEO REGISTER\n        }   break;            \n        case SWI_OP_CODE.GBA_SWI_HALT:\n           //console.info(\"Calling GBA_SWI_HALT...\");\n            this.IOCore.handleHalt();\n            break;                      \n        case SWI_OP_CODE.GBA_SWI_STOP:\n            //console.info(\"Calling GBA_SWI_STOP...\");\n            this.IOCore.handleStop();\n            break;                      \n        case SWI_OP_CODE.GBA_SWI_INTR_WAIT:\n            //console.info(\"Calling GBA_SWI_INTR_WAIT...\");\n            assertIRQ();\n            break;                 \n        case SWI_OP_CODE.GBA_SWI_VBLANK_INTR_WAIT:\n            //console.info(\"Calling GBA_SWI_VBLANK_INTR_WAIT...\");\n            this.IOCore.handleHalt();\n            break;          \n        case SWI_OP_CODE.GBA_SWI_DIV: \n        {\n            //console.info(\"Calling GBA_SWI_DIV...\");\n            let result = (this.CPUCore.ARM.readRegister(0) | 0) / (this.CPUCore.ARM.readRegister(1) | 0);\n            let mod = (this.CPUCore.ARM.readRegister(0) | 0) % (this.CPUCore.ARM.readRegister(1) | 0);\n            this.CPUCore.ARM.writeRegister(0, result | 0);\n            this.CPUCore.ARM.writeRegister(1, mod | 0);\n            this.CPUCore.ARM.writeRegister(3, Math.abs(result | 0));\n        }   break;                       \n        case SWI_OP_CODE.GBA_SWI_DIV_ARM:\n        {    \n            //console.info(\"Calling GBA_SWI_DIV_ARM...\");\n            let result = (this.CPUCore.ARM.readRegister(1) | 0) / (this.CPUCore.ARM.readRegister(0) | 0);\n            let mod = (this.CPUCore.ARM.readRegister(1) | 0) % (this.CPUCore.ARM.readRegister(0) | 0);\n            this.CPUCore.ARM.writeRegister(0, result | 0);\n            this.CPUCore.ARM.writeRegister(1, mod | 0);\n            this.CPUCore.ARM.writeRegister(3, Math.abs(result | 0));\n        }   break;                   \n        case SWI_OP_CODE.GBA_SWI_SQRT:\n        {\n            //console.info(\"Calling GBA_SWI_SQRT...\");\n\t\t    let root = Math.sqrt(this.CPUCore.ARM.readRegister(0));\n\t\t    this.CPUCore.ARM.writeRegister(0, root | 0); // Coerce down to int\n        }   break;                      \n        case SWI_OP_CODE.GBA_SWI_ARCTAN:\n        {    \n            //console.info(\"Calling GBA_SWI_ARCTAN...\");\n\t\t    let x = this.CPUCore.ARM.readRegister(0) / 16384;\n\t\t    let y = this.CPUCore.ARM.readRegister(1) / 16384;\n\t\t    this.CPUCore.ARM.writeRegister(0, (Math.atan(y, x) / (2 * Math.PI)) * 0x10000);\n        }   break;                    \n        case SWI_OP_CODE.GBA_SWI_ARCTAN2:\n        {\n            //console.info(\"Calling GBA_SWI_ARCTAN2...\");\n\t\t    let x = this.CPUCore.ARM.readRegister(0) / 16384;\n\t\t    let y = this.CPUCore.ARM.readRegister(1) / 16384;\n\t\t    this.CPUCore.ARM.writeRegister(0, (Math.atan2(y, x) / (2 * Math.PI)) * 0x10000);\n            break;\n        }                   \n        case SWI_OP_CODE.GBA_SWI_CPU_SET:\n        {    \n            //console.info(\"Calling GBA_SWI_CPU_SET...\");\n            let source = this.CPUCore.ARM.readRegister(0);\n            let dest = this.CPUCore.ARM.readRegister(1);\n            let mode = this.CPUCore.ARM.readRegister(2);\n            let count = mode & 0x000FFFFF;\n            let fill = mode & 0x01000000;\n            let wordsize = (mode & 0x04000000) ? 4 : 2;\n            if (fill) {\n                if (wordsize == 4) {\n                    source &= 0xFFFFFFFC;\n                    dest &= 0xFFFFFFFC;\n                    let word = this.CPUCore.memory.memoryRead32(source);\n                    for (let i = 0; i < count; ++i) {\n                        this.CPUCore.memory.memoryWrite32(dest + (i << 2), word);\n                    }\n                } else {\n                    source &= 0xFFFFFFFE;\n                    dest &= 0xFFFFFFFE;\n                    let word = this.CPUCore.memory.memoryRead16(source);\n                    for (let i = 0; i < count; ++i) {\n                        this.CPUCore.memory.memoryWrite16(dest + (i << 1), word);\n                    }\n                }\n            } else {\n                if (wordsize == 4) {\n                    source &= 0xFFFFFFFC;\n                    dest &= 0xFFFFFFFC;\n                    for (let i = 0; i < count; ++i) {\n                        let word = this.CPUCore.memory.memoryRead32(source + (i << 2));\n                        this.CPUCore.memory.memoryWrite32(dest + (i << 2), word);\n                    }\n                } else {\n                    source &= 0xFFFFFFFE;\n                    dest &= 0xFFFFFFFE;\n                    for (let i = 0; i < count; ++i) {\n                        let word = this.CPUCore.memory.memoryRead16(source + (i << 1));\n                        this.CPUCore.memory.memoryWrite16(dest + (i << 1), word);\n                    }\n                }\n            }\n        }   break;                 \n        case SWI_OP_CODE.GBA_SWI_CPU_FAST_SET:\n        {\n            //console.info(\"Calling GBA_SWI_CPU_FAST_SET...\");\n            let source = this.CPUCore.ARM.readRegister(0) & 0xFFFFFFFC;\n            let dest = this.CPUCore.ARM.readRegister(1) & 0xFFFFFFFC;\n            let mode = this.CPUCore.ARM.readRegister(2);\n            let count = mode & 0x000FFFFF;\n            count = ((count + 7) >> 3) << 3;\n            let fill = mode & 0x01000000;\n            if (fill) {\n                let word = this.CPUCore.memory.memoryRead32(source);\n                for (let i = 0; i < count; ++i) {\n                    this.CPUCore.memory.memoryWrite32(dest + (i << 2), word);\n                }\n            } else {\n                for (let i = 0; i < count; ++i) {\n                    let word = this.CPUCore.memory.memoryRead32(source + (i << 2));\n                    this.CPUCore.memory.memoryWrite32(dest + (i << 2), word);\n                }\n            }\n        }   break;          \n        case SWI_OP_CODE.GBA_SWI_GET_BIOS_CHECKSUM:\n            this.warnUnimplementedCalls && console.warn(\"UNSUPPORTED CALL TO GBA_SWI_GET_BIOS_CHECKSUM\");\n            break;         \n        case SWI_OP_CODE.GBA_SWI_BG_AFFINE_SET:\n        {    \n            //console.info(\"Calling GBA_SWI_BG_AFFINE_SET...\");\n            let i = this.CPUCore.ARM.readRegister(2);\n\t\t    let ox, oy;\n\t\t    let cx, cy;\n\t\t    let sx, sy;\n\t\t    let theta;\n\t\t    let offset = this.CPUCore.ARM.readRegister(0);\n\t\t    let destination = this.CPUCore.ARM.readRegister(1);\n\t\t    let a, b, c, d;\n\t\t    let rx, ry;\n\t\t    while (i--) {\n\t\t    \t// [ sx   0  0 ]   [ cos(theta)  -sin(theta)  0 ]   [ 1  0  cx - ox ]   [ A B rx ]\n\t\t    \t// [  0  sy  0 ] * [ sin(theta)   cos(theta)  0 ] * [ 0  1  cy - oy ] = [ C D ry ]\n\t\t    \t// [  0   0  1 ]   [     0            0       1 ]   [ 0  0     1    ]   [ 0 0  1 ]\n\t\t    \tox = this.CPUCore.memory.memoryRead32(offset) / 256;\n\t\t    \toy = this.CPUCore.memory.memoryRead32(offset + 4) / 256;\n\t\t    \tcx = this.CPUCore.memory.memoryRead16(offset + 8);\n\t\t    \tcy = this.CPUCore.memory.memoryRead16(offset + 10);\n\t\t    \tsx = this.CPUCore.memory.memoryRead16(offset + 12) / 256;\n\t\t    \tsy = this.CPUCore.memory.memoryRead16(offset + 14) / 256;\n\t\t    \ttheta = (this.CPUCore.memory.memoryRead16(offset + 16) >> 8) / 128 * Math.PI;\n\t\t    \toffset += 20;\n\t\t    \t// Rotation\n\t\t    \ta = d = Math.cos(theta);\n\t\t    \tb = c = Math.sin(theta);\n\t\t    \t// Scale\n\t\t    \ta *= sx;\n\t\t    \tb *= -sx;\n\t\t    \tc *= sy;\n\t\t    \td *= sy;\n\t\t    \t// Translate\n\t\t    \trx = ox - (a * cx + b * cy);\n\t\t    \try = oy - (c * cx + d * cy);\n\t\t    \tthis.CPUCore.memory.memoryWrite16(destination, (a * 256) | 0);\n\t\t    \tthis.CPUCore.memory.memoryWrite16(destination + 2, (b * 256) | 0);\n\t\t    \tthis.CPUCore.memory.memoryWrite16(destination + 4, (c * 256) | 0);\n\t\t    \tthis.CPUCore.memory.memoryWrite16(destination + 6, (d * 256) | 0);\n\t\t    \tthis.CPUCore.memory.memoryWrite32(destination + 8, (rx * 256) | 0);\n\t\t    \tthis.CPUCore.memory.memoryWrite32(destination + 12, (ry * 256) | 0);\n\t\t    \tdestination += 16;\n\t\t    }      \n        }   break;             \n        case SWI_OP_CODE.GBA_SWI_OBJ_AFFINE_SET:\n        {    \n            //console.info(\"Calling GBA_SWI_OBJ_AFFINE_SET...\");\n            let i = this.CPUCore.ARM.readRegister(2);\n            let sx, sy;\n            let theta;\n            let offset = this.CPUCore.ARM.readRegister(0);\n            let destination = this.CPUCore.ARM.readRegister(1);\n            let diff = this.CPUCore.ARM.readRegister(3);\n            let a, b, c, d;\n            while (i--) {\n                // [ sx   0 ]   [ cos(theta)  -sin(theta) ]   [ A B ]\n                // [  0  sy ] * [ sin(theta)   cos(theta) ] = [ C D ]\n                sx = this.CPUCore.memory.memoryRead16(offset) / 256;\n                sy = this.CPUCore.memory.memoryRead16(offset + 2) / 256;\n                theta = (this.CPUCore.memory.memoryRead16(offset + 4) >> 8) / 128 * Math.PI;\n                offset += 6;\n                // Rotation\n                a = d = Math.cos(theta);\n                b = c = Math.sin(theta);\n                // Scale\n                a *= sx;\n                b *= -sx;\n                c *= sy;\n                d *= sy;\n                this.CPUCore.memory.memoryWrite16(destination, (a * 256) | 0);\n                this.CPUCore.memory.memoryWrite16(destination + diff, (b * 256) | 0);\n                this.CPUCore.memory.memoryWrite16(destination + diff * 2, (c * 256) | 0);\n                this.CPUCore.memory.memoryWrite16(destination + diff * 3, (d * 256) | 0);\n                destination += diff * 4;\n            }\n        }   break;            \n        case SWI_OP_CODE.GBA_SWI_BIT_UNPACK:\n            this.warnUnimplementedCalls && console.warn(\"UNSUPPORTED CALL TO GBA_SWI_BIT_UNPACK\");\n            break;                \n        case SWI_OP_CODE.GBA_SWI_LZ77_UNCOMP_WRAM:\n            //console.info(\"Calling GBA_SWI_LZ77_UNCOMP_WRAM...\");\n            this.lz77(this.CPUCore.ARM.readRegister(0), this.CPUCore.ARM.readRegister(1), 1);\n            break;          \n        case SWI_OP_CODE.GBA_SWI_LZ77_UNCOMP_VRAM:\n            //console.info(\"Calling GBA_SWI_LZ77_UNCOMP_VRAM...\");\n            this.lz77(this.CPUCore.ARM.readRegister(0), this.CPUCore.ARM.readRegister(1), 2);\n            break;          \n        case SWI_OP_CODE.GBA_SWI_HUFFMAN_UNCOMP:\n        {\n            //console.info(\"Calling GBA_SWI_HUFFMAN_UNCOMP...\");\n            this.huffman(this.CPUCore.ARM.readRegister(0), this.CPUCore.ARM.readRegister(1));\n        }   break;            \n        case SWI_OP_CODE.GBA_SWI_RL_UNCOMP_WRAM:\n        {    \n            //console.info(\"Calling GBA_SWI_RL_UNCOMP_WRAM...\");\n            this.rl(this.CPUCore.ARM.readRegister(0), this.CPUCore.ARM.readRegister(1), 1);\n        }   break;            \n        case SWI_OP_CODE.GBA_SWI_RL_UNCOMP_VRAM:\n        {    \n            //console.info(\"Calling GBA_SWI_RL_UNCOMP_VRAM...\");\n            this.rl(this.CPUCore.ARM.readRegister(0), this.CPUCore.ARM.readRegister(1), 2);\n        }   break;            \n        case SWI_OP_CODE.GBA_SWI_DIFF_8BIT_UNFILTER_WRAM:\n            this.warnUnimplementedCalls && console.warn(\"UNSUPPORTED CALL TO GBA_SWI_DIFF_8BIT_UNFILTER_WRAM\");\n            break;   \n        case SWI_OP_CODE.GBA_SWI_DIFF_8BIT_UNFILTER_VRAM:\n            this.warnUnimplementedCalls && console.warn(\"UNSUPPORTED CALL TO GBA_SWI_DIFF_8BIT_UNFILTER_VRAM\");\n            break;   \n        case SWI_OP_CODE.GBA_SWI_DIFF_16BIT_UNFILTER:\n            this.warnUnimplementedCalls && console.warn(\"UNSUPPORTED CALL TO GBA_SWI_DIFF_16BIT_UNFILTER\");\n            break;       \n        case SWI_OP_CODE.GBA_SWI_SOUND_BIAS:\n            this.warnUnimplementedCalls && console.warn(\"UNSUPPORTED CALL TO GBA_SWI_SOUND_BIAS\");\n            break;                \n        case SWI_OP_CODE.GBA_SWI_SOUND_DRIVER_INIT:\n            this.warnUnimplementedCalls && console.warn(\"UNSUPPORTED CALL TO GBA_SWI_SOUND_DRIVER_INIT\");\n            break;         \n        case SWI_OP_CODE.GBA_SWI_SOUND_DRIVER_MODE:\n            this.warnUnimplementedCalls && console.warn(\"UNSUPPORTED CALL TO GBA_SWI_SOUND_DRIVER_MODE\");\n            break;         \n        case SWI_OP_CODE.GBA_SWI_SOUND_DRIVER_MAIN:\n            this.warnUnimplementedCalls && console.warn(\"UNSUPPORTED CALL TO GBA_SWI_SOUND_DRIVER_MAIN\");\n            break;         \n        case SWI_OP_CODE.GBA_SWI_SOUND_DRIVER_VSYNC:\n            this.warnUnimplementedCalls && console.warn(\"UNSUPPORTED CALL TO GBA_SWI_SOUND_DRIVER_VSYNC\");\n            break;        \n        case SWI_OP_CODE.GBA_SWI_SOUND_CHANNEL_CLEAR:\n            this.warnUnimplementedCalls && console.warn(\"UNSUPPORTED CALL TO GBA_SWI_SOUND_CHANNEL_CLEAR\");\n            break;       \n        case SWI_OP_CODE.GBA_SWI_MIDI_KEY_2_FREQ:\n        {    \n            //console.info(\"Calling GBA_SWI_MIDI_KEY_2_FREQ...\");\n            let key = this.CPUCore.memory.memoryRead32(this.CPUCore.ARM.readRegister(0) + 4);\n            this.CPUCore.ARM.writeRegister(0, key / Math.pow(2, (180 - this.CPUCore.ARM.readRegister(1) - this.CPUCore.ARM.readRegister(2) / 256) / 12) >>> 0);\n        }   break;           \n        case SWI_OP_CODE.GBA_SWI_MUSIC_PLAYER_OPEN:\n            this.warnUnimplementedCalls && console.warn(\"UNSUPPORTED CALL TO GBA_SWI_MUSIC_PLAYER_OPEN\");\n            break;         \n        case SWI_OP_CODE.GBA_SWI_MUSIC_PLAYER_START:\n            this.warnUnimplementedCalls && console.warn(\"UNSUPPORTED CALL TO GBA_SWI_MUSIC_PLAYER_START\");\n            break;        \n        case SWI_OP_CODE.GBA_SWI_MUSIC_PLAYER_STOP:\n            this.warnUnimplementedCalls && console.warn(\"UNSUPPORTED CALL TO GBA_SWI_MUSIC_PLAYER_STOP\");\n            break;         \n        case SWI_OP_CODE.GBA_SWI_MUSIC_PLAYER_CONTINUE:\n            this.warnUnimplementedCalls && console.warn(\"UNSUPPORTED CALL TO GBA_SWI_MUSIC_PLAYER_CONTINUE\");\n            break;     \n        case SWI_OP_CODE.GBA_SWI_MUSIC_PLAYER_FADE_OUT:\n            this.warnUnimplementedCalls && console.warn(\"UNSUPPORTED CALL TO GBA_SWI_MUSIC_PLAYER_FADE_OUT\");\n            break;     \n        case SWI_OP_CODE.GBA_SWI_MULTI_BOOT:\n            this.warnUnimplementedCalls && console.warn(\"UNSUPPORTED CALL TO GBA_SWI_MULTI_BOOT\");\n            break;                \n        case SWI_OP_CODE.GBA_SWI_HARD_RESET:\n            this.warnUnimplementedCalls && console.warn(\"UNSUPPORTED CALL TO GBA_SWI_HARD_RESET\");\n            break;                \n        case SWI_OP_CODE.GBA_SWI_CUSTOM_HALT:\n            this.warnUnimplementedCalls && console.warn(\"UNSUPPORTED CALL TO GBA_SWI_CUSTOM_HALT\");\n            break;               \n        case SWI_OP_CODE.GBA_SWI_SOUND_DRIVER_VSYNC_OFF:\n            this.warnUnimplementedCalls && console.warn(\"UNSUPPORTED CALL TO GBA_SWI_SOUND_DRIVER_VSYNC_OFF\");\n            break;    \n        case SWI_OP_CODE.GBA_SWI_SOUND_DRIVER_VSYNC_ON:\n            this.warnUnimplementedCalls && console.warn(\"UNSUPPORTED CALL TO GBA_SWI_SOUND_DRIVER_VSYNC_ON\");\n            break;     \n        case SWI_OP_CODE.GBA_SWI_SOUND_DRIVER_GET_JUMP_LIST:\n        {\n            //console.info(\"UNSUPPORTED CALL TO GBA_SWI_SOUND_DRIVER_GET_JUMP_LIST\");\n            this.IOCore.handleHalt(); \n        }   break;\n        default:\n            this.warnUnimplementedCalls && console.log(\"UNKNOWN OP CODE: \" + opcode);    \n    }\n}\n\nGameBoyAdvanceSWI.prototype.resetSP = function() {\n\n    this.CPUCore.switchMode(CPU_MODES.SUPERVISOR);\n    this.CPUCore.THUMB.writeSP(0x3007FE0);\n    this.CPUCore.switchMode(CPU_MODES.IRQ);\n    this.CPUCore.THUMB.writeSP(0x3007FA0);\n    this.CPUCore.switchMode(CPU_MODES.SYSTEM);\n    this.CPUCore.THUMB.writeSP(0x3007F00);\n    \n};\n\nGameBoyAdvanceSWI.prototype.lz77 = function(source, dest, unitsize) {\n\n\tlet remaining = (this.CPUCore.memory.memoryRead32(source) & 0xFFFFFF00) >> 8;\n\n\tlet blockheader;\n\tlet sPointer = source + 4;\n\tlet dPointer = dest;\n\tlet blocksRemaining = 0;\n\tlet block;\n\tlet disp;\n\tlet bytes;\n\tlet buffer = 0;\n\tlet loaded;\n\twhile (remaining > 0) {\n\t\tif (blocksRemaining) {\n\t\t\tif (blockheader & 0x80) {\n\t\t\t\t// Compressed\n\t\t\t\tblock = this.CPUCore.memory.memoryRead8(sPointer) | (this.CPUCore.memory.memoryRead8(sPointer + 1) << 8);\n\t\t\t\tsPointer += 2;\n\t\t\t\tdisp = dPointer - (((block & 0x000F) << 8) | ((block & 0xFF00) >> 8)) - 1;\n\t\t\t\tbytes = ((block & 0x00F0) >> 4) + 3;\n\t\t\t\twhile (bytes-- && remaining) {\n\t\t\t\t\tloaded = this.CPUCore.memory.memoryRead8(disp++);\n\t\t\t\t\tif (unitsize == 2) {\n\t\t\t\t\t\tbuffer >>= 8;\n\t\t\t\t\t\tbuffer |= loaded << 8;\n\t\t\t\t\t\tif (dPointer & 1) {\n\t\t\t\t\t\t\tthis.CPUCore.memory.memoryWrite16(dPointer - 1, buffer);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.CPUCore.memory.memoryWrite8(dPointer, loaded);\n\t\t\t\t\t}\n\t\t\t\t\t--remaining;\n\t\t\t\t\t++dPointer;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Uncompressed\n\t\t\t\tloaded = this.CPUCore.memory.memoryRead8(sPointer++);\n\t\t\t\tif (unitsize == 2) {\n\t\t\t\t\tbuffer >>= 8;\n\t\t\t\t\tbuffer |= loaded << 8;\n\t\t\t\t\tif (dPointer & 1) {\n\t\t\t\t\t\tthis.CPUCore.memory.memoryWrite16(dPointer - 1, buffer);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis.CPUCore.memory.memoryWrite8(dPointer, loaded);\n\t\t\t\t}\n\t\t\t\t--remaining;\n\t\t\t\t++dPointer;\n\t\t\t}\n\t\t\tblockheader <<= 1;\n\t\t\t--blocksRemaining;\n\t\t} else {\n\t\t\tblockheader = this.CPUCore.memory.memoryRead8(sPointer++);\n\t\t\tblocksRemaining = 8;\n\t\t}\n\t}\n};\n\nGameBoyAdvanceSWI.prototype.huffman = function(source, dest) {\n\tsource = source & 0xFFFFFFFC;\n\tlet header = this.CPUCore.memory.memoryRead32(source);\n\tlet remaining = header >> 8;\n\tlet bits = header & 0xF;\n\tif (32 % bits) {\n\t\tthrow 'Unimplemented unaligned Huffman';\n\t}\n\tlet padding = (4 - remaining) & 0x3;\n\tremaining &= 0xFFFFFFFC;\n\n\tlet tree = [];\n\tlet treesize = (this.CPUCore.memory.memoryRead8(source + 4) << 1) + 1;\n\tlet block;\n\tlet sPointer = source + 5 + treesize;\n\tlet dPointer = dest & 0xFFFFFFFC;\n\tlet i;\n\tfor (i = 0; i < treesize; ++i) {\n\t\ttree.push(this.CPUCore.memory.memoryRead8(source + 5 + i));\n\t}\n\tlet node;\n\tlet offset = 0;\n\tlet bitsRemaining;\n\tlet readBits;\n\tlet bitsSeen = 0;\n\tnode = tree[0];\n\twhile (remaining > 0) {\n\t\tlet bitstream = this.CPUCore.memory.memoryRead32(sPointer);\n\t\tsPointer += 4;\n\t\tfor (bitsRemaining = 32; bitsRemaining > 0; --bitsRemaining, bitstream <<= 1) {\n\t\t\tif (typeof (node) === 'number') {\n\t\t\t\t// Lazily construct tree\n\t\t\t\tlet next = (offset - 1 | 1) + ((node & 0x3F) << 1) + 2;\n\t\t\t\tnode = {\n\t\t\t\t\tl: next,\n\t\t\t\t\tr: next + 1,\n\t\t\t\t\tlTerm: node & 0x80,\n\t\t\t\t\trTerm: node & 0x40\n\t\t\t\t};\n\t\t\t\ttree[offset] = node;\n\t\t\t}\n\n\t\t\tif (bitstream & 0x80000000) {\n\t\t\t\t// Go right\n\t\t\t\tif (node.rTerm) {\n\t\t\t\t\treadBits = tree[node.r];\n\t\t\t\t} else {\n\t\t\t\t\toffset = node.r;\n\t\t\t\t\tnode = tree[node.r];\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Go left\n\t\t\t\tif (node.lTerm) {\n\t\t\t\t\treadBits = tree[node.l];\n\t\t\t\t} else {\n\t\t\t\t\toffset = node.l;\n\t\t\t\t\tnode = tree[offset];\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tblock |= (readBits & ((1 << bits) - 1)) << bitsSeen;\n\t\t\tbitsSeen += bits;\n\t\t\toffset = 0;\n\t\t\tnode = tree[0];\n\t\t\tif (bitsSeen == 32) {\n\t\t\t\tbitsSeen = 0;\n\t\t\t\tthis.CPUCore.memory.memoryWrite32(dPointer, block);\n\t\t\t\tdPointer += 4;\n\t\t\t\tremaining -= 4;\n\t\t\t\tblock = 0;\n\t\t\t}\n\t\t}\n\n\t}\n\tif (padding) {\n\t\tthis.CPUCore.memory.memoryWrite32(dPointer, block);\n\t}\n};\n\nGameBoyAdvanceSWI.prototype.rl = function(source, dest, unitsize) {\n\tsource = source & 0xFFFFFFFC;\n\tlet remaining = (this.CPUCore.memory.memoryRead32(source) & 0xFFFFFF00) >> 8;\n\tlet padding = (4 - remaining) & 0x3;\n\tlet blockheader;\n\tlet block;\n\tlet sPointer = source + 4;\n\tlet dPointer = dest;\n\tlet buffer = 0;\n\twhile (remaining > 0) {\n\t\tblockheader = this.CPUCore.memory.memoryRead8(sPointer++);\n\t\tif (blockheader & 0x80) {\n\t\t\t// Compressed\n\t\t\tblockheader &= 0x7F;\n\t\t\tblockheader += 3;\n\t\t\tblock = this.CPUCore.memory.memoryRead8(sPointer++);\n\t\t\twhile (blockheader-- && remaining) {\n\t\t\t\t--remaining;\n\t\t\t\tif (unitsize == 2) {\n\t\t\t\t\tbuffer >>= 8;\n\t\t\t\t\tbuffer |= block << 8;\n\t\t\t\t\tif (dPointer & 1) {\n\t\t\t\t\t\tthis.CPUCore.memory.memoryWrite16(dPointer - 1, buffer);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis.CPUCore.memory.memoryWrite8(dPointer, block);\n\t\t\t\t}\n\t\t\t\t++dPointer;\n\t\t\t}\n\t\t} else {\n\t\t\t// Uncompressed\n\t\t\tblockheader++;\n\t\t\twhile (blockheader-- && remaining) {\n\t\t\t\t--remaining;\n\t\t\t\tblock = this.CPUCore.memory.memoryRead8(sPointer++);\n\t\t\t\tif (unitsize == 2) {\n\t\t\t\t\tbuffer >>= 8;\n\t\t\t\t\tbuffer |= block << 8;\n\t\t\t\t\tif (dPointer & 1) {\n\t\t\t\t\t\tthis.CPUCore.memory.memoryWrite16(dPointer - 1, buffer);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis.CPUCore.memory.memoryWrite8(dPointer, block);\n\t\t\t\t}\n\t\t\t\t++dPointer;\n\t\t\t}\n\t\t}\n\t}\n\twhile (padding--) {\n\t\tthis.CPUCore.memory.memoryWrite8(dPointer++, 0);\n\t}\n};"],"names":["SWI_OP_CODE","GBA_SWI_SOFT_RESET","GBA_SWI_REGISTER_RAM_RESET","GBA_SWI_HALT","GBA_SWI_STOP","GBA_SWI_INTR_WAIT","GBA_SWI_VBLANK_INTR_WAIT","GBA_SWI_DIV","GBA_SWI_DIV_ARM","GBA_SWI_SQRT","GBA_SWI_ARCTAN","GBA_SWI_ARCTAN2","GBA_SWI_CPU_SET","GBA_SWI_CPU_FAST_SET","GBA_SWI_GET_BIOS_CHECKSUM","GBA_SWI_BG_AFFINE_SET","GBA_SWI_OBJ_AFFINE_SET","GBA_SWI_BIT_UNPACK","GBA_SWI_LZ77_UNCOMP_WRAM","GBA_SWI_LZ77_UNCOMP_VRAM","GBA_SWI_HUFFMAN_UNCOMP","GBA_SWI_RL_UNCOMP_WRAM","GBA_SWI_RL_UNCOMP_VRAM","GBA_SWI_DIFF_8BIT_UNFILTER_WRAM","GBA_SWI_DIFF_8BIT_UNFILTER_VRAM","GBA_SWI_DIFF_16BIT_UNFILTER","GBA_SWI_SOUND_BIAS","GBA_SWI_SOUND_DRIVER_INIT","GBA_SWI_SOUND_DRIVER_MODE","GBA_SWI_SOUND_DRIVER_MAIN","GBA_SWI_SOUND_DRIVER_VSYNC","GBA_SWI_SOUND_CHANNEL_CLEAR","GBA_SWI_MIDI_KEY_2_FREQ","GBA_SWI_MUSIC_PLAYER_OPEN","GBA_SWI_MUSIC_PLAYER_START","GBA_SWI_MUSIC_PLAYER_STOP","GBA_SWI_MUSIC_PLAYER_CONTINUE","GBA_SWI_MUSIC_PLAYER_FADE_OUT","GBA_SWI_MULTI_BOOT","GBA_SWI_HARD_RESET","GBA_SWI_CUSTOM_HALT","GBA_SWI_SOUND_DRIVER_VSYNC_OFF","GBA_SWI_SOUND_DRIVER_VSYNC_ON","GBA_SWI_SOUND_DRIVER_GET_JUMP_LIST","CPU_MODES","USER","FIQ","IRQ","SUPERVISOR","ABORT","UNDEFINED","SYSTEM","GameBoyAdvanceSWI","IOCore","CPUCore","this","warnUnimplementedCalls","prototype","execute","opcode","flag","memory","readInternalWRAM8","i","writeInternalWRAM32","resetSP","THUMB","writeLR","enterARM","writePC","readLR","gfxRenderer","writeDISPCNT8_0","regions","ARM","readRegister","externalRAM","fill","internalRAM","renderer","paletteRAM","VRAM","objRenderer","OAMRAM","console","warn","handleHalt","handleStop","assertIRQ","result","mod","writeRegister","Math","abs","result1","mod1","root","sqrt","x","y","atan","PI","x1","y1","atan2","source","dest","mode","count","wordsize","word","memoryRead32","i1","memoryWrite32","word1","memoryRead16","i2","memoryWrite16","i3","word2","i4","word3","source1","dest1","mode1","count1","word4","i5","i6","word5","ox","oy","cx","cy","sx","sy","theta","a","b","c","d","rx","ry","i7","offset","destination","cos","sin","sx1","sy1","theta1","a1","b1","c1","d1","i8","offset1","destination1","diff","lz77","huffman","rl","key","pow","log","switchMode","writeSP","unitsize","blockheader","block","disp","bytes","loaded","remaining","sPointer","dPointer","blocksRemaining","buffer","memoryRead8","memoryWrite8","header","bits","padding","node","tree","treesize","push","bitsRemaining","readBits","bitsSeen","bitstream","next","l","r","lTerm","rTerm"],"version":3,"file":"index.e437b668.js.map"}