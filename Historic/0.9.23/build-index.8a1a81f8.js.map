{"mappings":"AAAA,aACA,IAAIA,SAAW,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACzI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAC7H,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAM,IAAK,KAC7DC,WAAa,oEACjB,SAASC,OAAOC,GACZ,IACI,IAAID,EAASE,OAAOC,KAAKF,EA+B7B,CA7BA,MAAOG,GAECJ,EAAS,GAAb,IACIK,EAAaJ,EAAKK,OACtB,GAAID,EAAa,EAAG,CAIhB,IAHA,IAAIE,EAAQ,CAAC,EAAG,EAAG,GACfC,EAAQ,EACRC,EAAYJ,EAAa,EACtBJ,EAAKK,OAAS,EAAI,GAErBL,EAAKA,EAAKK,QAAU,IAExB,KAAOE,EAAQH,GAEXE,EAAQ,CAA4B,IAA3BN,EAAKS,WAAWF,KAA4C,IAA3BP,EAAKS,WAAWF,KAA4C,IAA3BP,EAAKS,WAAWF,MAC3FR,GAAUF,SAASS,EAAM,IAAM,GAAKT,UAAsB,EAAXS,EAAM,KAAa,EAAMA,EAAM,IAAM,GAAMT,UAAsB,GAAXS,EAAM,KAAa,EAAMA,EAAM,IAAM,GAAMT,SAAoB,GAAXS,EAAM,IAE/JE,EAAY,IAEZT,EAAOA,EAAOM,OAAS,GAAK,IACX,GAAbG,GACAT,EAAOA,EAAOM,OAAS,GAAK,IAC5BN,EAAOA,EAAOM,OAAS,GAAKR,UAAqB,EAAXS,EAAM,KAAa,IAGzDP,EAAOA,EAAOM,OAAS,GAAKR,UAAqB,GAAXS,EAAM,KAAa,GAGrE,CACJ,CACA,OAAOP,CACX,CACA,SAASW,cAAcV,GACnB,IACI,IAAIW,EAAWV,OAAOW,KAAKZ,EAsB/B,CApBA,MAAOG,GAECQ,EAAW,GAAf,IACIP,EAAaJ,EAAKK,OACtB,GAAID,EAAa,GAAKA,EAAa,GAAK,EAAG,CAGvC,IAFA,IAAIS,EAAU,CAAC,EAAG,EAAG,EAAG,GACpBN,EAAQ,EACLA,EAAQH,GAEXS,EAAU,CAACf,WAAWgB,QAAQd,EAAKe,OAAOR,MAAWT,WAAWgB,QAAQd,EAAKe,OAAOR,MAAWT,WAAWgB,QAAQd,EAAKe,OAAOR,MAAWT,WAAWgB,QAAQd,EAAKe,OAAOR,OACxKI,GAAYK,OAAOC,aAAaJ,EAAS,IAAM,EAAMA,EAAQ,IAAM,GAAMG,OAAOC,cAA4B,GAAbJ,EAAQ,KAAc,EAAMA,EAAQ,IAAM,GAAMG,OAAOC,cAA4B,EAAbJ,EAAQ,KAAc,EAAKA,EAAQ,IAGxMA,EAAQ,IAAM,KACdF,EAASN,QAAU,EACfQ,EAAQ,IAAM,KACdF,EAASN,QAAU,GAG/B,CACJ,CACA,OAAOM,CACX,CACA,SAASO,cAAcC,GAGnB,IAFA,IAAIC,EAAY,GACZf,EAASc,EAAQd,OACZE,EAAQ,EAAGA,EAAQF,IAAUE,EACL,iBAAlBY,EAAQZ,KACfa,GAAaJ,OAAOC,aAAaE,EAAQZ,KAGjD,OAAOR,OAAOqB,EAClB,CACA,SAASC,cAAcC,GAInB,IAHA,IAAIF,EAAYV,cAAcY,GAC1BC,EAAW,GACXlB,EAASe,EAAUf,OACdE,EAAQ,EAAGA,EAAQF,GACxBkB,EAASC,KAAqC,IAAhCJ,EAAUX,WAAWF,MAEvC,OAAOgB,CACX","sources":["dist/user_scripts/base64.js"],"sourcesContent":["\"use strict\";\nvar toBase64 = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\",\n    \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\",\n    \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"+\" , \"/\", \"=\"];\nvar fromBase64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\nfunction base64(data) {\n    try {\n        var base64 = window.btoa(data);    //Use this native function when it's available, as it's a magnitude faster than the non-native code below.\n    }\n    catch (error) {\n        //Defaulting to non-native base64 encoding...\n        var base64 = \"\";\n        var dataLength = data.length;\n        if (dataLength > 0) {\n            var bytes = [0, 0, 0];\n            var index = 0;\n            var remainder = dataLength % 3;\n            while (data.length % 3 > 0) {\n                //Make sure we don't do fuzzy math in the next loop...\n                data[data.length] = \" \";\n            }\n            while (index < dataLength) {\n                //Keep this loop small for speed.\n                bytes = [data.charCodeAt(index++) & 0xFF, data.charCodeAt(index++) & 0xFF, data.charCodeAt(index++) & 0xFF];\n                base64 += toBase64[bytes[0] >> 2] + toBase64[((bytes[0] & 0x3) << 4) | (bytes[1] >> 4)] + toBase64[((bytes[1] & 0xF) << 2) | (bytes[2] >> 6)] + toBase64[bytes[2] & 0x3F];\n            }\n            if (remainder > 0) {\n                //Fill in the padding and recalulate the trailing six-bit group...\n                base64[base64.length - 1] = \"=\";\n                if (remainder == 2) {\n                    base64[base64.length - 2] = \"=\";\n                    base64[base64.length - 3] = toBase64[(bytes[0] & 0x3) << 4];\n                }\n                else {\n                    base64[base64.length - 2] = toBase64[(bytes[1] & 0xF) << 2];\n                }\n            }\n        }\n    }\n    return base64;\n}\nfunction base64_decode(data) {\n    try {\n        var decode64 = window.atob(data);    //Use this native function when it's available, as it's a magnitude faster than the non-native code below.\n    }\n    catch (error) {\n        //Defaulting to non-native base64 decoding...\n        var decode64 = \"\";\n        var dataLength = data.length;\n        if (dataLength > 3 && dataLength % 4 == 0) {\n            var sixbits = [0, 0, 0, 0];    //Declare this out of the loop, to speed up the ops.\n            var index = 0;\n            while (index < dataLength) {\n                //Keep this loop small for speed.\n                sixbits = [fromBase64.indexOf(data.charAt(index++)), fromBase64.indexOf(data.charAt(index++)), fromBase64.indexOf(data.charAt(index++)), fromBase64.indexOf(data.charAt(index++))];\n                decode64 += String.fromCharCode((sixbits[0] << 2) | (sixbits[1] >> 4)) + String.fromCharCode(((sixbits[1] & 0x0F) << 4) | (sixbits[2] >> 2)) + String.fromCharCode(((sixbits[2] & 0x03) << 6) | sixbits[3]);\n            }\n            //Check for the '=' character after the loop, so we don't hose it up.\n            if (sixbits[3] >= 0x40) {\n                decode64.length -= 1;\n                if (sixbits[2] >= 0x40) {\n                    decode64.length -= 1;\n                }\n            }\n        }\n    }\n    return decode64;\n}\nfunction arrayToBase64(arrayIn) {\n    var binString = \"\";\n    var length = arrayIn.length;\n    for (var index = 0; index < length; ++index) {\n        if (typeof arrayIn[index] == \"number\") {\n            binString += String.fromCharCode(arrayIn[index]);\n        }\n    }\n    return base64(binString);\n}\nfunction base64ToArray(b64String) {\n    var binString = base64_decode(b64String);\n    var outArray = [];\n    var length = binString.length;\n    for (var index = 0; index < length;) {\n        outArray.push(binString.charCodeAt(index++) & 0xFF);\n    }\n    return outArray;\n}"],"names":["toBase64","fromBase64","base64","data","window","btoa","error","dataLength","length","bytes","index","remainder","charCodeAt","base64_decode","decode64","atob","sixbits","indexOf","charAt","String","fromCharCode","arrayToBase64","arrayIn","binString","base64ToArray","b64String","outArray","push"],"version":3,"file":"build-index.8a1a81f8.js.map"}