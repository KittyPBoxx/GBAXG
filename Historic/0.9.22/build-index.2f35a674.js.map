{"mappings":"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","sources":["dist/IodineGBA/core/graphics/BGTEXT.js"],"sourcesContent":["\"use strict\";\n/*\n Copyright (C) 2012-2015 Grant Galitz\n \n Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n \n The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n \n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\nfunction GameBoyAdvanceBGTEXTRenderer(gfx, BGLayer) {\n    BGLayer = BGLayer | 0;\n    this.gfx = gfx;\n    this.BGLayer = BGLayer | 0;\n}\nif (__VIEWS_SUPPORTED__) {\n    GameBoyAdvanceBGTEXTRenderer.prototype.initialize = function () {\n        this.VRAM = this.gfx.VRAM;\n        this.VRAM16 = this.gfx.VRAM16;\n        this.VRAM32 = this.gfx.VRAM32;\n        this.palette16 = this.gfx.palette16;\n        this.palette256 = this.gfx.palette256;\n        this.offset = ((this.BGLayer << 8) + 0x100) | 0;\n        this.scratchBuffer = getInt32ViewCustom(this.gfx.buffer, this.offset | 0, ((this.offset | 0) + 248) | 0);\n        this.tileFetched = getInt32ViewCustom(this.gfx.buffer, ((this.offset | 0) + 0xF8) | 0, ((this.offset | 0) + 0x100) | 0);\n        this.BGXCoord = 0;\n        this.BGYCoord = 0;\n        this.do256 = 0;\n        this.doMosaic = 0;\n        this.screenSizePreprocess(0);\n        this.priorityPreprocess(0);\n        this.screenBaseBlockPreprocess(0);\n        this.characterBaseBlockPreprocess(0);\n    }\n    GameBoyAdvanceBGTEXTRenderer.prototype.renderWholeTiles8BIT = function (xTileStart, yTileStart, yTileOffset) {\n        xTileStart = xTileStart | 0;\n        yTileStart = yTileStart | 0;\n        yTileOffset = yTileOffset | 0;\n        //Process full 8 pixels at a time:\n        for (var position = (8 - (this.BGXCoord & 0x7)) | 0; (position | 0) < 240; position = ((position | 0) + 8) | 0) {\n            //Fetch tile attributes:\n            //Get 8 pixels of data:\n            this.process8BitVRAM(this.fetchTile(yTileStart | 0, xTileStart | 0) | 0, yTileOffset | 0);\n            //Copy the buffered tile to line:\n            this.scratchBuffer[position | 0] = this.tileFetched[0] | 0;\n            this.scratchBuffer[((position | 0) + 1) | 0] = this.tileFetched[1] | 0;\n            this.scratchBuffer[((position | 0) + 2) | 0] = this.tileFetched[2] | 0;\n            this.scratchBuffer[((position | 0) + 3) | 0] = this.tileFetched[3] | 0;\n            this.scratchBuffer[((position | 0) + 4) | 0] = this.tileFetched[4] | 0;\n            this.scratchBuffer[((position | 0) + 5) | 0] = this.tileFetched[5] | 0;\n            this.scratchBuffer[((position | 0) + 6) | 0] = this.tileFetched[6] | 0;\n            this.scratchBuffer[((position | 0) + 7) | 0] = this.tileFetched[7] | 0;\n            //Increment a tile counter:\n            xTileStart = ((xTileStart | 0) + 1) | 0;\n        }\n    }\n    GameBoyAdvanceBGTEXTRenderer.prototype.renderWholeTiles4BIT = function (xTileStart, yTileStart, yTileOffset) {\n        xTileStart = xTileStart | 0;\n        yTileStart = yTileStart | 0;\n        yTileOffset = yTileOffset | 0;\n        //Process full 8 pixels at a time:\n        for (var position = (8 - (this.BGXCoord & 0x7)) | 0; (position | 0) < 240; position = ((position | 0) + 8) | 0) {\n            //Fetch tile attributes:\n            //Get 8 pixels of data:\n            this.process4BitVRAM(this.fetchTile(yTileStart | 0, xTileStart | 0) | 0, yTileOffset | 0);\n            //Copy the buffered tile to line:\n            this.scratchBuffer[position | 0] = this.tileFetched[0] | 0;\n            this.scratchBuffer[((position | 0) + 1) | 0] = this.tileFetched[1] | 0;\n            this.scratchBuffer[((position | 0) + 2) | 0] = this.tileFetched[2] | 0;\n            this.scratchBuffer[((position | 0) + 3) | 0] = this.tileFetched[3] | 0;\n            this.scratchBuffer[((position | 0) + 4) | 0] = this.tileFetched[4] | 0;\n            this.scratchBuffer[((position | 0) + 5) | 0] = this.tileFetched[5] | 0;\n            this.scratchBuffer[((position | 0) + 6) | 0] = this.tileFetched[6] | 0;\n            this.scratchBuffer[((position | 0) + 7) | 0] = this.tileFetched[7] | 0;\n            //Increment a tile counter:\n            xTileStart = ((xTileStart | 0) + 1) | 0;\n        }\n    }\n    GameBoyAdvanceBGTEXTRenderer.prototype.fetchVRAMStart = function () {\n        //Handle the the first tile of the scan-line specially:\n        var pixelPipelinePosition = this.BGXCoord & 0x7;\n        switch (pixelPipelinePosition | 0) {\n            case 0:\n                this.scratchBuffer[0] = this.tileFetched[0] | 0;\n            case 1:\n                this.scratchBuffer[(1 - (pixelPipelinePosition | 0)) | 0] = this.tileFetched[1] | 0;\n            case 2:\n                this.scratchBuffer[(2 - (pixelPipelinePosition | 0)) | 0] = this.tileFetched[2] | 0;\n            case 3:\n                this.scratchBuffer[(3 - (pixelPipelinePosition | 0)) | 0] = this.tileFetched[3] | 0;\n            case 4:\n                this.scratchBuffer[(4 - (pixelPipelinePosition | 0)) | 0] = this.tileFetched[4] | 0;\n            case 5:\n                this.scratchBuffer[(5 - (pixelPipelinePosition | 0)) | 0] = this.tileFetched[5] | 0;\n            case 6:\n                this.scratchBuffer[(6 - (pixelPipelinePosition | 0)) | 0] = this.tileFetched[6] | 0;\n            default:\n                this.scratchBuffer[(7 - (pixelPipelinePosition | 0)) | 0] = this.tileFetched[7] | 0;\n        }\n    }\n}\nelse {\n    GameBoyAdvanceBGTEXTRenderer.prototype.initialize = function () {\n        this.VRAM = this.gfx.VRAM;\n        this.VRAM16 = this.gfx.VRAM16;\n        this.VRAM32 = this.gfx.VRAM32;\n        this.palette16 = this.gfx.palette16;\n        this.palette256 = this.gfx.palette256;\n        this.offset = (this.BGLayer << 8) + 0x100;\n        this.offsetEnd = this.offset + 240;\n        this.scratchBuffer = this.gfx.buffer;\n        this.tileFetched = getInt32Array(8);\n        this.BGXCoord = 0;\n        this.BGYCoord = 0;\n        this.do256 = 0;\n        this.doMosaic = 0;\n        this.screenSizePreprocess(0);\n        this.priorityPreprocess(0);\n        this.screenBaseBlockPreprocess(0);\n        this.characterBaseBlockPreprocess(0);\n    }\n    GameBoyAdvanceBGTEXTRenderer.prototype.renderWholeTiles8BIT = function (xTileStart, yTileStart, yTileOffset) {\n        //Process full 8 pixels at a time:\n        for (var position = 8 - (this.BGXCoord & 0x7) + this.offset; position < this.offsetEnd;) {\n            //Fetch tile attributes:\n            //Get 8 pixels of data:\n            this.process8BitVRAM(this.fetchTile(yTileStart, xTileStart++), yTileOffset);\n            //Copy the buffered tile to line:\n            this.scratchBuffer[position++] = this.tileFetched[0];\n            this.scratchBuffer[position++] = this.tileFetched[1];\n            this.scratchBuffer[position++] = this.tileFetched[2];\n            this.scratchBuffer[position++] = this.tileFetched[3];\n            this.scratchBuffer[position++] = this.tileFetched[4];\n            this.scratchBuffer[position++] = this.tileFetched[5];\n            this.scratchBuffer[position++] = this.tileFetched[6];\n            this.scratchBuffer[position++] = this.tileFetched[7];\n        }\n    }\n    GameBoyAdvanceBGTEXTRenderer.prototype.renderWholeTiles4BIT = function (xTileStart, yTileStart, yTileOffset) {\n        //Process full 8 pixels at a time:\n        for (var position = 8 - (this.BGXCoord & 0x7) + this.offset; position < this.offsetEnd;) {\n            //Fetch tile attributes:\n            //Get 8 pixels of data:\n            this.process4BitVRAM(this.fetchTile(yTileStart, xTileStart++), yTileOffset);\n            //Copy the buffered tile to line:\n            this.scratchBuffer[position++] = this.tileFetched[0];\n            this.scratchBuffer[position++] = this.tileFetched[1];\n            this.scratchBuffer[position++] = this.tileFetched[2];\n            this.scratchBuffer[position++] = this.tileFetched[3];\n            this.scratchBuffer[position++] = this.tileFetched[4];\n            this.scratchBuffer[position++] = this.tileFetched[5];\n            this.scratchBuffer[position++] = this.tileFetched[6];\n            this.scratchBuffer[position++] = this.tileFetched[7];\n        }\n    }\n    GameBoyAdvanceBGTEXTRenderer.prototype.fetchVRAMStart = function () {\n        //Handle the the first tile of the scan-line specially:\n        var pixelPipelinePosition = this.BGXCoord & 0x7;\n        var offset = pixelPipelinePosition - this.offset;\n        switch (pixelPipelinePosition | 0) {\n            case 0:\n                this.scratchBuffer[offset] = this.tileFetched[0];\n            case 1:\n                this.scratchBuffer[1 - offset] = this.tileFetched[1];\n            case 2:\n                this.scratchBuffer[2 - offset] = this.tileFetched[2];\n            case 3:\n                this.scratchBuffer[3 - offset] = this.tileFetched[3];\n            case 4:\n                this.scratchBuffer[4 - offset] = this.tileFetched[4];\n            case 5:\n                this.scratchBuffer[5 - offset] = this.tileFetched[5];\n            case 6:\n                this.scratchBuffer[6 - offset] = this.tileFetched[6];\n            default:\n                this.scratchBuffer[7 - offset] = this.tileFetched[7];\n        }\n    }\n}\nGameBoyAdvanceBGTEXTRenderer.prototype.renderScanLine = function (line) {\n    line = line | 0;\n    if ((this.doMosaic | 0) != 0) {\n        //Correct line number for mosaic:\n        line = ((line | 0) - (this.gfx.mosaicRenderer.getMosaicYOffset(line | 0) | 0)) | 0;\n    }\n    var yTileOffset = ((line | 0) + (this.BGYCoord | 0)) & 0x7;\n    var yTileStart = ((line | 0) + (this.BGYCoord | 0)) >> 3;\n    var xTileStart = this.BGXCoord >> 3;\n    //Render the tiles:\n    if ((this.do256 | 0) != 0) {\n        //8-bit palette mode:\n        this.render8BITLine(yTileStart | 0, xTileStart | 0, yTileOffset | 0);\n    }\n    else {\n        //4-bit palette mode:\n        this.render4BITLine(yTileStart | 0, xTileStart | 0, yTileOffset | 0);\n    }\n    if ((this.doMosaic | 0) != 0) {\n        //Pixelize the line horizontally:\n        this.gfx.mosaicRenderer.renderMosaicHorizontal(this.offset | 0);\n    }\n}\nGameBoyAdvanceBGTEXTRenderer.prototype.render8BITLine = function (yTileStart, xTileStart, yTileOffset) {\n    yTileStart = yTileStart | 0;\n    xTileStart = xTileStart | 0;\n    yTileOffset = yTileOffset | 0;\n    //Fetch tile attributes:\n    var chrData = this.fetchTile(yTileStart | 0, xTileStart | 0) | 0;\n    xTileStart = ((xTileStart | 0) + 1) | 0;\n    //Get 8 pixels of data:\n    this.process8BitVRAM(chrData | 0, yTileOffset | 0);\n    //Copy the buffered tile to line:\n    this.fetchVRAMStart();\n    //Render the rest of the tiles fast:\n    this.renderWholeTiles8BIT(xTileStart | 0, yTileStart | 0, yTileOffset | 0);\n}\nGameBoyAdvanceBGTEXTRenderer.prototype.render4BITLine = function (yTileStart, xTileStart, yTileOffset) {\n    //Fetch tile attributes:\n    var chrData = this.fetchTile(yTileStart | 0, xTileStart | 0) | 0;\n    xTileStart = ((xTileStart | 0) + 1) | 0;\n    //Get 8 pixels of data:\n    this.process4BitVRAM(chrData | 0, yTileOffset | 0);\n    //Copy the buffered tile to line:\n    this.fetchVRAMStart();\n    //Render the rest of the tiles fast:\n    this.renderWholeTiles4BIT(xTileStart | 0, yTileStart | 0, yTileOffset | 0);\n}\nif (__LITTLE_ENDIAN__) {\n    GameBoyAdvanceBGTEXTRenderer.prototype.fetchTile = function (yTileStart, xTileStart) {\n        yTileStart = yTileStart | 0;\n        xTileStart = xTileStart | 0;\n        //Find the tile code to locate the tile block:\n        var address = ((this.computeTileNumber(yTileStart | 0, xTileStart | 0) | 0) + (this.BGScreenBaseBlock | 0)) | 0;\n        return this.VRAM16[address & 0x7FFF] | 0;\n    }\n}\nelse {\n    GameBoyAdvanceBGTEXTRenderer.prototype.fetchTile = function (yTileStart, xTileStart) {\n        //Find the tile code to locate the tile block:\n        var address = ((this.computeTileNumber(yTileStart, xTileStart) + this.BGScreenBaseBlock) << 1) & 0xFFFF;\n        return (this.VRAM[address | 1] << 8) | this.VRAM[address];\n    }\n}\nGameBoyAdvanceBGTEXTRenderer.prototype.computeTileNumber = function (yTile, xTile) {\n    //Return the true tile number:\n    yTile = yTile | 0;\n    xTile = xTile | 0;\n    var tileNumber = xTile & 0x1F;\n    switch (this.tileMode | 0) {\n        //1x1\n        case 0:\n            tileNumber = tileNumber | ((yTile & 0x1F) << 5);\n            break;\n        //2x1\n        case 1:\n            tileNumber = tileNumber | (((xTile & 0x20) | (yTile & 0x1F)) << 5);\n            break;\n        //1x2\n        case 2:\n            tileNumber = tileNumber | ((yTile & 0x3F) << 5);\n            break;\n        //2x2\n        default:\n            tileNumber = tileNumber | (((xTile & 0x20) | (yTile & 0x1F)) << 5) | ((yTile & 0x20) << 6);\n    }\n    return tileNumber | 0;\n}\nGameBoyAdvanceBGTEXTRenderer.prototype.process4BitVRAM = function (chrData, yOffset) {\n    //16 color tile mode:\n    chrData = chrData | 0;\n    yOffset = yOffset | 0;\n    //Parse flip attributes, grab palette, and then output pixel:\n    var address = (chrData & 0x3FF) << 3;\n    address = ((address | 0) + (this.BGCharacterBaseBlock | 0)) | 0;\n    if ((chrData & 0x800) == 0) {\n        //No vertical flip:\n        address = ((address | 0) + (yOffset | 0)) | 0;\n\n    }\n    else {\n        //Vertical flip:\n        address = ((address | 0) + 7) | 0;\n        address = ((address | 0) - (yOffset | 0)) | 0;\n    }\n    //Copy out our pixels:\n    this.render4BitVRAM(chrData >> 8, address | 0);\n}\nif (__LITTLE_ENDIAN__) {\n    GameBoyAdvanceBGTEXTRenderer.prototype.render4BitVRAM = function (chrData, address) {\n        chrData = chrData | 0;\n        address = address | 0;\n        //Unrolled data tile line fetch:\n        if ((address | 0) < 0x4000) {\n            //Tile address valid:\n            var paletteOffset = chrData & 0xF0;\n            var data = this.VRAM32[address | 0] | 0;\n            if ((chrData & 0x4) == 0) {\n                //Normal Horizontal:\n                this.tileFetched[0] = this.palette16[paletteOffset | (data & 0xF)] | this.priorityFlag;\n                this.tileFetched[1] = this.palette16[paletteOffset | ((data >> 4) & 0xF)] | this.priorityFlag;\n                this.tileFetched[2] = this.palette16[paletteOffset | ((data >> 8) & 0xF)] | this.priorityFlag;\n                this.tileFetched[3] = this.palette16[paletteOffset | ((data >> 12) & 0xF)] | this.priorityFlag;\n                this.tileFetched[4] = this.palette16[paletteOffset | ((data >> 16) & 0xF)] | this.priorityFlag;\n                this.tileFetched[5] = this.palette16[paletteOffset | ((data >> 20) & 0xF)] | this.priorityFlag;\n                this.tileFetched[6] = this.palette16[paletteOffset | ((data >> 24) & 0xF)] | this.priorityFlag;\n                this.tileFetched[7] = this.palette16[paletteOffset | (data >>> 28)] | this.priorityFlag;\n            }\n            else {\n                //Flipped Horizontally:\n                this.tileFetched[0] = this.palette16[paletteOffset | (data >>> 28)] | this.priorityFlag;\n                this.tileFetched[1] = this.palette16[paletteOffset | ((data >> 24) & 0xF)] | this.priorityFlag;\n                this.tileFetched[2] = this.palette16[paletteOffset | ((data >> 20) & 0xF)] | this.priorityFlag;\n                this.tileFetched[3] = this.palette16[paletteOffset | ((data >> 16) & 0xF)] | this.priorityFlag;\n                this.tileFetched[4] = this.palette16[paletteOffset | ((data >> 12) & 0xF)] | this.priorityFlag;\n                this.tileFetched[5] = this.palette16[paletteOffset | ((data >> 8) & 0xF)] | this.priorityFlag;\n                this.tileFetched[6] = this.palette16[paletteOffset | ((data >> 4) & 0xF)] | this.priorityFlag;\n                this.tileFetched[7] = this.palette16[paletteOffset | (data & 0xF)] | this.priorityFlag;\n            }\n        }\n        else {\n            //Tile address invalid:\n            this.addressInvalidRender();\n        }\n    }\n}\nelse {\n    GameBoyAdvanceBGTEXTRenderer.prototype.render4BitVRAM = function (chrData, address) {\n        address <<= 2;\n        //Unrolled data tile line fetch:\n        if (address < 0x10000) {\n            //Tile address valid:\n            var paletteOffset = chrData & 0xF0;\n            var data = this.VRAM[address];\n            if ((chrData & 0x4) == 0) {\n                //Normal Horizontal:\n                this.tileFetched[0] = this.palette16[paletteOffset | (data & 0xF)] | this.priorityFlag;\n                this.tileFetched[1] = this.palette16[paletteOffset | (data >> 4)] | this.priorityFlag;\n                data = this.VRAM[address | 1];\n                this.tileFetched[2] = this.palette16[paletteOffset | (data & 0xF)] | this.priorityFlag;\n                this.tileFetched[3] = this.palette16[paletteOffset | (data >> 4)] | this.priorityFlag;\n                data = this.VRAM[address | 2];\n                this.tileFetched[4] = this.palette16[paletteOffset | (data & 0xF)] | this.priorityFlag;\n                this.tileFetched[5] = this.palette16[paletteOffset | (data >> 4)] | this.priorityFlag;\n                data = this.VRAM[address | 3];\n                this.tileFetched[6] = this.palette16[paletteOffset | (data & 0xF)] | this.priorityFlag;\n                this.tileFetched[7] = this.palette16[paletteOffset | (data >> 4)] | this.priorityFlag;\n            }\n            else {\n                //Flipped Horizontally:\n                this.tileFetched[7] = this.palette16[paletteOffset | (data & 0xF)] | this.priorityFlag;\n                this.tileFetched[6] = this.palette16[paletteOffset | (data >> 4)] | this.priorityFlag;\n                data = this.VRAM[address | 1];\n                this.tileFetched[5] = this.palette16[paletteOffset | (data & 0xF)] | this.priorityFlag;\n                this.tileFetched[4] = this.palette16[paletteOffset | (data >> 4)] | this.priorityFlag;\n                data = this.VRAM[address | 2];\n                this.tileFetched[3] = this.palette16[paletteOffset | (data & 0xF)] | this.priorityFlag;\n                this.tileFetched[2] = this.palette16[paletteOffset | (data >> 4)] | this.priorityFlag;\n                data = this.VRAM[address | 3];\n                this.tileFetched[1] = this.palette16[paletteOffset | (data & 0xF)] | this.priorityFlag;\n                this.tileFetched[0] = this.palette16[paletteOffset | (data >> 4)] | this.priorityFlag;\n            }\n        }\n        else {\n            //Tile address invalid:\n            this.addressInvalidRender();\n        }\n    }\n}\n/*\n If there was 64 bit typed array support,\n then process8BitVRAM, render8BitVRAMNormal,\n and render8BitVRAMFlipped could be optimized further.\n Namely make one fetch for tile data instead of two,\n and cancel a y-offset shift.\n */\nGameBoyAdvanceBGTEXTRenderer.prototype.process8BitVRAM = function (chrData, yOffset) {\n    //16 color tile mode:\n    chrData = chrData | 0;\n    yOffset = yOffset | 0;\n    //Parse flip attributes, grab palette, and then output pixel:\n    var address = (chrData & 0x3FF) << 4;\n    address = ((address | 0) + (this.BGCharacterBaseBlock | 0)) | 0;\n    //Copy out our pixels:\n    switch (chrData & 0xC00) {\n        //No Flip:\n        case 0:\n            address = ((address | 0) + (yOffset << 1)) | 0;\n            this.render8BitVRAMNormal(address | 0);\n            break;\n        //Horizontal Flip:\n        case 0x400:\n            address = ((address | 0) + (yOffset << 1)) | 0;\n            this.render8BitVRAMFlipped(address | 0);\n            break;\n        //Vertical Flip:\n        case 0x800:\n            address = ((address | 0) + 14) | 0;\n            address = ((address | 0) - (yOffset << 1)) | 0;\n            this.render8BitVRAMNormal(address | 0);\n            break;\n        //Horizontal & Vertical Flip:\n        default:\n            address = ((address | 0) + 14) | 0;\n            address = ((address | 0) - (yOffset << 1)) | 0;\n            this.render8BitVRAMFlipped(address | 0);\n    }\n}\nif (__LITTLE_ENDIAN__) {\n    GameBoyAdvanceBGTEXTRenderer.prototype.render8BitVRAMNormal = function (address) {\n        address = address | 0;\n        if ((address | 0) < 0x4000) {\n            //Tile address valid:\n            //Normal Horizontal:\n            var data = this.VRAM32[address | 0] | 0;\n            this.tileFetched[0] = this.palette256[data & 0xFF] | this.priorityFlag;\n            this.tileFetched[1] = this.palette256[(data >> 8) & 0xFF] | this.priorityFlag;\n            this.tileFetched[2] = this.palette256[(data >> 16) & 0xFF] | this.priorityFlag;\n            this.tileFetched[3] = this.palette256[data >>> 24] | this.priorityFlag;\n            data = this.VRAM32[address | 1] | 0;\n            this.tileFetched[4] = this.palette256[data & 0xFF] | this.priorityFlag;\n            this.tileFetched[5] = this.palette256[(data >> 8) & 0xFF] | this.priorityFlag;\n            this.tileFetched[6] = this.palette256[(data >> 16) & 0xFF] | this.priorityFlag;\n            this.tileFetched[7] = this.palette256[data >>> 24] | this.priorityFlag;\n        }\n        else {\n            //Tile address invalid:\n            this.addressInvalidRender();\n        }\n    }\n    GameBoyAdvanceBGTEXTRenderer.prototype.render8BitVRAMFlipped = function (address) {\n        address = address | 0;\n        if ((address | 0) < 0x4000) {\n            //Tile address valid:\n            //Flipped Horizontally:\n            var data = this.VRAM32[address | 0] | 0;\n            this.tileFetched[4] = this.palette256[data >>> 24] | this.priorityFlag;\n            this.tileFetched[5] = this.palette256[(data >> 16) & 0xFF] | this.priorityFlag;\n            this.tileFetched[6] = this.palette256[(data >> 8) & 0xFF] | this.priorityFlag;\n            this.tileFetched[7] = this.palette256[data & 0xFF] | this.priorityFlag;\n            data = this.VRAM32[address | 1] | 0;\n            this.tileFetched[0] = this.palette256[data >>> 24] | this.priorityFlag;\n            this.tileFetched[1] = this.palette256[(data >> 16) & 0xFF] | this.priorityFlag;\n            this.tileFetched[2] = this.palette256[(data >> 8) & 0xFF] | this.priorityFlag;\n            this.tileFetched[3] = this.palette256[data & 0xFF] | this.priorityFlag;\n        }\n        else {\n            //Tile address invalid:\n            this.addressInvalidRender();\n        }\n    }\n}\nelse {\n    GameBoyAdvanceBGTEXTRenderer.prototype.render8BitVRAMNormal = function (address) {\n        address <<= 2;\n        if (address < 0x10000) {\n            //Tile address valid:\n            //Normal Horizontal:\n            this.tileFetched[0] = this.palette256[this.VRAM[address]] | this.priorityFlag;\n            this.tileFetched[1] = this.palette256[this.VRAM[address | 1]] | this.priorityFlag;\n            this.tileFetched[2] = this.palette256[this.VRAM[address | 2]] | this.priorityFlag;\n            this.tileFetched[3] = this.palette256[this.VRAM[address | 3]] | this.priorityFlag;\n            this.tileFetched[4] = this.palette256[this.VRAM[address | 4]] | this.priorityFlag;\n            this.tileFetched[5] = this.palette256[this.VRAM[address | 5]] | this.priorityFlag;\n            this.tileFetched[6] = this.palette256[this.VRAM[address | 6]] | this.priorityFlag;\n            this.tileFetched[7] = this.palette256[this.VRAM[address | 7]] | this.priorityFlag;\n        }\n        else {\n            //Tile address invalid:\n            this.addressInvalidRender();\n        }\n    }\n    GameBoyAdvanceBGTEXTRenderer.prototype.render8BitVRAMFlipped = function (address) {\n        address <<= 2;\n        if (address < 0x10000) {\n            //Tile address valid:\n            //Flipped Horizontally:\n            this.tileFetched[7] = this.palette256[this.VRAM[address]] | this.priorityFlag;\n            this.tileFetched[6] = this.palette256[this.VRAM[address | 1]] | this.priorityFlag;\n            this.tileFetched[5] = this.palette256[this.VRAM[address | 2]] | this.priorityFlag;\n            this.tileFetched[4] = this.palette256[this.VRAM[address | 3]] | this.priorityFlag;\n            this.tileFetched[3] = this.palette256[this.VRAM[address | 4]] | this.priorityFlag;\n            this.tileFetched[2] = this.palette256[this.VRAM[address | 5]] | this.priorityFlag;\n            this.tileFetched[1] = this.palette256[this.VRAM[address | 6]] | this.priorityFlag;\n            this.tileFetched[0] = this.palette256[this.VRAM[address | 7]] | this.priorityFlag;\n        }\n        else {\n            //Tile address invalid:\n            this.addressInvalidRender();\n        }\n    }\n}\nGameBoyAdvanceBGTEXTRenderer.prototype.addressInvalidRender = function () {\n    //In GBA mode on NDS, we display transparency on invalid tiles:\n    var data = this.gfx.transparency | this.priorityFlag;\n    this.tileFetched[0] = data | 0;\n    this.tileFetched[1] = data | 0;\n    this.tileFetched[2] = data | 0;\n    this.tileFetched[3] = data | 0;\n    this.tileFetched[4] = data | 0;\n    this.tileFetched[5] = data | 0;\n    this.tileFetched[6] = data | 0;\n    this.tileFetched[7] = data | 0;\n}\nGameBoyAdvanceBGTEXTRenderer.prototype.setMosaicEnable = function (doMosaic) {\n    doMosaic = doMosaic | 0;\n    this.doMosaic = doMosaic | 0;\n}\nGameBoyAdvanceBGTEXTRenderer.prototype.paletteModeSelect = function (do256) {\n    do256 = do256 | 0;\n    this.do256 = do256 | 0;\n}\nGameBoyAdvanceBGTEXTRenderer.prototype.screenSizePreprocess = function (BGScreenSize) {\n    BGScreenSize = BGScreenSize | 0;\n    this.tileMode = BGScreenSize | 0;\n}\nGameBoyAdvanceBGTEXTRenderer.prototype.priorityPreprocess = function (BGPriority) {\n    BGPriority = BGPriority | 0;\n    this.priorityFlag = (BGPriority << 23) | (1 << (this.BGLayer | 0x10));\n}\nGameBoyAdvanceBGTEXTRenderer.prototype.screenBaseBlockPreprocess = function (BGScreenBaseBlock) {\n    BGScreenBaseBlock = BGScreenBaseBlock | 0;\n    this.BGScreenBaseBlock = BGScreenBaseBlock << 10;\n}\nGameBoyAdvanceBGTEXTRenderer.prototype.characterBaseBlockPreprocess = function (BGCharacterBaseBlock) {\n    BGCharacterBaseBlock = BGCharacterBaseBlock | 0;\n    this.BGCharacterBaseBlock = BGCharacterBaseBlock << 12;\n}\nGameBoyAdvanceBGTEXTRenderer.prototype.writeBGCNT8_0 = function (data) {\n    data = data | 0;\n    this.setMosaicEnable(data & 0x40);\n    this.paletteModeSelect(data & 0x80);\n    this.priorityPreprocess(data & 0x3);\n    this.characterBaseBlockPreprocess((data & 0xC) >> 2);\n}\nGameBoyAdvanceBGTEXTRenderer.prototype.writeBGCNT8_1 = function (data) {\n    data = data | 0;\n    this.screenSizePreprocess((data & 0xC0) >> 6);\n    this.screenBaseBlockPreprocess(data & 0x1F);\n}\nGameBoyAdvanceBGTEXTRenderer.prototype.writeBGCNT16 = function (data) {\n    data = data | 0;\n    this.setMosaicEnable(data & 0x40);\n    this.paletteModeSelect(data & 0x80);\n    this.priorityPreprocess(data & 0x3);\n    this.characterBaseBlockPreprocess((data & 0xC) >> 2);\n    this.screenSizePreprocess((data & 0xC000) >> 14);\n    this.screenBaseBlockPreprocess((data >> 8) & 0x1F);\n}\nGameBoyAdvanceBGTEXTRenderer.prototype.writeBGHOFS8_0 = function (data) {\n    data = data | 0;\n    this.BGXCoord = (this.BGXCoord & 0x100) | data;\n}\nGameBoyAdvanceBGTEXTRenderer.prototype.writeBGHOFS8_1 = function (data) {\n    data = data | 0;\n    this.BGXCoord = (data << 8) | (this.BGXCoord & 0xFF);\n}\nGameBoyAdvanceBGTEXTRenderer.prototype.writeBGHOFS16 = function (data) {\n    data = data | 0;\n    this.BGXCoord = data | 0;\n}\nGameBoyAdvanceBGTEXTRenderer.prototype.writeBGVOFS8_0 = function (data) {\n    data = data | 0;\n    this.BGYCoord = (this.BGYCoord & 0x100) | data;\n}\nGameBoyAdvanceBGTEXTRenderer.prototype.writeBGVOFS8_1 = function (data) {\n    data = data | 0;\n    this.BGYCoord = (data << 8) | (this.BGYCoord & 0xFF);\n}\nGameBoyAdvanceBGTEXTRenderer.prototype.writeBGVOFS16 = function (data) {\n    data = data | 0;\n    this.BGYCoord = data | 0;\n}\nGameBoyAdvanceBGTEXTRenderer.prototype.writeBGOFS32 = function (data) {\n    data = data | 0;\n    this.BGXCoord = data & 0x1FF;\n    this.BGYCoord = data >> 16;\n}"],"names":["GameBoyAdvanceBGTEXTRenderer","gfx","BGLayer","this","__VIEWS_SUPPORTED__","prototype","initialize","VRAM","VRAM16","VRAM32","palette16","palette256","offset","scratchBuffer","getInt32ViewCustom","buffer","tileFetched","BGXCoord","BGYCoord","do256","doMosaic","screenSizePreprocess","priorityPreprocess","screenBaseBlockPreprocess","characterBaseBlockPreprocess","renderWholeTiles8BIT","xTileStart","yTileStart","yTileOffset","position","process8BitVRAM","fetchTile","renderWholeTiles4BIT","process4BitVRAM","fetchVRAMStart","pixelPipelinePosition","offsetEnd","getInt32Array","renderScanLine","line","mosaicRenderer","getMosaicYOffset","render8BITLine","render4BITLine","renderMosaicHorizontal","chrData","__LITTLE_ENDIAN__","address","computeTileNumber","BGScreenBaseBlock","yTile","xTile","tileNumber","tileMode","yOffset","BGCharacterBaseBlock","render4BitVRAM","paletteOffset","data","priorityFlag","addressInvalidRender","render8BitVRAMNormal","render8BitVRAMFlipped","transparency","setMosaicEnable","paletteModeSelect","BGScreenSize","BGPriority","writeBGCNT8_0","writeBGCNT8_1","writeBGCNT16","writeBGHOFS8_0","writeBGHOFS8_1","writeBGHOFS16","writeBGVOFS8_0","writeBGVOFS8_1","writeBGVOFS16","writeBGOFS32"],"version":3,"file":"build-index.2f35a674.js.map"}